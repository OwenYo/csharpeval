//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\GitProjects\csharpeval\ExpressionEvaluator\Parser\CSharp4.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class CSharp4Parser : Parser {
	public const int
		Pp_directive=1, BYTE_ORDER_MARK=2, SINGLE_LINE_DOC_COMMENT=3, DELIMITED_DOC_COMMENT=4, 
		NEW_LINE=5, SINGLE_LINE_COMMENT=6, DELIMITED_COMMENT=7, WHITESPACE=8, 
		ABSTRACT=9, ADD=10, ALIAS=11, ARGLIST=12, AS=13, ASCENDING=14, BASE=15, 
		BOOL=16, BREAK=17, BY=18, BYTE=19, CASE=20, CATCH=21, CHAR=22, CHECKED=23, 
		CLASS=24, CONST=25, CONTINUE=26, DECIMAL=27, DEFAULT=28, DELEGATE=29, 
		DESCENDING=30, DO=31, DOUBLE=32, DYNAMIC=33, ELSE=34, ENUM=35, EQUALS=36, 
		EVENT=37, EXPLICIT=38, EXTERN=39, FALSE=40, FINALLY=41, FIXED=42, FLOAT=43, 
		FOR=44, FOREACH=45, FROM=46, GET=47, GOTO=48, GROUP=49, IF=50, IMPLICIT=51, 
		IN=52, INT=53, INTERFACE=54, INTERNAL=55, INTO=56, IS=57, JOIN=58, LET=59, 
		LOCK=60, LONG=61, NAMESPACE=62, NEW=63, NULL=64, OBJECT=65, ON=66, OPERATOR=67, 
		ORDERBY=68, OUT=69, OVERRIDE=70, PARAMS=71, PARTIAL=72, PRIVATE=73, PROTECTED=74, 
		PUBLIC=75, READONLY=76, REF=77, REMOVE=78, RETURN=79, SBYTE=80, SEALED=81, 
		SELECT=82, SET=83, SHORT=84, SIZEOF=85, STACKALLOC=86, STATIC=87, STRING=88, 
		STRUCT=89, SWITCH=90, THIS=91, THROW=92, TRUE=93, TRY=94, TYPEOF=95, UINT=96, 
		ULONG=97, UNCHECKED=98, UNSAFE=99, USHORT=100, USING=101, VIRTUAL=102, 
		VOID=103, VOLATILE=104, WHERE=105, WHILE=106, YIELD=107, IDENTIFIER=108, 
		INTEGER_LITERAL=109, LiteralAccess=110, REAL_LITERAL=111, CHARACTER_LITERAL=112, 
		STRING_LITERAL=113, OPEN_BRACE=114, CLOSE_BRACE=115, OPEN_BRACKET=116, 
		CLOSE_BRACKET=117, OPEN_PARENS=118, CLOSE_PARENS=119, DOT=120, COMMA=121, 
		COLON=122, SEMICOLON=123, PLUS=124, MINUS=125, STAR=126, DIV=127, PERCENT=128, 
		AMP=129, BITWISE_OR=130, CARET=131, BANG=132, TILDE=133, ASSIGNMENT=134, 
		LT=135, GT=136, INTERR=137, DOUBLE_COLON=138, OP_COALESCING=139, OP_INC=140, 
		OP_DEC=141, OP_AND=142, OP_OR=143, OP_PTR=144, OP_EQ=145, OP_NE=146, OP_LE=147, 
		OP_GE=148, OP_ADD_ASSIGNMENT=149, OP_SUB_ASSIGNMENT=150, OP_MULT_ASSIGNMENT=151, 
		OP_DIV_ASSIGNMENT=152, OP_MOD_ASSIGNMENT=153, OP_AND_ASSIGNMENT=154, OP_OR_ASSIGNMENT=155, 
		OP_XOR_ASSIGNMENT=156, OP_LEFT_SHIFT=157, OP_LEFT_SHIFT_ASSIGNMENT=158, 
		OP_RIGHT_SHIFT=159, OP_RIGHT_SHIFT_ASSIGNMENT=160, QUOTE=161, DOUBLE_QUOTE=162, 
		BACK_SLASH=163, DOUBLE_BACK_SLASH=164, SHARP=165, COLONswitch=166;
	public const int
		RULE_namespace_name = 0, RULE_type_name = 1, RULE_identifier = 2, RULE_namespace_or_type_name = 3, 
		RULE_type_argument_list_opt = 4, RULE_type = 5, RULE_base_type = 6, RULE_simple_type = 7, 
		RULE_numeric_type = 8, RULE_integral_type = 9, RULE_floating_point_type = 10, 
		RULE_nullable_type = 11, RULE_non_nullable_value_type = 12, RULE_reference_type = 13, 
		RULE_class_type = 14, RULE_interface_type = 15, RULE_delegate_type = 16, 
		RULE_type_argument_list = 17, RULE_type_arguments = 18, RULE_type_argument = 19, 
		RULE_type_void = 20, RULE_variable_reference = 21, RULE_argument_list = 22, 
		RULE_argument = 23, RULE_argument_name = 24, RULE_argument_value = 25, 
		RULE_primary_expression = 26, RULE_primary_expression_part = 27, RULE_primary_expression_start = 28, 
		RULE_bracket_expression = 29, RULE_simple_name = 30, RULE_parenthesized_expression = 31, 
		RULE_member_access = 32, RULE_predefined_type = 33, RULE_expression_list = 34, 
		RULE_this_access = 35, RULE_base_access = 36, RULE_object_creation_expression = 37, 
		RULE_object_or_collection_initializer = 38, RULE_object_initializer = 39, 
		RULE_member_initializer_list = 40, RULE_member_initializer = 41, RULE_initializer_value = 42, 
		RULE_collection_initializer = 43, RULE_element_initializer_list = 44, 
		RULE_element_initializer = 45, RULE_array_creation_expression = 46, RULE_delegate_creation_expression = 47, 
		RULE_anonymous_object_creation_expression = 48, RULE_anonymous_object_initializer = 49, 
		RULE_member_declarator_list = 50, RULE_member_declarator = 51, RULE_typeof_expression = 52, 
		RULE_unbound_type_name = 53, RULE_generic_dimension_specifier = 54, RULE_commas = 55, 
		RULE_checked_expression = 56, RULE_unchecked_expression = 57, RULE_default_value_expression = 58, 
		RULE_unary_expression = 59, RULE_scan_for_cast_generic_precedence = 60, 
		RULE_cast_disambiguation_token = 61, RULE_pre_increment_expression = 62, 
		RULE_pre_decrement_expression = 63, RULE_cast_expression = 64, RULE_multiplicative_expression = 65, 
		RULE_additive_expression = 66, RULE_shift_expression = 67, RULE_relational_expression = 68, 
		RULE_scan_for_shift_generic_precedence = 69, RULE_shift_disambiguation_token = 70, 
		RULE_isType = 71, RULE_is_disambiguation_token = 72, RULE_equality_expression = 73, 
		RULE_and_expression = 74, RULE_exclusive_or_expression = 75, RULE_inclusive_or_expression = 76, 
		RULE_conditional_and_expression = 77, RULE_conditional_or_expression = 78, 
		RULE_null_coalescing_expression = 79, RULE_lambda_expression = 80, RULE_anonymous_method_expression = 81, 
		RULE_anonymous_function_signature = 82, RULE_explicit_anonymous_function_signature = 83, 
		RULE_explicit_anonymous_function_parameter_list = 84, RULE_explicit_anonymous_function_parameter = 85, 
		RULE_anonymous_function_parameter_modifier = 86, RULE_implicit_anonymous_function_signature = 87, 
		RULE_implicit_anonymous_function_parameter_list = 88, RULE_implicit_anonymous_function_parameter = 89, 
		RULE_anonymous_function_body = 90, RULE_query_expression = 91, RULE_from_clause = 92, 
		RULE_query_body = 93, RULE_query_body_clauses = 94, RULE_query_body_clause = 95, 
		RULE_let_clause = 96, RULE_where_clause = 97, RULE_join_clause = 98, RULE_join_into_clause = 99, 
		RULE_combined_join_clause = 100, RULE_orderby_clause = 101, RULE_orderings = 102, 
		RULE_ordering = 103, RULE_ordering_direction = 104, RULE_select_or_group_clause = 105, 
		RULE_select_clause = 106, RULE_group_clause = 107, RULE_query_continuation = 108, 
		RULE_assignment = 109, RULE_expression = 110, RULE_non_assignment_expression = 111, 
		RULE_constant_expression = 112, RULE_statement = 113, RULE_embedded_statement = 114, 
		RULE_simple_embedded_statement = 115, RULE_block = 116, RULE_statement_list = 117, 
		RULE_empty_statement = 118, RULE_labeled_statement = 119, RULE_declaration_statement = 120, 
		RULE_local_variable_declaration = 121, RULE_local_variable_type = 122, 
		RULE_local_variable_declarators = 123, RULE_local_variable_declarator = 124, 
		RULE_local_variable_initializer = 125, RULE_local_constant_declaration = 126, 
		RULE_expression_statement = 127, RULE_statement_expression = 128, RULE_selection_statement = 129, 
		RULE_if_body = 130, RULE_if_statement = 131, RULE_switch_statement = 132, 
		RULE_switch_block = 133, RULE_switch_sections = 134, RULE_switch_section = 135, 
		RULE_switch_labels = 136, RULE_switch_label = 137, RULE_iteration_statement = 138, 
		RULE_while_statement = 139, RULE_do_statement = 140, RULE_for_statement = 141, 
		RULE_for_initializer = 142, RULE_for_condition = 143, RULE_for_iterator = 144, 
		RULE_statement_expression_list = 145, RULE_foreach_statement = 146, RULE_jump_statement = 147, 
		RULE_break_statement = 148, RULE_continue_statement = 149, RULE_goto_statement = 150, 
		RULE_return_statement = 151, RULE_throw_statement = 152, RULE_try_statement = 153, 
		RULE_catch_clauses = 154, RULE_specific_catch_clauses = 155, RULE_specific_catch_clause = 156, 
		RULE_general_catch_clause = 157, RULE_finally_clause = 158, RULE_checked_statement = 159, 
		RULE_unchecked_statement = 160, RULE_lock_statement = 161, RULE_using_statement = 162, 
		RULE_resource_acquisition = 163, RULE_yield_statement = 164, RULE_compilation_unit = 165, 
		RULE_namespace_declaration = 166, RULE_qualified_identifier = 167, RULE_namespace_body = 168, 
		RULE_extern_alias_directives = 169, RULE_extern_alias_directive = 170, 
		RULE_using_directives = 171, RULE_using_directive = 172, RULE_using_alias_directive = 173, 
		RULE_using_namespace_directive = 174, RULE_namespace_member_declarations = 175, 
		RULE_namespace_member_declaration = 176, RULE_type_declaration = 177, 
		RULE_qualified_alias_member = 178, RULE_class_declaration = 179, RULE_class_modifiers = 180, 
		RULE_class_modifier = 181, RULE_type_parameter_list = 182, RULE_type_parameters = 183, 
		RULE_type_parameter = 184, RULE_class_base = 185, RULE_interface_type_list = 186, 
		RULE_type_parameter_constraints_clauses = 187, RULE_type_parameter_constraints_clause = 188, 
		RULE_type_parameter_constraints = 189, RULE_primary_constraint = 190, 
		RULE_secondary_constraints = 191, RULE_constructor_constraint = 192, RULE_class_body = 193, 
		RULE_class_member_declarations = 194, RULE_class_member_declaration = 195, 
		RULE_all_member_modifiers = 196, RULE_all_member_modifier = 197, RULE_common_member_declaration = 198, 
		RULE_typed_member_declaration = 199, RULE_constant_declarators = 200, 
		RULE_constant_declarator = 201, RULE_variable_declarators = 202, RULE_variable_declarator = 203, 
		RULE_variable_initializer = 204, RULE_method_declaration = 205, RULE_method_header = 206, 
		RULE_method_modifiers = 207, RULE_method_modifier = 208, RULE_return_type = 209, 
		RULE_member_name = 210, RULE_method_body = 211, RULE_formal_parameter_list = 212, 
		RULE_fixed_parameters = 213, RULE_fixed_parameter = 214, RULE_default_argument = 215, 
		RULE_parameter_modifier = 216, RULE_parameter_array = 217, RULE_property_declaration = 218, 
		RULE_property_modifiers = 219, RULE_property_modifier = 220, RULE_accessor_declarations = 221, 
		RULE_get_accessor_declaration = 222, RULE_set_accessor_declaration = 223, 
		RULE_accessor_modifier = 224, RULE_accessor_body = 225, RULE_event_declaration = 226, 
		RULE_event_modifiers = 227, RULE_event_modifier = 228, RULE_event_accessor_declarations = 229, 
		RULE_add_accessor_declaration = 230, RULE_remove_accessor_declaration = 231, 
		RULE_indexer_declaration = 232, RULE_indexer_modifiers = 233, RULE_indexer_modifier = 234, 
		RULE_indexer_declarator = 235, RULE_operator_declaration = 236, RULE_operator_modifiers = 237, 
		RULE_operator_modifier = 238, RULE_operator_declarator = 239, RULE_unary_operator_declarator = 240, 
		RULE_overloadable_unary_operator = 241, RULE_binary_operator_declarator = 242, 
		RULE_overloadable_binary_operator = 243, RULE_overloadable_operator = 244, 
		RULE_conversion_operator_declarator = 245, RULE_operator_body = 246, RULE_constructor_declaration = 247, 
		RULE_constructor_modifiers = 248, RULE_constructor_modifier = 249, RULE_constructor_declarator = 250, 
		RULE_constructor_initializer = 251, RULE_constructor_body = 252, RULE_static_constructor_declaration = 253, 
		RULE_static_constructor_modifiers = 254, RULE_static_constructor_body = 255, 
		RULE_destructor_declaration = 256, RULE_destructor_body = 257, RULE_body = 258, 
		RULE_struct_declaration = 259, RULE_struct_modifiers = 260, RULE_struct_modifier = 261, 
		RULE_struct_interfaces = 262, RULE_struct_body = 263, RULE_struct_member_declarations = 264, 
		RULE_struct_member_declaration = 265, RULE_array_type = 266, RULE_non_array_type = 267, 
		RULE_rank_specifiers = 268, RULE_rank_specifier = 269, RULE_dim_separators = 270, 
		RULE_array_initializer = 271, RULE_variable_initializer_list = 272, RULE_interface_declaration = 273, 
		RULE_interface_modifiers = 274, RULE_interface_modifier = 275, RULE_variant_type_parameter_list = 276, 
		RULE_variant_type_parameters = 277, RULE_variance_annotation = 278, RULE_interface_base = 279, 
		RULE_interface_body = 280, RULE_interface_member_declarations = 281, RULE_interface_member_declaration = 282, 
		RULE_interface_method_declaration = 283, RULE_interface_property_declaration = 284, 
		RULE_interface_accessors = 285, RULE_interface_event_declaration = 286, 
		RULE_interface_indexer_declaration = 287, RULE_enum_declaration = 288, 
		RULE_enum_base = 289, RULE_enum_body = 290, RULE_enum_modifiers = 291, 
		RULE_enum_modifier = 292, RULE_enum_member_declarations = 293, RULE_enum_member_declaration = 294, 
		RULE_delegate_declaration = 295, RULE_delegate_modifiers = 296, RULE_delegate_modifier = 297, 
		RULE_global_attributes = 298, RULE_global_attribute_sections = 299, RULE_global_attribute_section = 300, 
		RULE_global_attribute_target_specifier = 301, RULE_global_attribute_target = 302, 
		RULE_attributes = 303, RULE_attribute_sections = 304, RULE_attribute_section = 305, 
		RULE_attribute_target_specifier = 306, RULE_attribute_target = 307, RULE_attribute_list = 308, 
		RULE_attribute = 309, RULE_attribute_name = 310, RULE_attribute_arguments = 311, 
		RULE_positional_argument_list = 312, RULE_positional_argument = 313, RULE_named_argument_list = 314, 
		RULE_named_argument = 315, RULE_attribute_argument_expression = 316, RULE_class_modifier_unsafe = 317, 
		RULE_struct_modifier_unsafe = 318, RULE_interface_modifier_unsafe = 319, 
		RULE_delegate_modifier_unsafe = 320, RULE_field_modifier_unsafe = 321, 
		RULE_method_modifier_unsafe = 322, RULE_property_modifier_unsafe = 323, 
		RULE_event_modifier_unsafe = 324, RULE_indexer_modifier_unsafe = 325, 
		RULE_operator_modifier_unsafe = 326, RULE_constructor_modifier_unsafe = 327, 
		RULE_destructor_declaration_unsafe = 328, RULE_static_constructor_modifiers_unsafe = 329, 
		RULE_embedded_statement_unsafe = 330, RULE_unsafe_statement = 331, RULE_type_unsafe = 332, 
		RULE_pointer_type = 333, RULE_unmanaged_type = 334, RULE_primary_no_array_creation_expression_unsafe = 335, 
		RULE_unary_expression_unsafe = 336, RULE_pointer_indirection_expression = 337, 
		RULE_addressof_expression = 338, RULE_sizeof_expression = 339, RULE_fixed_statement = 340, 
		RULE_fixed_pointer_declarators = 341, RULE_fixed_pointer_declarator = 342, 
		RULE_fixed_pointer_initializer = 343, RULE_struct_member_declaration_unsafe = 344, 
		RULE_fixed_size_buffer_declaration = 345, RULE_fixed_size_buffer_modifiers = 346, 
		RULE_fixed_size_buffer_modifier = 347, RULE_buffer_element_type = 348, 
		RULE_fixed_size_buffer_declarators = 349, RULE_fixed_size_buffer_declarator = 350, 
		RULE_local_variable_initializer_unsafe = 351, RULE_stackalloc_initializer = 352, 
		RULE_from_contextual_keyword = 353, RULE_let_contextual_keyword = 354, 
		RULE_where_contextual_keyword = 355, RULE_join_contextual_keyword = 356, 
		RULE_on_contextual_keyword = 357, RULE_equals_contextual_keyword = 358, 
		RULE_into_contextual_keyword = 359, RULE_orderby_contextual_keyword = 360, 
		RULE_ascending_contextual_keyword = 361, RULE_descending_contextual_keyword = 362, 
		RULE_select_contextual_keyword = 363, RULE_group_contextual_keyword = 364, 
		RULE_by_contextual_keyword = 365, RULE_partial_contextual_keyword = 366, 
		RULE_alias_contextual_keyword = 367, RULE_yield_contextual_keyword = 368, 
		RULE_get_contextual_keyword = 369, RULE_set_contextual_keyword = 370, 
		RULE_add_contextual_keyword = 371, RULE_remove_contextual_keyword = 372, 
		RULE_dynamic_contextual_keyword = 373, RULE_arglist = 374, RULE_right_arrow = 375, 
		RULE_right_shift = 376, RULE_right_shift_assignment = 377, RULE_literal = 378, 
		RULE_boolean_literal = 379, RULE_keyword = 380, RULE_class_definition = 381, 
		RULE_struct_definition = 382, RULE_interface_definition = 383, RULE_enum_definition = 384, 
		RULE_delegate_definition = 385, RULE_event_declaration2 = 386, RULE_field_declaration2 = 387, 
		RULE_property_declaration2 = 388, RULE_constant_declaration2 = 389, RULE_indexer_declaration2 = 390, 
		RULE_destructor_definition = 391, RULE_constructor_declaration2 = 392, 
		RULE_method_declaration2 = 393, RULE_method_member_name = 394, RULE_method_member_name2 = 395, 
		RULE_operator_declaration2 = 396, RULE_interface_method_declaration2 = 397, 
		RULE_interface_property_declaration2 = 398, RULE_interface_event_declaration2 = 399, 
		RULE_interface_indexer_declaration2 = 400, RULE_member_access2 = 401, 
		RULE_scope_member_access = 402, RULE_method_invocation2 = 403, RULE_object_creation_expression2 = 404;
	public static readonly string[] ruleNames = {
		"namespace_name", "type_name", "identifier", "namespace_or_type_name", 
		"type_argument_list_opt", "type", "base_type", "simple_type", "numeric_type", 
		"integral_type", "floating_point_type", "nullable_type", "non_nullable_value_type", 
		"reference_type", "class_type", "interface_type", "delegate_type", "type_argument_list", 
		"type_arguments", "type_argument", "type_void", "variable_reference", 
		"argument_list", "argument", "argument_name", "argument_value", "primary_expression", 
		"primary_expression_part", "primary_expression_start", "bracket_expression", 
		"simple_name", "parenthesized_expression", "member_access", "predefined_type", 
		"expression_list", "this_access", "base_access", "object_creation_expression", 
		"object_or_collection_initializer", "object_initializer", "member_initializer_list", 
		"member_initializer", "initializer_value", "collection_initializer", "element_initializer_list", 
		"element_initializer", "array_creation_expression", "delegate_creation_expression", 
		"anonymous_object_creation_expression", "anonymous_object_initializer", 
		"member_declarator_list", "member_declarator", "typeof_expression", "unbound_type_name", 
		"generic_dimension_specifier", "commas", "checked_expression", "unchecked_expression", 
		"default_value_expression", "unary_expression", "scan_for_cast_generic_precedence", 
		"cast_disambiguation_token", "pre_increment_expression", "pre_decrement_expression", 
		"cast_expression", "multiplicative_expression", "additive_expression", 
		"shift_expression", "relational_expression", "scan_for_shift_generic_precedence", 
		"shift_disambiguation_token", "isType", "is_disambiguation_token", "equality_expression", 
		"and_expression", "exclusive_or_expression", "inclusive_or_expression", 
		"conditional_and_expression", "conditional_or_expression", "null_coalescing_expression", 
		"lambda_expression", "anonymous_method_expression", "anonymous_function_signature", 
		"explicit_anonymous_function_signature", "explicit_anonymous_function_parameter_list", 
		"explicit_anonymous_function_parameter", "anonymous_function_parameter_modifier", 
		"implicit_anonymous_function_signature", "implicit_anonymous_function_parameter_list", 
		"implicit_anonymous_function_parameter", "anonymous_function_body", "query_expression", 
		"from_clause", "query_body", "query_body_clauses", "query_body_clause", 
		"let_clause", "where_clause", "join_clause", "join_into_clause", "combined_join_clause", 
		"orderby_clause", "orderings", "ordering", "ordering_direction", "select_or_group_clause", 
		"select_clause", "group_clause", "query_continuation", "assignment", "expression", 
		"non_assignment_expression", "constant_expression", "statement", "embedded_statement", 
		"simple_embedded_statement", "block", "statement_list", "empty_statement", 
		"labeled_statement", "declaration_statement", "local_variable_declaration", 
		"local_variable_type", "local_variable_declarators", "local_variable_declarator", 
		"local_variable_initializer", "local_constant_declaration", "expression_statement", 
		"statement_expression", "selection_statement", "if_body", "if_statement", 
		"switch_statement", "switch_block", "switch_sections", "switch_section", 
		"switch_labels", "switch_label", "iteration_statement", "while_statement", 
		"do_statement", "for_statement", "for_initializer", "for_condition", "for_iterator", 
		"statement_expression_list", "foreach_statement", "jump_statement", "break_statement", 
		"continue_statement", "goto_statement", "return_statement", "throw_statement", 
		"try_statement", "catch_clauses", "specific_catch_clauses", "specific_catch_clause", 
		"general_catch_clause", "finally_clause", "checked_statement", "unchecked_statement", 
		"lock_statement", "using_statement", "resource_acquisition", "yield_statement", 
		"compilation_unit", "namespace_declaration", "qualified_identifier", "namespace_body", 
		"extern_alias_directives", "extern_alias_directive", "using_directives", 
		"using_directive", "using_alias_directive", "using_namespace_directive", 
		"namespace_member_declarations", "namespace_member_declaration", "type_declaration", 
		"qualified_alias_member", "class_declaration", "class_modifiers", "class_modifier", 
		"type_parameter_list", "type_parameters", "type_parameter", "class_base", 
		"interface_type_list", "type_parameter_constraints_clauses", "type_parameter_constraints_clause", 
		"type_parameter_constraints", "primary_constraint", "secondary_constraints", 
		"constructor_constraint", "class_body", "class_member_declarations", "class_member_declaration", 
		"all_member_modifiers", "all_member_modifier", "common_member_declaration", 
		"typed_member_declaration", "constant_declarators", "constant_declarator", 
		"variable_declarators", "variable_declarator", "variable_initializer", 
		"method_declaration", "method_header", "method_modifiers", "method_modifier", 
		"return_type", "member_name", "method_body", "formal_parameter_list", 
		"fixed_parameters", "fixed_parameter", "default_argument", "parameter_modifier", 
		"parameter_array", "property_declaration", "property_modifiers", "property_modifier", 
		"accessor_declarations", "get_accessor_declaration", "set_accessor_declaration", 
		"accessor_modifier", "accessor_body", "event_declaration", "event_modifiers", 
		"event_modifier", "event_accessor_declarations", "add_accessor_declaration", 
		"remove_accessor_declaration", "indexer_declaration", "indexer_modifiers", 
		"indexer_modifier", "indexer_declarator", "operator_declaration", "operator_modifiers", 
		"operator_modifier", "operator_declarator", "unary_operator_declarator", 
		"overloadable_unary_operator", "binary_operator_declarator", "overloadable_binary_operator", 
		"overloadable_operator", "conversion_operator_declarator", "operator_body", 
		"constructor_declaration", "constructor_modifiers", "constructor_modifier", 
		"constructor_declarator", "constructor_initializer", "constructor_body", 
		"static_constructor_declaration", "static_constructor_modifiers", "static_constructor_body", 
		"destructor_declaration", "destructor_body", "body", "struct_declaration", 
		"struct_modifiers", "struct_modifier", "struct_interfaces", "struct_body", 
		"struct_member_declarations", "struct_member_declaration", "array_type", 
		"non_array_type", "rank_specifiers", "rank_specifier", "dim_separators", 
		"array_initializer", "variable_initializer_list", "interface_declaration", 
		"interface_modifiers", "interface_modifier", "variant_type_parameter_list", 
		"variant_type_parameters", "variance_annotation", "interface_base", "interface_body", 
		"interface_member_declarations", "interface_member_declaration", "interface_method_declaration", 
		"interface_property_declaration", "interface_accessors", "interface_event_declaration", 
		"interface_indexer_declaration", "enum_declaration", "enum_base", "enum_body", 
		"enum_modifiers", "enum_modifier", "enum_member_declarations", "enum_member_declaration", 
		"delegate_declaration", "delegate_modifiers", "delegate_modifier", "global_attributes", 
		"global_attribute_sections", "global_attribute_section", "global_attribute_target_specifier", 
		"global_attribute_target", "attributes", "attribute_sections", "attribute_section", 
		"attribute_target_specifier", "attribute_target", "attribute_list", "attribute", 
		"attribute_name", "attribute_arguments", "positional_argument_list", "positional_argument", 
		"named_argument_list", "named_argument", "attribute_argument_expression", 
		"class_modifier_unsafe", "struct_modifier_unsafe", "interface_modifier_unsafe", 
		"delegate_modifier_unsafe", "field_modifier_unsafe", "method_modifier_unsafe", 
		"property_modifier_unsafe", "event_modifier_unsafe", "indexer_modifier_unsafe", 
		"operator_modifier_unsafe", "constructor_modifier_unsafe", "destructor_declaration_unsafe", 
		"static_constructor_modifiers_unsafe", "embedded_statement_unsafe", "unsafe_statement", 
		"type_unsafe", "pointer_type", "unmanaged_type", "primary_no_array_creation_expression_unsafe", 
		"unary_expression_unsafe", "pointer_indirection_expression", "addressof_expression", 
		"sizeof_expression", "fixed_statement", "fixed_pointer_declarators", "fixed_pointer_declarator", 
		"fixed_pointer_initializer", "struct_member_declaration_unsafe", "fixed_size_buffer_declaration", 
		"fixed_size_buffer_modifiers", "fixed_size_buffer_modifier", "buffer_element_type", 
		"fixed_size_buffer_declarators", "fixed_size_buffer_declarator", "local_variable_initializer_unsafe", 
		"stackalloc_initializer", "from_contextual_keyword", "let_contextual_keyword", 
		"where_contextual_keyword", "join_contextual_keyword", "on_contextual_keyword", 
		"equals_contextual_keyword", "into_contextual_keyword", "orderby_contextual_keyword", 
		"ascending_contextual_keyword", "descending_contextual_keyword", "select_contextual_keyword", 
		"group_contextual_keyword", "by_contextual_keyword", "partial_contextual_keyword", 
		"alias_contextual_keyword", "yield_contextual_keyword", "get_contextual_keyword", 
		"set_contextual_keyword", "add_contextual_keyword", "remove_contextual_keyword", 
		"dynamic_contextual_keyword", "arglist", "right_arrow", "right_shift", 
		"right_shift_assignment", "literal", "boolean_literal", "keyword", "class_definition", 
		"struct_definition", "interface_definition", "enum_definition", "delegate_definition", 
		"event_declaration2", "field_declaration2", "property_declaration2", "constant_declaration2", 
		"indexer_declaration2", "destructor_definition", "constructor_declaration2", 
		"method_declaration2", "method_member_name", "method_member_name2", "operator_declaration2", 
		"interface_method_declaration2", "interface_property_declaration2", "interface_event_declaration2", 
		"interface_indexer_declaration2", "member_access2", "scope_member_access", 
		"method_invocation2", "object_creation_expression2"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'\\u00EF\\u00BB\\u00BF'", null, null, null, null, null, null, 
		"'abstract'", "'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", 
		"'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
		"'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", 
		"'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", 
		"'else'", "'enum'", "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
		"'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", 
		"'goto'", "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
		"'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", 
		"'namespace'", "'new'", "'null'", "'object'", "'on'", "'operator'", "'orderby'", 
		"'out'", "'override'", "'params'", "'partial'", "'private'", "'protected'", 
		"'public'", "'readonly'", "'ref'", "'remove'", "'return'", "'sbyte'", 
		"'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", 
		"'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'true'", 
		"'try'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unsafe'", "'ushort'", 
		"'using'", "'virtual'", "'void'", "'volatile'", "'where'", "'while'", 
		"'yield'", null, null, null, null, null, null, "'{'", "'}'", "'['", "']'", 
		"'('", "')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", 
		"'::'", "'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", 
		"'<='", "'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", 
		"'^='", "'<<'", "'<<='", "'>>'", "'>>='", "'''", "'\"'", "'\\'", "'\\\\'", 
		"'#'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Pp_directive", "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"NEW_LINE", "SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACE", 
		"ABSTRACT", "ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "BASE", "BOOL", 
		"BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", "CLASS", "CONST", 
		"CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", "DESCENDING", "DO", "DOUBLE", 
		"DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", "FALSE", 
		"FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "FROM", "GET", "GOTO", 
		"GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", "INTO", 
		"IS", "JOIN", "LET", "LOCK", "LONG", "NAMESPACE", "NEW", "NULL", "OBJECT", 
		"ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", "PARAMS", "PARTIAL", "PRIVATE", 
		"PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", "RETURN", "SBYTE", 
		"SEALED", "SELECT", "SET", "SHORT", "SIZEOF", "STACKALLOC", "STATIC", 
		"STRING", "STRUCT", "SWITCH", "THIS", "THROW", "TRUE", "TRY", "TYPEOF", 
		"UINT", "ULONG", "UNCHECKED", "UNSAFE", "USHORT", "USING", "VIRTUAL", 
		"VOID", "VOLATILE", "WHERE", "WHILE", "YIELD", "IDENTIFIER", "INTEGER_LITERAL", 
		"LiteralAccess", "REAL_LITERAL", "CHARACTER_LITERAL", "STRING_LITERAL", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
		"CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
		"ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", 
		"OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
		"OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_RIGHT_SHIFT", "OP_RIGHT_SHIFT_ASSIGNMENT", 
		"QUOTE", "DOUBLE_QUOTE", "BACK_SLASH", "DOUBLE_BACK_SLASH", "SHARP", "COLONswitch"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharp4.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSharp4Parser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class Namespace_nameContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Namespace_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_nameContext namespace_name() {
		Namespace_nameContext _localctx = new Namespace_nameContext(Context, State);
		EnterRule(_localctx, 0, RULE_namespace_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 810; namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_nameContext : ParserRuleContext {
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_nameContext type_name() {
		Type_nameContext _localctx = new Type_nameContext(Context, State);
		EnterRule(_localctx, 2, RULE_type_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 812; namespace_or_type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharp4Parser.IDENTIFIER, 0); }
		public ITerminalNode FROM() { return GetToken(CSharp4Parser.FROM, 0); }
		public ITerminalNode LET() { return GetToken(CSharp4Parser.LET, 0); }
		public ITerminalNode WHERE() { return GetToken(CSharp4Parser.WHERE, 0); }
		public ITerminalNode JOIN() { return GetToken(CSharp4Parser.JOIN, 0); }
		public ITerminalNode ON() { return GetToken(CSharp4Parser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CSharp4Parser.EQUALS, 0); }
		public ITerminalNode INTO() { return GetToken(CSharp4Parser.INTO, 0); }
		public ITerminalNode ORDERBY() { return GetToken(CSharp4Parser.ORDERBY, 0); }
		public ITerminalNode ASCENDING() { return GetToken(CSharp4Parser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(CSharp4Parser.DESCENDING, 0); }
		public ITerminalNode SELECT() { return GetToken(CSharp4Parser.SELECT, 0); }
		public ITerminalNode GROUP() { return GetToken(CSharp4Parser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(CSharp4Parser.BY, 0); }
		public ITerminalNode PARTIAL() { return GetToken(CSharp4Parser.PARTIAL, 0); }
		public ITerminalNode ALIAS() { return GetToken(CSharp4Parser.ALIAS, 0); }
		public ITerminalNode YIELD() { return GetToken(CSharp4Parser.YIELD, 0); }
		public ITerminalNode GET() { return GetToken(CSharp4Parser.GET, 0); }
		public ITerminalNode SET() { return GetToken(CSharp4Parser.SET, 0); }
		public ITerminalNode ADD() { return GetToken(CSharp4Parser.ADD, 0); }
		public ITerminalNode REMOVE() { return GetToken(CSharp4Parser.REMOVE, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(CSharp4Parser.DYNAMIC, 0); }
		public ITerminalNode ARGLIST() { return GetToken(CSharp4Parser.ARGLIST, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 814;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_or_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public Type_argument_list_optContext[] type_argument_list_opt() {
			return GetRuleContexts<Type_argument_list_optContext>();
		}
		public Type_argument_list_optContext type_argument_list_opt(int i) {
			return GetRuleContext<Type_argument_list_optContext>(i);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(CSharp4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharp4Parser.DOT, i);
		}
		public Namespace_or_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_or_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_or_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_or_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_or_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_or_type_nameContext namespace_or_type_name() {
		Namespace_or_type_nameContext _localctx = new Namespace_or_type_nameContext(Context, State);
		EnterRule(_localctx, 6, RULE_namespace_or_type_name);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 820;
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 816; identifier();
				State = 817; type_argument_list_opt();
				}
				break;
			case 2:
				{
				State = 819; qualified_alias_member();
				}
				break;
			}
			State = 828;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 822; Match(DOT);
					State = 823; identifier();
					State = 824; type_argument_list_opt();
					}
					} 
				}
				State = 830;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_list_optContext : ParserRuleContext {
		public Type_argument_listContext type_argument_list() {
			return GetRuleContext<Type_argument_listContext>(0);
		}
		public Type_argument_list_optContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list_opt; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_argument_list_opt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_argument_list_opt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list_opt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_list_optContext type_argument_list_opt() {
		Type_argument_list_optContext _localctx = new Type_argument_list_optContext(Context, State);
		EnterRule(_localctx, 8, RULE_type_argument_list_opt);
		try {
			State = 833;
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 831; type_argument_list();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 835; base_type();
			State = 841;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 839;
					switch (TokenStream.La(1)) {
					case INTERR:
						{
						State = 836; Match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						State = 837; rank_specifier();
						}
						break;
					case STAR:
						{
						State = 838; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 843;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public Base_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBase_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBase_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_typeContext base_type() {
		Base_typeContext _localctx = new Base_typeContext(Context, State);
		EnterRule(_localctx, 12, RULE_base_type);
		try {
			State = 848;
			switch (TokenStream.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 844; simple_type();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 845; class_type();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 846; Match(VOID);
				State = 847; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_typeContext : ParserRuleContext {
		public Numeric_typeContext numeric_type() {
			return GetRuleContext<Numeric_typeContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(CSharp4Parser.BOOL, 0); }
		public Simple_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSimple_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSimple_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_typeContext simple_type() {
		Simple_typeContext _localctx = new Simple_typeContext(Context, State);
		EnterRule(_localctx, 14, RULE_simple_type);
		try {
			State = 852;
			switch (TokenStream.La(1)) {
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 850; numeric_type();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 851; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_typeContext : ParserRuleContext {
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Floating_point_typeContext floating_point_type() {
			return GetRuleContext<Floating_point_typeContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(CSharp4Parser.DECIMAL, 0); }
		public Numeric_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNumeric_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNumeric_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeric_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_typeContext numeric_type() {
		Numeric_typeContext _localctx = new Numeric_typeContext(Context, State);
		EnterRule(_localctx, 16, RULE_numeric_type);
		try {
			State = 857;
			switch (TokenStream.La(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 854; integral_type();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 855; floating_point_type();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 856; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integral_typeContext : ParserRuleContext {
		public ITerminalNode SBYTE() { return GetToken(CSharp4Parser.SBYTE, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharp4Parser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharp4Parser.SHORT, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharp4Parser.USHORT, 0); }
		public ITerminalNode INT() { return GetToken(CSharp4Parser.INT, 0); }
		public ITerminalNode UINT() { return GetToken(CSharp4Parser.UINT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharp4Parser.LONG, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharp4Parser.ULONG, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharp4Parser.CHAR, 0); }
		public Integral_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integral_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIntegral_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIntegral_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegral_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Integral_typeContext integral_type() {
		Integral_typeContext _localctx = new Integral_typeContext(Context, State);
		EnterRule(_localctx, 18, RULE_integral_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 859;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & ((1L << (SBYTE - 80)) | (1L << (SHORT - 80)) | (1L << (UINT - 80)) | (1L << (ULONG - 80)) | (1L << (USHORT - 80)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Floating_point_typeContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(CSharp4Parser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharp4Parser.DOUBLE, 0); }
		public Floating_point_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floating_point_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFloating_point_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFloating_point_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloating_point_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Floating_point_typeContext floating_point_type() {
		Floating_point_typeContext _localctx = new Floating_point_typeContext(Context, State);
		EnterRule(_localctx, 20, RULE_floating_point_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 861;
			_la = TokenStream.La(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Nullable_typeContext : ParserRuleContext {
		public Non_nullable_value_typeContext non_nullable_value_type() {
			return GetRuleContext<Non_nullable_value_typeContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public Nullable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullable_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNullable_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNullable_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Nullable_typeContext nullable_type() {
		Nullable_typeContext _localctx = new Nullable_typeContext(Context, State);
		EnterRule(_localctx, 22, RULE_nullable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 863; non_nullable_value_type();
			State = 864; Match(INTERR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_nullable_value_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public Non_nullable_value_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_nullable_value_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNon_nullable_value_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNon_nullable_value_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_nullable_value_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_nullable_value_typeContext non_nullable_value_type() {
		Non_nullable_value_typeContext _localctx = new Non_nullable_value_typeContext(Context, State);
		EnterRule(_localctx, 24, RULE_non_nullable_value_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 866; base_type();
			State = 871;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OPEN_BRACKET || _la==STAR) {
				{
				State = 869;
				switch (TokenStream.La(1)) {
				case OPEN_BRACKET:
					{
					State = 867; rank_specifier();
					}
					break;
				case STAR:
					{
					State = 868; Match(STAR);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 873;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reference_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Reference_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reference_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterReference_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitReference_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReference_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reference_typeContext reference_type() {
		Reference_typeContext _localctx = new Reference_typeContext(Context, State);
		EnterRule(_localctx, 26, RULE_reference_type);
		int _la;
		try {
			int _alt;
			State = 929;
			switch (TokenStream.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 874; simple_type();
				State = 884;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 878;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==STAR || _la==INTERR) {
							{
							{
							State = 875;
							_la = TokenStream.La(1);
							if ( !(_la==STAR || _la==INTERR) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
							    Consume();
							}
							}
							}
							State = 880;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 881; rank_specifier();
						}
						} 
					}
					State = 886;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
				}
				State = 890;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 887;
					_la = TokenStream.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					}
					State = 892;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 893; rank_specifier();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 895; class_type();
				State = 905;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (OPEN_BRACKET - 116)) | (1L << (STAR - 116)) | (1L << (INTERR - 116)))) != 0)) {
					{
					{
					State = 899;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
					while (_la==STAR || _la==INTERR) {
						{
						{
						State = 896;
						_la = TokenStream.La(1);
						if ( !(_la==STAR || _la==INTERR) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						}
						}
						State = 901;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
					}
					State = 902; rank_specifier();
					}
					}
					State = 907;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 908; Match(VOID);
				State = 909; Match(STAR);
				State = 919;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 913;
						ErrorHandler.Sync(this);
						_la = TokenStream.La(1);
						while (_la==STAR || _la==INTERR) {
							{
							{
							State = 910;
							_la = TokenStream.La(1);
							if ( !(_la==STAR || _la==INTERR) ) {
							ErrorHandler.RecoverInline(this);
							}
							else {
							    Consume();
							}
							}
							}
							State = 915;
							ErrorHandler.Sync(this);
							_la = TokenStream.La(1);
						}
						State = 916; rank_specifier();
						}
						} 
					}
					State = 921;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,16,Context);
				}
				State = 925;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 922;
					_la = TokenStream.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					}
					State = 927;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 928; rank_specifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(CSharp4Parser.OBJECT, 0); }
		public Dynamic_contextual_keywordContext dynamic_contextual_keyword() {
			return GetRuleContext<Dynamic_contextual_keywordContext>(0);
		}
		public ITerminalNode STRING() { return GetToken(CSharp4Parser.STRING, 0); }
		public Class_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_typeContext class_type() {
		Class_typeContext _localctx = new Class_typeContext(Context, State);
		EnterRule(_localctx, 28, RULE_class_type);
		try {
			State = 935;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 931; type_name();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 932; Match(OBJECT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 933; dynamic_contextual_keyword();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 934; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Interface_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_typeContext interface_type() {
		Interface_typeContext _localctx = new Interface_typeContext(Context, State);
		EnterRule(_localctx, 30, RULE_interface_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 937; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_typeContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Delegate_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_typeContext delegate_type() {
		Delegate_typeContext _localctx = new Delegate_typeContext(Context, State);
		EnterRule(_localctx, 32, RULE_delegate_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 939; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argument_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public Type_argumentsContext type_arguments() {
			return GetRuleContext<Type_argumentsContext>(0);
		}
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Type_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argument_listContext type_argument_list() {
		Type_argument_listContext _localctx = new Type_argument_listContext(Context, State);
		EnterRule(_localctx, 34, RULE_type_argument_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941; Match(LT);
			State = 942; type_arguments();
			State = 943; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argumentsContext : ParserRuleContext {
		public Type_argumentContext[] type_argument() {
			return GetRuleContexts<Type_argumentContext>();
		}
		public Type_argumentContext type_argument(int i) {
			return GetRuleContext<Type_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Type_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argumentsContext type_arguments() {
		Type_argumentsContext _localctx = new Type_argumentsContext(Context, State);
		EnterRule(_localctx, 36, RULE_type_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 945; type_argument();
			State = 950;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 946; Match(COMMA);
				State = 947; type_argument();
				}
				}
				State = 952;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_argumentContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Type_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_argumentContext type_argument() {
		Type_argumentContext _localctx = new Type_argumentContext(Context, State);
		EnterRule(_localctx, 38, RULE_type_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 953; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_voidContext : ParserRuleContext {
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Type_voidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_void; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_void(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_void(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_void(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_voidContext type_void() {
		Type_voidContext _localctx = new Type_voidContext(Context, State);
		EnterRule(_localctx, 40, RULE_type_void);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 955; Match(VOID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_referenceContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Variable_referenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_reference; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_reference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_reference(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_reference(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_referenceContext variable_reference() {
		Variable_referenceContext _localctx = new Variable_referenceContext(Context, State);
		EnterRule(_localctx, 42, RULE_variable_reference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_listContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArgument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArgument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_listContext argument_list() {
		Argument_listContext _localctx = new Argument_listContext(Context, State);
		EnterRule(_localctx, 44, RULE_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 959; argument();
			State = 964;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 960; Match(COMMA);
				State = 961; argument();
				}
				}
				State = 966;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public Argument_valueContext argument_value() {
			return GetRuleContext<Argument_valueContext>(0);
		}
		public Argument_nameContext argument_name() {
			return GetRuleContext<Argument_nameContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 46, RULE_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 968;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 967; argument_name();
				}
				break;
			}
			State = 970; argument_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Argument_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArgument_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArgument_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_nameContext argument_name() {
		Argument_nameContext _localctx = new Argument_nameContext(Context, State);
		EnterRule(_localctx, 48, RULE_argument_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 972; identifier();
			State = 973; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Argument_valueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public Argument_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArgument_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArgument_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Argument_valueContext argument_value() {
		Argument_valueContext _localctx = new Argument_valueContext(Context, State);
		EnterRule(_localctx, 50, RULE_argument_value);
		try {
			State = 980;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 975; expression(0);
				}
				break;
			case REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 976; Match(REF);
				State = 977; variable_reference();
				}
				break;
			case OUT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 978; Match(OUT);
				State = 979; variable_reference();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		public Primary_expression_startContext primary_expression_start() {
			return GetRuleContext<Primary_expression_startContext>(0);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Primary_expression_partContext[] primary_expression_part() {
			return GetRuleContexts<Primary_expression_partContext>();
		}
		public Primary_expression_partContext primary_expression_part(int i) {
			return GetRuleContext<Primary_expression_partContext>(i);
		}
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_primary_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 982; primary_expression_start();
			State = 986;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 983; bracket_expression();
					}
					} 
				}
				State = 988;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			State = 992;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 989; primary_expression_part();
					}
					} 
				}
				State = 994;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_partContext : ParserRuleContext {
		public Member_access2Context member_access2() {
			return GetRuleContext<Member_access2Context>(0);
		}
		public Method_invocation2Context method_invocation2() {
			return GetRuleContext<Method_invocation2Context>(0);
		}
		public ITerminalNode OP_INC() { return GetToken(CSharp4Parser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(CSharp4Parser.OP_DEC, 0); }
		public ITerminalNode OP_PTR() { return GetToken(CSharp4Parser.OP_PTR, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Bracket_expressionContext[] bracket_expression() {
			return GetRuleContexts<Bracket_expressionContext>();
		}
		public Bracket_expressionContext bracket_expression(int i) {
			return GetRuleContext<Bracket_expressionContext>(i);
		}
		public Primary_expression_partContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_part; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimary_expression_part(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimary_expression_part(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression_part(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_partContext primary_expression_part() {
		Primary_expression_partContext _localctx = new Primary_expression_partContext(Context, State);
		EnterRule(_localctx, 54, RULE_primary_expression_part);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1001;
			switch (TokenStream.La(1)) {
			case DOT:
				{
				State = 995; member_access2();
				}
				break;
			case OPEN_PARENS:
				{
				State = 996; method_invocation2();
				}
				break;
			case OP_INC:
				{
				State = 997; Match(OP_INC);
				}
				break;
			case OP_DEC:
				{
				State = 998; Match(OP_DEC);
				}
				break;
			case OP_PTR:
				{
				State = 999; Match(OP_PTR);
				State = 1000; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1006;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1003; bracket_expression();
					}
					} 
				}
				State = 1008;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,27,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expression_startContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public Simple_nameContext simple_name() {
			return GetRuleContext<Simple_nameContext>(0);
		}
		public Parenthesized_expressionContext parenthesized_expression() {
			return GetRuleContext<Parenthesized_expressionContext>(0);
		}
		public Predefined_typeContext predefined_type() {
			return GetRuleContext<Predefined_typeContext>(0);
		}
		public Qualified_alias_memberContext qualified_alias_member() {
			return GetRuleContext<Qualified_alias_memberContext>(0);
		}
		public This_accessContext this_access() {
			return GetRuleContext<This_accessContext>(0);
		}
		public Base_accessContext base_access() {
			return GetRuleContext<Base_accessContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public Rank_specifierContext rank_specifier() {
			return GetRuleContext<Rank_specifierContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Object_creation_expression2Context object_creation_expression2() {
			return GetRuleContext<Object_creation_expression2Context>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Rank_specifiersContext rank_specifiers() {
			return GetRuleContext<Rank_specifiersContext>(0);
		}
		public Typeof_expressionContext typeof_expression() {
			return GetRuleContext<Typeof_expressionContext>(0);
		}
		public Checked_expressionContext checked_expression() {
			return GetRuleContext<Checked_expressionContext>(0);
		}
		public Unchecked_expressionContext unchecked_expression() {
			return GetRuleContext<Unchecked_expressionContext>(0);
		}
		public Default_value_expressionContext default_value_expression() {
			return GetRuleContext<Default_value_expressionContext>(0);
		}
		public Anonymous_method_expressionContext anonymous_method_expression() {
			return GetRuleContext<Anonymous_method_expressionContext>(0);
		}
		public Sizeof_expressionContext sizeof_expression() {
			return GetRuleContext<Sizeof_expressionContext>(0);
		}
		public Primary_expression_startContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression_start; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimary_expression_start(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimary_expression_start(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression_start(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expression_startContext primary_expression_start() {
		Primary_expression_startContext _localctx = new Primary_expression_startContext(Context, State);
		EnterRule(_localctx, 56, RULE_primary_expression_start);
		try {
			State = 1046;
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1009; literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1010; simple_name();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1011; parenthesized_expression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1012; predefined_type();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1013; qualified_alias_member();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1014; this_access();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1015; base_access();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1016; Match(NEW);
				State = 1038;
				switch (TokenStream.La(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1017; type();
					State = 1032;
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						State = 1018; object_creation_expression2();
						}
						break;
					case 2:
						{
						State = 1019; object_or_collection_initializer();
						}
						break;
					case 3:
						{
						State = 1020; Match(OPEN_BRACKET);
						State = 1021; expression_list();
						State = 1022; Match(CLOSE_BRACKET);
						State = 1024;
						switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
						case 1:
							{
							State = 1023; rank_specifiers();
							}
							break;
						}
						State = 1027;
						switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
						case 1:
							{
							State = 1026; array_initializer();
							}
							break;
						}
						}
						break;
					case 4:
						{
						State = 1029; rank_specifiers();
						State = 1030; array_initializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACE:
					{
					State = 1034; anonymous_object_initializer();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 1035; rank_specifier();
					State = 1036; array_initializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1040; typeof_expression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1041; checked_expression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1042; unchecked_expression();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1043; default_value_expression();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1044; anonymous_method_expression();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1045; sizeof_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Bracket_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Bracket_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracket_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBracket_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBracket_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracket_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bracket_expressionContext bracket_expression() {
		Bracket_expressionContext _localctx = new Bracket_expressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_bracket_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048; Match(OPEN_BRACKET);
			State = 1049; expression_list();
			State = 1050; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_nameContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Simple_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSimple_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSimple_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_nameContext simple_name() {
		Simple_nameContext _localctx = new Simple_nameContext(Context, State);
		EnterRule(_localctx, 60, RULE_simple_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1052; identifier();
			State = 1053; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parenthesized_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Parenthesized_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesized_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterParenthesized_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitParenthesized_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesized_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parenthesized_expressionContext parenthesized_expression() {
		Parenthesized_expressionContext _localctx = new Parenthesized_expressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_parenthesized_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1055; Match(OPEN_PARENS);
			State = 1056; expression(0);
			State = 1057; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_accessContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_accessContext member_access() {
		Member_accessContext _localctx = new Member_accessContext(Context, State);
		EnterRule(_localctx, 64, RULE_member_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059; primary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Predefined_typeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(CSharp4Parser.BOOL, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharp4Parser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharp4Parser.CHAR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharp4Parser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharp4Parser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharp4Parser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(CSharp4Parser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharp4Parser.LONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharp4Parser.OBJECT, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharp4Parser.SBYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharp4Parser.SHORT, 0); }
		public ITerminalNode STRING() { return GetToken(CSharp4Parser.STRING, 0); }
		public ITerminalNode UINT() { return GetToken(CSharp4Parser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharp4Parser.ULONG, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharp4Parser.USHORT, 0); }
		public Predefined_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefined_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPredefined_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPredefined_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefined_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Predefined_typeContext predefined_type() {
		Predefined_typeContext _localctx = new Predefined_typeContext(Context, State);
		EnterRule(_localctx, 66, RULE_predefined_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (SBYTE - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_listContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExpression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExpression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_listContext expression_list() {
		Expression_listContext _localctx = new Expression_listContext(Context, State);
		EnterRule(_localctx, 68, RULE_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1063; expression(0);
			State = 1068;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1064; Match(COMMA);
				State = 1065; expression(0);
				}
				}
				State = 1070;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class This_accessContext : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public This_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_this_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterThis_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitThis_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThis_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public This_accessContext this_access() {
		This_accessContext _localctx = new This_accessContext(Context, State);
		EnterRule(_localctx, 70, RULE_this_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1071; Match(THIS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Base_accessContext : ParserRuleContext {
		public ITerminalNode BASE() { return GetToken(CSharp4Parser.BASE, 0); }
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Base_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_base_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBase_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBase_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBase_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Base_accessContext base_access() {
		Base_accessContext _localctx = new Base_accessContext(Context, State);
		EnterRule(_localctx, 72, RULE_base_access);
		try {
			State = 1083;
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1073; Match(BASE);
				State = 1074; Match(DOT);
				State = 1075; identifier();
				State = 1076; type_argument_list_opt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1078; Match(BASE);
				State = 1079; Match(OPEN_BRACKET);
				State = 1080; expression_list();
				State = 1081; Match(CLOSE_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterObject_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitObject_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expressionContext object_creation_expression() {
		Object_creation_expressionContext _localctx = new Object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_object_creation_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1085; Match(NEW);
			State = 1086; type();
			State = 1096;
			switch (TokenStream.La(1)) {
			case OPEN_PARENS:
				{
				State = 1087; Match(OPEN_PARENS);
				State = 1089;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 1088; argument_list();
					}
				}

				State = 1091; Match(CLOSE_PARENS);
				State = 1093;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACE) {
					{
					State = 1092; object_or_collection_initializer();
					}
				}

				}
				break;
			case OPEN_BRACE:
				{
				State = 1095; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_or_collection_initializerContext : ParserRuleContext {
		public Object_initializerContext object_initializer() {
			return GetRuleContext<Object_initializerContext>(0);
		}
		public Collection_initializerContext collection_initializer() {
			return GetRuleContext<Collection_initializerContext>(0);
		}
		public Object_or_collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_or_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterObject_or_collection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitObject_or_collection_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_or_collection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_or_collection_initializerContext object_or_collection_initializer() {
		Object_or_collection_initializerContext _localctx = new Object_or_collection_initializerContext(Context, State);
		EnterRule(_localctx, 76, RULE_object_or_collection_initializer);
		try {
			State = 1100;
			switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1098; object_initializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1099; collection_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Member_initializer_listContext member_initializer_list() {
			return GetRuleContext<Member_initializer_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterObject_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitObject_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_initializerContext object_initializer() {
		Object_initializerContext _localctx = new Object_initializerContext(Context, State);
		EnterRule(_localctx, 78, RULE_object_initializer);
		int _la;
		try {
			State = 1111;
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1102; Match(OPEN_BRACE);
				State = 1103; Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1104; Match(OPEN_BRACE);
				State = 1105; member_initializer_list();
				State = 1107;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 1106; Match(COMMA);
					}
				}

				State = 1109; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializer_listContext : ParserRuleContext {
		public Member_initializerContext[] member_initializer() {
			return GetRuleContexts<Member_initializerContext>();
		}
		public Member_initializerContext member_initializer(int i) {
			return GetRuleContext<Member_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Member_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_initializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializer_listContext member_initializer_list() {
		Member_initializer_listContext _localctx = new Member_initializer_listContext(Context, State);
		EnterRule(_localctx, 80, RULE_member_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1113; member_initializer();
			State = 1118;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1114; Match(COMMA);
					State = 1115; member_initializer();
					}
					} 
				}
				State = 1120;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_initializerContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Initializer_valueContext initializer_value() {
			return GetRuleContext<Initializer_valueContext>(0);
		}
		public Member_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_initializerContext member_initializer() {
		Member_initializerContext _localctx = new Member_initializerContext(Context, State);
		EnterRule(_localctx, 82, RULE_member_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1121; identifier();
			State = 1122; Match(ASSIGNMENT);
			State = 1123; initializer_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Initializer_valueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Initializer_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInitializer_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInitializer_value(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInitializer_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Initializer_valueContext initializer_value() {
		Initializer_valueContext _localctx = new Initializer_valueContext(Context, State);
		EnterRule(_localctx, 84, RULE_initializer_value);
		try {
			State = 1127;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1125; expression(0);
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1126; object_or_collection_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Collection_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Element_initializer_listContext element_initializer_list() {
			return GetRuleContext<Element_initializer_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Collection_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collection_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCollection_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCollection_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCollection_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Collection_initializerContext collection_initializer() {
		Collection_initializerContext _localctx = new Collection_initializerContext(Context, State);
		EnterRule(_localctx, 86, RULE_collection_initializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1129; Match(OPEN_BRACE);
			State = 1130; element_initializer_list();
			State = 1132;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 1131; Match(COMMA);
				}
			}

			State = 1134; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializer_listContext : ParserRuleContext {
		public Element_initializerContext[] element_initializer() {
			return GetRuleContexts<Element_initializerContext>();
		}
		public Element_initializerContext element_initializer(int i) {
			return GetRuleContext<Element_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Element_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterElement_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitElement_initializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializer_listContext element_initializer_list() {
		Element_initializer_listContext _localctx = new Element_initializer_listContext(Context, State);
		EnterRule(_localctx, 88, RULE_element_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1136; element_initializer();
			State = 1141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1137; Match(COMMA);
					State = 1138; element_initializer();
					}
					} 
				}
				State = 1143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,44,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Element_initializerContext : ParserRuleContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Element_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterElement_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitElement_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Element_initializerContext element_initializer() {
		Element_initializerContext _localctx = new Element_initializerContext(Context, State);
		EnterRule(_localctx, 90, RULE_element_initializer);
		try {
			State = 1149;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1144; non_assignment_expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1145; Match(OPEN_BRACE);
				State = 1146; expression_list();
				State = 1147; Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Non_array_typeContext non_array_type() {
			return GetRuleContext<Non_array_typeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Expression_listContext expression_list() {
			return GetRuleContext<Expression_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Rank_specifierContext rank_specifier() {
			return GetRuleContext<Rank_specifierContext>(0);
		}
		public Rank_specifiersContext rank_specifiers() {
			return GetRuleContext<Rank_specifiersContext>(0);
		}
		public Array_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArray_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArray_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_creation_expressionContext array_creation_expression() {
		Array_creation_expressionContext _localctx = new Array_creation_expressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_array_creation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1151; Match(NEW);
			State = 1168;
			switch ( Interpreter.AdaptivePredict(TokenStream,48,Context) ) {
			case 1:
				{
				State = 1152; array_type();
				State = 1153; array_initializer();
				}
				break;
			case 2:
				{
				State = 1155; non_array_type();
				State = 1156; Match(OPEN_BRACKET);
				State = 1157; expression_list();
				State = 1158; Match(CLOSE_BRACKET);
				State = 1160;
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 1159; rank_specifiers();
					}
					break;
				}
				State = 1163;
				switch ( Interpreter.AdaptivePredict(TokenStream,47,Context) ) {
				case 1:
					{
					State = 1162; array_initializer();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1165; rank_specifier();
				State = 1166; array_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Delegate_typeContext delegate_type() {
			return GetRuleContext<Delegate_typeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Delegate_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_creation_expressionContext delegate_creation_expression() {
		Delegate_creation_expressionContext _localctx = new Delegate_creation_expressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_delegate_creation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1170; Match(NEW);
			State = 1171; delegate_type();
			State = 1172; Match(OPEN_PARENS);
			State = 1173; expression(0);
			State = 1174; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_creation_expressionContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Anonymous_object_initializerContext anonymous_object_initializer() {
			return GetRuleContext<Anonymous_object_initializerContext>(0);
		}
		public Anonymous_object_creation_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_creation_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_object_creation_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_object_creation_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_object_creation_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_creation_expressionContext anonymous_object_creation_expression() {
		Anonymous_object_creation_expressionContext _localctx = new Anonymous_object_creation_expressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_anonymous_object_creation_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1176; Match(NEW);
			State = 1177; anonymous_object_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_object_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Member_declarator_listContext member_declarator_list() {
			return GetRuleContext<Member_declarator_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Anonymous_object_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_object_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_object_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_object_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_object_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_object_initializerContext anonymous_object_initializer() {
		Anonymous_object_initializerContext _localctx = new Anonymous_object_initializerContext(Context, State);
		EnterRule(_localctx, 98, RULE_anonymous_object_initializer);
		int _la;
		try {
			State = 1188;
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1179; Match(OPEN_BRACE);
				State = 1180; Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1181; Match(OPEN_BRACE);
				State = 1182; member_declarator_list();
				State = 1184;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 1183; Match(COMMA);
					}
				}

				State = 1186; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declarator_listContext : ParserRuleContext {
		public Member_declaratorContext[] member_declarator() {
			return GetRuleContexts<Member_declaratorContext>();
		}
		public Member_declaratorContext member_declarator(int i) {
			return GetRuleContext<Member_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Member_declarator_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_declarator_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_declarator_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declarator_listContext member_declarator_list() {
		Member_declarator_listContext _localctx = new Member_declarator_listContext(Context, State);
		EnterRule(_localctx, 100, RULE_member_declarator_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1190; member_declarator();
			State = 1195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1191; Match(COMMA);
					State = 1192; member_declarator();
					}
					} 
				}
				State = 1197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,51,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_declaratorContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Member_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_declaratorContext member_declarator() {
		Member_declaratorContext _localctx = new Member_declaratorContext(Context, State);
		EnterRule(_localctx, 102, RULE_member_declarator);
		try {
			State = 1203;
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1198; primary_expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1199; identifier();
				State = 1200; Match(ASSIGNMENT);
				State = 1201; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typeof_expressionContext : ParserRuleContext {
		public ITerminalNode TYPEOF() { return GetToken(CSharp4Parser.TYPEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Unbound_type_nameContext unbound_type_name() {
			return GetRuleContext<Unbound_type_nameContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Typeof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterTypeof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitTypeof_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typeof_expressionContext typeof_expression() {
		Typeof_expressionContext _localctx = new Typeof_expressionContext(Context, State);
		EnterRule(_localctx, 104, RULE_typeof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1205; Match(TYPEOF);
			State = 1206; Match(OPEN_PARENS);
			State = 1215;
			switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
			case 1:
				{
				State = 1207; unbound_type_name();
				State = 1208; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				{
				State = 1210; type();
				State = 1211; Match(CLOSE_PARENS);
				}
				break;
			case 3:
				{
				State = 1213; Match(VOID);
				State = 1214; Match(CLOSE_PARENS);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unbound_type_nameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(CSharp4Parser.DOUBLE_COLON, 0); }
		public ITerminalNode[] DOT() { return GetTokens(CSharp4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharp4Parser.DOT, i);
		}
		public Generic_dimension_specifierContext[] generic_dimension_specifier() {
			return GetRuleContexts<Generic_dimension_specifierContext>();
		}
		public Generic_dimension_specifierContext generic_dimension_specifier(int i) {
			return GetRuleContext<Generic_dimension_specifierContext>(i);
		}
		public Unbound_type_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unbound_type_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnbound_type_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnbound_type_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnbound_type_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unbound_type_nameContext unbound_type_name() {
		Unbound_type_nameContext _localctx = new Unbound_type_nameContext(Context, State);
		EnterRule(_localctx, 106, RULE_unbound_type_name);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1217; identifier();
			State = 1226;
			switch (TokenStream.La(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				State = 1219;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 1218; generic_dimension_specifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 1221; Match(DOUBLE_COLON);
				State = 1222; identifier();
				State = 1224;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 1223; generic_dimension_specifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1235;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 1228; Match(DOT);
				State = 1229; identifier();
				State = 1231;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 1230; generic_dimension_specifier();
					}
				}

				}
				}
				State = 1237;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Generic_dimension_specifierContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public CommasContext commas() {
			return GetRuleContext<CommasContext>(0);
		}
		public Generic_dimension_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generic_dimension_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGeneric_dimension_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGeneric_dimension_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneric_dimension_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Generic_dimension_specifierContext generic_dimension_specifier() {
		Generic_dimension_specifierContext _localctx = new Generic_dimension_specifierContext(Context, State);
		EnterRule(_localctx, 108, RULE_generic_dimension_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1238; Match(LT);
			State = 1240;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 1239; commas();
				}
			}

			State = 1242; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommasContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public CommasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commas; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCommas(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCommas(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommas(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommasContext commas() {
		CommasContext _localctx = new CommasContext(Context, State);
		EnterRule(_localctx, 110, RULE_commas);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1244; Match(COMMA);
			State = 1248;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1245; Match(COMMA);
				}
				}
				State = 1250;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checked_expressionContext : ParserRuleContext {
		public ITerminalNode CHECKED() { return GetToken(CSharp4Parser.CHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Checked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterChecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitChecked_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecked_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Checked_expressionContext checked_expression() {
		Checked_expressionContext _localctx = new Checked_expressionContext(Context, State);
		EnterRule(_localctx, 112, RULE_checked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1251; Match(CHECKED);
			State = 1252; Match(OPEN_PARENS);
			State = 1253; expression(0);
			State = 1254; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unchecked_expressionContext : ParserRuleContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharp4Parser.UNCHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Unchecked_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unchecked_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnchecked_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnchecked_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnchecked_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unchecked_expressionContext unchecked_expression() {
		Unchecked_expressionContext _localctx = new Unchecked_expressionContext(Context, State);
		EnterRule(_localctx, 114, RULE_unchecked_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256; Match(UNCHECKED);
			State = 1257; Match(OPEN_PARENS);
			State = 1258; expression(0);
			State = 1259; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_value_expressionContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Default_value_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_value_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDefault_value_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDefault_value_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_value_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_value_expressionContext default_value_expression() {
		Default_value_expressionContext _localctx = new Default_value_expressionContext(Context, State);
		EnterRule(_localctx, 116, RULE_default_value_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1261; Match(DEFAULT);
			State = 1262; Match(OPEN_PARENS);
			State = 1263; type();
			State = 1264; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
	 
		public Unary_expressionContext() { }
		public virtual void CopyFrom(Unary_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExpressionContext : Unary_expressionContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public PrimaryExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : Unary_expressionContext {
		public ITerminalNode BANG() { return GetToken(CSharp4Parser.BANG, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public NotExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayCreationExpressionContext : Unary_expressionContext {
		public Array_creation_expressionContext array_creation_expression() {
			return GetRuleContext<Array_creation_expressionContext>(0);
		}
		public ArrayCreationExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArrayCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArrayCreationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecrementExpressionContext : Unary_expressionContext {
		public Pre_decrement_expressionContext pre_decrement_expression() {
			return GetRuleContext<Pre_decrement_expressionContext>(0);
		}
		public PreDecrementExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPreDecrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPreDecrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionUnsafeContext : Unary_expressionContext {
		public Unary_expression_unsafeContext unary_expression_unsafe() {
			return GetRuleContext<Unary_expression_unsafeContext>(0);
		}
		public UnaryExpressionUnsafeContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnaryExpressionUnsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnaryExpressionUnsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpressionUnsafe(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComplementExpressionContext : Unary_expressionContext {
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ComplementExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterComplementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitComplementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComplementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateExpressionContext : Unary_expressionContext {
		public ITerminalNode MINUS() { return GetToken(CSharp4Parser.MINUS, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public NegateExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNegateExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNegateExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : Unary_expressionContext {
		public Pre_increment_expressionContext pre_increment_expression() {
			return GetRuleContext<Pre_increment_expressionContext>(0);
		}
		public PreIncrementExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPreIncrementExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPreIncrementExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PlusExpressionContext : Unary_expressionContext {
		public ITerminalNode PLUS() { return GetToken(CSharp4Parser.PLUS, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public PlusExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPlusExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPlusExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CastExpressionContext : Unary_expressionContext {
		public Cast_expressionContext cast_expression() {
			return GetRuleContext<Cast_expressionContext>(0);
		}
		public CastExpressionContext(Unary_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCastExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_unary_expression);
		try {
			State = 1280;
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				_localctx = new CastExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1266; cast_expression();
				}
				break;
			case 2:
				_localctx = new ArrayCreationExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1267; array_creation_expression();
				}
				break;
			case 3:
				_localctx = new PrimaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1268; primary_expression();
				}
				break;
			case 4:
				_localctx = new PlusExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1269; Match(PLUS);
				State = 1270; unary_expression();
				}
				break;
			case 5:
				_localctx = new NegateExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1271; Match(MINUS);
				State = 1272; unary_expression();
				}
				break;
			case 6:
				_localctx = new NotExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1273; Match(BANG);
				State = 1274; unary_expression();
				}
				break;
			case 7:
				_localctx = new ComplementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1275; Match(TILDE);
				State = 1276; unary_expression();
				}
				break;
			case 8:
				_localctx = new PreIncrementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1277; pre_increment_expression();
				}
				break;
			case 9:
				_localctx = new PreDecrementExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1278; pre_decrement_expression();
				}
				break;
			case 10:
				_localctx = new UnaryExpressionUnsafeContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1279; unary_expression_unsafe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scan_for_cast_generic_precedenceContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Cast_disambiguation_tokenContext cast_disambiguation_token() {
			return GetRuleContext<Cast_disambiguation_tokenContext>(0);
		}
		public Scan_for_cast_generic_precedenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scan_for_cast_generic_precedence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterScan_for_cast_generic_precedence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitScan_for_cast_generic_precedence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScan_for_cast_generic_precedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scan_for_cast_generic_precedenceContext scan_for_cast_generic_precedence() {
		Scan_for_cast_generic_precedenceContext _localctx = new Scan_for_cast_generic_precedenceContext(Context, State);
		EnterRule(_localctx, 120, RULE_scan_for_cast_generic_precedence);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282; Match(OPEN_PARENS);
			State = 1283; type();
			State = 1284; Match(CLOSE_PARENS);
			State = 1285; cast_disambiguation_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_disambiguation_tokenContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public ITerminalNode BANG() { return GetToken(CSharp4Parser.BANG, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode BASE() { return GetToken(CSharp4Parser.BASE, 0); }
		public ITerminalNode BOOL() { return GetToken(CSharp4Parser.BOOL, 0); }
		public ITerminalNode BREAK() { return GetToken(CSharp4Parser.BREAK, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharp4Parser.BYTE, 0); }
		public ITerminalNode CASE() { return GetToken(CSharp4Parser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(CSharp4Parser.CATCH, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharp4Parser.CHAR, 0); }
		public ITerminalNode CHECKED() { return GetToken(CSharp4Parser.CHECKED, 0); }
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public ITerminalNode CONST() { return GetToken(CSharp4Parser.CONST, 0); }
		public ITerminalNode CONTINUE() { return GetToken(CSharp4Parser.CONTINUE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharp4Parser.DECIMAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public ITerminalNode DO() { return GetToken(CSharp4Parser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharp4Parser.DOUBLE, 0); }
		public ITerminalNode ELSE() { return GetToken(CSharp4Parser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(CSharp4Parser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharp4Parser.EXPLICIT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public ITerminalNode FINALLY() { return GetToken(CSharp4Parser.FINALLY, 0); }
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharp4Parser.FLOAT, 0); }
		public ITerminalNode FOR() { return GetToken(CSharp4Parser.FOR, 0); }
		public ITerminalNode FOREACH() { return GetToken(CSharp4Parser.FOREACH, 0); }
		public ITerminalNode GOTO() { return GetToken(CSharp4Parser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(CSharp4Parser.IF, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharp4Parser.IMPLICIT, 0); }
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ITerminalNode INT() { return GetToken(CSharp4Parser.INT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(CSharp4Parser.INTERFACE, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode LOCK() { return GetToken(CSharp4Parser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(CSharp4Parser.LONG, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(CSharp4Parser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharp4Parser.OBJECT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(CSharp4Parser.PARAMS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharp4Parser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharp4Parser.RETURN, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharp4Parser.SBYTE, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharp4Parser.SHORT, 0); }
		public ITerminalNode SIZEOF() { return GetToken(CSharp4Parser.SIZEOF, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(CSharp4Parser.STACKALLOC, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharp4Parser.STRING, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public ITerminalNode SWITCH() { return GetToken(CSharp4Parser.SWITCH, 0); }
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(CSharp4Parser.THROW, 0); }
		public ITerminalNode TRY() { return GetToken(CSharp4Parser.TRY, 0); }
		public ITerminalNode TYPEOF() { return GetToken(CSharp4Parser.TYPEOF, 0); }
		public ITerminalNode UINT() { return GetToken(CSharp4Parser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharp4Parser.ULONG, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(CSharp4Parser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharp4Parser.USHORT, 0); }
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharp4Parser.VOLATILE, 0); }
		public ITerminalNode WHILE() { return GetToken(CSharp4Parser.WHILE, 0); }
		public Cast_disambiguation_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_disambiguation_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCast_disambiguation_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCast_disambiguation_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_disambiguation_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_disambiguation_tokenContext cast_disambiguation_token() {
		Cast_disambiguation_tokenContext _localctx = new Cast_disambiguation_tokenContext(Context, State);
		EnterRule(_localctx, 122, RULE_cast_disambiguation_token);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1364;
			switch (TokenStream.La(1)) {
			case TILDE:
				{
				State = 1287; Match(TILDE);
				}
				break;
			case BANG:
				{
				State = 1288; Match(BANG);
				}
				break;
			case OPEN_PARENS:
				{
				State = 1289; Match(OPEN_PARENS);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 1290; identifier();
				}
				break;
			case FALSE:
			case NULL:
			case TRUE:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
				{
				State = 1291; literal();
				}
				break;
			case ABSTRACT:
				{
				State = 1292; Match(ABSTRACT);
				}
				break;
			case BASE:
				{
				State = 1293; Match(BASE);
				}
				break;
			case BOOL:
				{
				State = 1294; Match(BOOL);
				}
				break;
			case BREAK:
				{
				State = 1295; Match(BREAK);
				}
				break;
			case BYTE:
				{
				State = 1296; Match(BYTE);
				}
				break;
			case CASE:
				{
				State = 1297; Match(CASE);
				}
				break;
			case CATCH:
				{
				State = 1298; Match(CATCH);
				}
				break;
			case CHAR:
				{
				State = 1299; Match(CHAR);
				}
				break;
			case CHECKED:
				{
				State = 1300; Match(CHECKED);
				}
				break;
			case CLASS:
				{
				State = 1301; Match(CLASS);
				}
				break;
			case CONST:
				{
				State = 1302; Match(CONST);
				}
				break;
			case CONTINUE:
				{
				State = 1303; Match(CONTINUE);
				}
				break;
			case DECIMAL:
				{
				State = 1304; Match(DECIMAL);
				}
				break;
			case DEFAULT:
				{
				State = 1305; Match(DEFAULT);
				}
				break;
			case DELEGATE:
				{
				State = 1306; Match(DELEGATE);
				}
				break;
			case DO:
				{
				State = 1307; Match(DO);
				}
				break;
			case DOUBLE:
				{
				State = 1308; Match(DOUBLE);
				}
				break;
			case ELSE:
				{
				State = 1309; Match(ELSE);
				}
				break;
			case ENUM:
				{
				State = 1310; Match(ENUM);
				}
				break;
			case EVENT:
				{
				State = 1311; Match(EVENT);
				}
				break;
			case EXPLICIT:
				{
				State = 1312; Match(EXPLICIT);
				}
				break;
			case EXTERN:
				{
				State = 1313; Match(EXTERN);
				}
				break;
			case FINALLY:
				{
				State = 1314; Match(FINALLY);
				}
				break;
			case FIXED:
				{
				State = 1315; Match(FIXED);
				}
				break;
			case FLOAT:
				{
				State = 1316; Match(FLOAT);
				}
				break;
			case FOR:
				{
				State = 1317; Match(FOR);
				}
				break;
			case FOREACH:
				{
				State = 1318; Match(FOREACH);
				}
				break;
			case GOTO:
				{
				State = 1319; Match(GOTO);
				}
				break;
			case IF:
				{
				State = 1320; Match(IF);
				}
				break;
			case IMPLICIT:
				{
				State = 1321; Match(IMPLICIT);
				}
				break;
			case IN:
				{
				State = 1322; Match(IN);
				}
				break;
			case INT:
				{
				State = 1323; Match(INT);
				}
				break;
			case INTERFACE:
				{
				State = 1324; Match(INTERFACE);
				}
				break;
			case INTERNAL:
				{
				State = 1325; Match(INTERNAL);
				}
				break;
			case LOCK:
				{
				State = 1326; Match(LOCK);
				}
				break;
			case LONG:
				{
				State = 1327; Match(LONG);
				}
				break;
			case NAMESPACE:
				{
				State = 1328; Match(NAMESPACE);
				}
				break;
			case NEW:
				{
				State = 1329; Match(NEW);
				}
				break;
			case OBJECT:
				{
				State = 1330; Match(OBJECT);
				}
				break;
			case OPERATOR:
				{
				State = 1331; Match(OPERATOR);
				}
				break;
			case OUT:
				{
				State = 1332; Match(OUT);
				}
				break;
			case OVERRIDE:
				{
				State = 1333; Match(OVERRIDE);
				}
				break;
			case PARAMS:
				{
				State = 1334; Match(PARAMS);
				}
				break;
			case PRIVATE:
				{
				State = 1335; Match(PRIVATE);
				}
				break;
			case PROTECTED:
				{
				State = 1336; Match(PROTECTED);
				}
				break;
			case PUBLIC:
				{
				State = 1337; Match(PUBLIC);
				}
				break;
			case READONLY:
				{
				State = 1338; Match(READONLY);
				}
				break;
			case REF:
				{
				State = 1339; Match(REF);
				}
				break;
			case RETURN:
				{
				State = 1340; Match(RETURN);
				}
				break;
			case SBYTE:
				{
				State = 1341; Match(SBYTE);
				}
				break;
			case SEALED:
				{
				State = 1342; Match(SEALED);
				}
				break;
			case SHORT:
				{
				State = 1343; Match(SHORT);
				}
				break;
			case SIZEOF:
				{
				State = 1344; Match(SIZEOF);
				}
				break;
			case STACKALLOC:
				{
				State = 1345; Match(STACKALLOC);
				}
				break;
			case STATIC:
				{
				State = 1346; Match(STATIC);
				}
				break;
			case STRING:
				{
				State = 1347; Match(STRING);
				}
				break;
			case STRUCT:
				{
				State = 1348; Match(STRUCT);
				}
				break;
			case SWITCH:
				{
				State = 1349; Match(SWITCH);
				}
				break;
			case THIS:
				{
				State = 1350; Match(THIS);
				}
				break;
			case THROW:
				{
				State = 1351; Match(THROW);
				}
				break;
			case TRY:
				{
				State = 1352; Match(TRY);
				}
				break;
			case TYPEOF:
				{
				State = 1353; Match(TYPEOF);
				}
				break;
			case UINT:
				{
				State = 1354; Match(UINT);
				}
				break;
			case ULONG:
				{
				State = 1355; Match(ULONG);
				}
				break;
			case UNCHECKED:
				{
				State = 1356; Match(UNCHECKED);
				}
				break;
			case UNSAFE:
				{
				State = 1357; Match(UNSAFE);
				}
				break;
			case USHORT:
				{
				State = 1358; Match(USHORT);
				}
				break;
			case USING:
				{
				State = 1359; Match(USING);
				}
				break;
			case VIRTUAL:
				{
				State = 1360; Match(VIRTUAL);
				}
				break;
			case VOID:
				{
				State = 1361; Match(VOID);
				}
				break;
			case VOLATILE:
				{
				State = 1362; Match(VOLATILE);
				}
				break;
			case WHILE:
				{
				State = 1363; Match(WHILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_increment_expressionContext : ParserRuleContext {
		public ITerminalNode OP_INC() { return GetToken(CSharp4Parser.OP_INC, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pre_increment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre_increment_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPre_increment_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPre_increment_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPre_increment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pre_increment_expressionContext pre_increment_expression() {
		Pre_increment_expressionContext _localctx = new Pre_increment_expressionContext(Context, State);
		EnterRule(_localctx, 124, RULE_pre_increment_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1366; Match(OP_INC);
			State = 1367; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pre_decrement_expressionContext : ParserRuleContext {
		public ITerminalNode OP_DEC() { return GetToken(CSharp4Parser.OP_DEC, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pre_decrement_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pre_decrement_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPre_decrement_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPre_decrement_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPre_decrement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pre_decrement_expressionContext pre_decrement_expression() {
		Pre_decrement_expressionContext _localctx = new Pre_decrement_expressionContext(Context, State);
		EnterRule(_localctx, 126, RULE_pre_decrement_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1369; Match(OP_DEC);
			State = 1370; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cast_expressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Cast_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cast_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCast_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCast_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCast_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cast_expressionContext cast_expression() {
		Cast_expressionContext _localctx = new Cast_expressionContext(Context, State);
		EnterRule(_localctx, 128, RULE_cast_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1372; Match(OPEN_PARENS);
			State = 1373; type();
			State = 1374; Match(CLOSE_PARENS);
			State = 1375; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiplicative_expressionContext : ParserRuleContext {
		public Unary_expressionContext[] unary_expression() {
			return GetRuleContexts<Unary_expressionContext>();
		}
		public Unary_expressionContext unary_expression(int i) {
			return GetRuleContext<Unary_expressionContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(CSharp4Parser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(CSharp4Parser.DIV, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(CSharp4Parser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(CSharp4Parser.PERCENT, i);
		}
		public Multiplicative_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicative_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMultiplicative_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMultiplicative_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicative_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Multiplicative_expressionContext multiplicative_expression() {
		Multiplicative_expressionContext _localctx = new Multiplicative_expressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_multiplicative_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1377; unary_expression();
			State = 1386;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (STAR - 126)) | (1L << (DIV - 126)) | (1L << (PERCENT - 126)))) != 0)) {
				{
				State = 1384;
				switch (TokenStream.La(1)) {
				case STAR:
					{
					{
					State = 1378; Match(STAR);
					State = 1379; unary_expression();
					}
					}
					break;
				case DIV:
					{
					{
					State = 1380; Match(DIV);
					State = 1381; unary_expression();
					}
					}
					break;
				case PERCENT:
					{
					{
					State = 1382; Match(PERCENT);
					State = 1383; unary_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1388;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Additive_expressionContext : ParserRuleContext {
		public IToken op;
		public Multiplicative_expressionContext[] multiplicative_expression() {
			return GetRuleContexts<Multiplicative_expressionContext>();
		}
		public Multiplicative_expressionContext multiplicative_expression(int i) {
			return GetRuleContext<Multiplicative_expressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(CSharp4Parser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(CSharp4Parser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(CSharp4Parser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(CSharp4Parser.MINUS, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additive_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAdditive_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAdditive_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditive_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Additive_expressionContext additive_expression() {
		Additive_expressionContext _localctx = new Additive_expressionContext(Context, State);
		EnterRule(_localctx, 132, RULE_additive_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1389; multiplicative_expression();
			State = 1394;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==PLUS || _la==MINUS) {
				{
				{
				State = 1390;
				_localctx.op = TokenStream.Lt(1);
				_la = TokenStream.La(1);
				if ( !(_la==PLUS || _la==MINUS) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 1391; multiplicative_expression();
				}
				}
				State = 1396;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		public Additive_expressionContext[] additive_expression() {
			return GetRuleContexts<Additive_expressionContext>();
		}
		public Additive_expressionContext additive_expression(int i) {
			return GetRuleContext<Additive_expressionContext>(i);
		}
		public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(CSharp4Parser.OP_LEFT_SHIFT); }
		public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(CSharp4Parser.OP_LEFT_SHIFT, i);
		}
		public Right_shiftContext[] right_shift() {
			return GetRuleContexts<Right_shiftContext>();
		}
		public Right_shiftContext right_shift(int i) {
			return GetRuleContext<Right_shiftContext>(i);
		}
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, State);
		EnterRule(_localctx, 134, RULE_shift_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1397; additive_expression();
			State = 1405;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 1403;
					switch (TokenStream.La(1)) {
					case OP_LEFT_SHIFT:
						{
						{
						State = 1398; Match(OP_LEFT_SHIFT);
						State = 1399; additive_expression();
						}
						}
						break;
					case GT:
						{
						{
						State = 1400; right_shift();
						State = 1401; additive_expression();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 1407;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		public Shift_expressionContext[] shift_expression() {
			return GetRuleContexts<Shift_expressionContext>();
		}
		public Shift_expressionContext shift_expression(int i) {
			return GetRuleContext<Shift_expressionContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(CSharp4Parser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(CSharp4Parser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(CSharp4Parser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(CSharp4Parser.GT, i);
		}
		public ITerminalNode[] OP_LE() { return GetTokens(CSharp4Parser.OP_LE); }
		public ITerminalNode OP_LE(int i) {
			return GetToken(CSharp4Parser.OP_LE, i);
		}
		public ITerminalNode[] OP_GE() { return GetTokens(CSharp4Parser.OP_GE); }
		public ITerminalNode OP_GE(int i) {
			return GetToken(CSharp4Parser.OP_GE, i);
		}
		public ITerminalNode[] IS() { return GetTokens(CSharp4Parser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(CSharp4Parser.IS, i);
		}
		public IsTypeContext[] isType() {
			return GetRuleContexts<IsTypeContext>();
		}
		public IsTypeContext isType(int i) {
			return GetRuleContext<IsTypeContext>(i);
		}
		public ITerminalNode[] AS() { return GetTokens(CSharp4Parser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(CSharp4Parser.AS, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, State);
		EnterRule(_localctx, 136, RULE_relational_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1408; shift_expression();
			State = 1423;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AS || _la==IS || ((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (LT - 135)) | (1L << (GT - 135)) | (1L << (OP_LE - 135)) | (1L << (OP_GE - 135)))) != 0)) {
				{
				State = 1421;
				switch (TokenStream.La(1)) {
				case LT:
					{
					State = 1409; Match(LT);
					State = 1410; shift_expression();
					}
					break;
				case GT:
					{
					State = 1411; Match(GT);
					State = 1412; shift_expression();
					}
					break;
				case OP_LE:
					{
					State = 1413; Match(OP_LE);
					State = 1414; shift_expression();
					}
					break;
				case OP_GE:
					{
					State = 1415; Match(OP_GE);
					State = 1416; shift_expression();
					}
					break;
				case IS:
					{
					State = 1417; Match(IS);
					State = 1418; isType();
					}
					break;
				case AS:
					{
					State = 1419; Match(AS);
					State = 1420; type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1425;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scan_for_shift_generic_precedenceContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Shift_disambiguation_tokenContext shift_disambiguation_token() {
			return GetRuleContext<Shift_disambiguation_tokenContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Scan_for_shift_generic_precedenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scan_for_shift_generic_precedence; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterScan_for_shift_generic_precedence(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitScan_for_shift_generic_precedence(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScan_for_shift_generic_precedence(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scan_for_shift_generic_precedenceContext scan_for_shift_generic_precedence() {
		Scan_for_shift_generic_precedenceContext _localctx = new Scan_for_shift_generic_precedenceContext(Context, State);
		EnterRule(_localctx, 138, RULE_scan_for_shift_generic_precedence);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1426; identifier();
			State = 1427; Match(LT);
			State = 1428; type();
			State = 1433;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1429; Match(COMMA);
				State = 1430; type();
				}
				}
				State = 1435;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 1436; Match(GT);
			State = 1437; shift_disambiguation_token();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shift_disambiguation_tokenContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public ITerminalNode OP_EQ() { return GetToken(CSharp4Parser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharp4Parser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Shift_disambiguation_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_disambiguation_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterShift_disambiguation_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitShift_disambiguation_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_disambiguation_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_disambiguation_tokenContext shift_disambiguation_token() {
		Shift_disambiguation_tokenContext _localctx = new Shift_disambiguation_tokenContext(Context, State);
		EnterRule(_localctx, 140, RULE_shift_disambiguation_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1439;
			_la = TokenStream.La(1);
			if ( !(((((_la - 117)) & ~0x3f) == 0 && ((1L << (_la - 117)) & ((1L << (CLOSE_BRACKET - 117)) | (1L << (OPEN_PARENS - 117)) | (1L << (CLOSE_PARENS - 117)) | (1L << (DOT - 117)) | (1L << (COMMA - 117)) | (1L << (COLON - 117)) | (1L << (SEMICOLON - 117)) | (1L << (GT - 117)) | (1L << (INTERR - 117)) | (1L << (OP_EQ - 117)) | (1L << (OP_NE - 117)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypeContext : ParserRuleContext {
		public Non_nullable_value_typeContext non_nullable_value_type() {
			return GetRuleContext<Non_nullable_value_typeContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public IsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isType; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIsType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIsType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsTypeContext isType() {
		IsTypeContext _localctx = new IsTypeContext(Context, State);
		EnterRule(_localctx, 142, RULE_isType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1441; non_nullable_value_type();
			State = 1443;
			_la = TokenStream.La(1);
			if (_la==INTERR) {
				{
				State = 1442; Match(INTERR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Is_disambiguation_tokenContext : ParserRuleContext {
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode OP_AND() { return GetToken(CSharp4Parser.OP_AND, 0); }
		public ITerminalNode OP_OR() { return GetToken(CSharp4Parser.OP_OR, 0); }
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public Is_disambiguation_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_is_disambiguation_token; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIs_disambiguation_token(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIs_disambiguation_token(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIs_disambiguation_token(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Is_disambiguation_tokenContext is_disambiguation_token() {
		Is_disambiguation_tokenContext _localctx = new Is_disambiguation_tokenContext(Context, State);
		EnterRule(_localctx, 144, RULE_is_disambiguation_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1445;
			_la = TokenStream.La(1);
			if ( !(((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & ((1L << (CLOSE_PARENS - 119)) | (1L << (INTERR - 119)) | (1L << (OP_AND - 119)) | (1L << (OP_OR - 119)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		public Relational_expressionContext[] relational_expression() {
			return GetRuleContexts<Relational_expressionContext>();
		}
		public Relational_expressionContext relational_expression(int i) {
			return GetRuleContext<Relational_expressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(CSharp4Parser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(CSharp4Parser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(CSharp4Parser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(CSharp4Parser.OP_NE, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, State);
		EnterRule(_localctx, 146, RULE_equality_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1447; relational_expression();
			State = 1454;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				State = 1452;
				switch (TokenStream.La(1)) {
				case OP_EQ:
					{
					{
					State = 1448; Match(OP_EQ);
					State = 1449; relational_expression();
					}
					}
					break;
				case OP_NE:
					{
					{
					State = 1450; Match(OP_NE);
					State = 1451; relational_expression();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 1456;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class And_expressionContext : ParserRuleContext {
		public Equality_expressionContext[] equality_expression() {
			return GetRuleContexts<Equality_expressionContext>();
		}
		public Equality_expressionContext equality_expression(int i) {
			return GetRuleContext<Equality_expressionContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(CSharp4Parser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(CSharp4Parser.AMP, i);
		}
		public And_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnd_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnd_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public And_expressionContext and_expression() {
		And_expressionContext _localctx = new And_expressionContext(Context, State);
		EnterRule(_localctx, 148, RULE_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457; equality_expression();
			State = 1462;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==AMP) {
				{
				{
				State = 1458; Match(AMP);
				State = 1459; equality_expression();
				}
				}
				State = 1464;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Exclusive_or_expressionContext : ParserRuleContext {
		public And_expressionContext[] and_expression() {
			return GetRuleContexts<And_expressionContext>();
		}
		public And_expressionContext and_expression(int i) {
			return GetRuleContext<And_expressionContext>(i);
		}
		public ITerminalNode[] CARET() { return GetTokens(CSharp4Parser.CARET); }
		public ITerminalNode CARET(int i) {
			return GetToken(CSharp4Parser.CARET, i);
		}
		public Exclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Exclusive_or_expressionContext exclusive_or_expression() {
		Exclusive_or_expressionContext _localctx = new Exclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 150, RULE_exclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1465; and_expression();
			State = 1470;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CARET) {
				{
				{
				State = 1466; Match(CARET);
				State = 1467; and_expression();
				}
				}
				State = 1472;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Inclusive_or_expressionContext : ParserRuleContext {
		public Exclusive_or_expressionContext[] exclusive_or_expression() {
			return GetRuleContexts<Exclusive_or_expressionContext>();
		}
		public Exclusive_or_expressionContext exclusive_or_expression(int i) {
			return GetRuleContext<Exclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(CSharp4Parser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(CSharp4Parser.BITWISE_OR, i);
		}
		public Inclusive_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusive_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInclusive_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInclusive_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInclusive_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Inclusive_or_expressionContext inclusive_or_expression() {
		Inclusive_or_expressionContext _localctx = new Inclusive_or_expressionContext(Context, State);
		EnterRule(_localctx, 152, RULE_inclusive_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1473; exclusive_or_expression();
			State = 1478;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 1474; Match(BITWISE_OR);
				State = 1475; exclusive_or_expression();
				}
				}
				State = 1480;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_and_expressionContext : ParserRuleContext {
		public Inclusive_or_expressionContext[] inclusive_or_expression() {
			return GetRuleContexts<Inclusive_or_expressionContext>();
		}
		public Inclusive_or_expressionContext inclusive_or_expression(int i) {
			return GetRuleContext<Inclusive_or_expressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(CSharp4Parser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(CSharp4Parser.OP_AND, i);
		}
		public Conditional_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_and_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConditional_and_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConditional_and_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_and_expressionContext conditional_and_expression() {
		Conditional_and_expressionContext _localctx = new Conditional_and_expressionContext(Context, State);
		EnterRule(_localctx, 154, RULE_conditional_and_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1481; inclusive_or_expression();
			State = 1486;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OP_AND) {
				{
				{
				State = 1482; Match(OP_AND);
				State = 1483; inclusive_or_expression();
				}
				}
				State = 1488;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conditional_or_expressionContext : ParserRuleContext {
		public Conditional_and_expressionContext[] conditional_and_expression() {
			return GetRuleContexts<Conditional_and_expressionContext>();
		}
		public Conditional_and_expressionContext conditional_and_expression(int i) {
			return GetRuleContext<Conditional_and_expressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(CSharp4Parser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(CSharp4Parser.OP_OR, i);
		}
		public Conditional_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditional_or_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConditional_or_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConditional_or_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditional_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conditional_or_expressionContext conditional_or_expression() {
		Conditional_or_expressionContext _localctx = new Conditional_or_expressionContext(Context, State);
		EnterRule(_localctx, 156, RULE_conditional_or_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1489; conditional_and_expression();
			State = 1494;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==OP_OR) {
				{
				{
				State = 1490; Match(OP_OR);
				State = 1491; conditional_and_expression();
				}
				}
				State = 1496;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Null_coalescing_expressionContext : ParserRuleContext {
		public Conditional_or_expressionContext conditional_or_expression() {
			return GetRuleContext<Conditional_or_expressionContext>(0);
		}
		public ITerminalNode OP_COALESCING() { return GetToken(CSharp4Parser.OP_COALESCING, 0); }
		public Null_coalescing_expressionContext null_coalescing_expression() {
			return GetRuleContext<Null_coalescing_expressionContext>(0);
		}
		public Null_coalescing_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_null_coalescing_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNull_coalescing_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNull_coalescing_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNull_coalescing_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Null_coalescing_expressionContext null_coalescing_expression() {
		Null_coalescing_expressionContext _localctx = new Null_coalescing_expressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_null_coalescing_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1497; conditional_or_expression();
			State = 1500;
			switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
			case 1:
				{
				State = 1498; Match(OP_COALESCING);
				State = 1499; null_coalescing_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lambda_expressionContext : ParserRuleContext {
		public Anonymous_function_signatureContext anonymous_function_signature() {
			return GetRuleContext<Anonymous_function_signatureContext>(0);
		}
		public Right_arrowContext right_arrow() {
			return GetRuleContext<Right_arrowContext>(0);
		}
		public Anonymous_function_bodyContext anonymous_function_body() {
			return GetRuleContext<Anonymous_function_bodyContext>(0);
		}
		public Lambda_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambda_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLambda_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLambda_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambda_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lambda_expressionContext lambda_expression() {
		Lambda_expressionContext _localctx = new Lambda_expressionContext(Context, State);
		EnterRule(_localctx, 160, RULE_lambda_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502; anonymous_function_signature();
			State = 1503; right_arrow();
			State = 1504; anonymous_function_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_method_expressionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Explicit_anonymous_function_signatureContext explicit_anonymous_function_signature() {
			return GetRuleContext<Explicit_anonymous_function_signatureContext>(0);
		}
		public Anonymous_method_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_method_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_method_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_method_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_method_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_method_expressionContext anonymous_method_expression() {
		Anonymous_method_expressionContext _localctx = new Anonymous_method_expressionContext(Context, State);
		EnterRule(_localctx, 162, RULE_anonymous_method_expression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1506; Match(DELEGATE);
			State = 1508;
			_la = TokenStream.La(1);
			if (_la==OPEN_PARENS) {
				{
				State = 1507; explicit_anonymous_function_signature();
				}
			}

			State = 1510; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
			return GetRuleContext<Implicit_anonymous_function_parameterContext>(0);
		}
		public Anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_signatureContext anonymous_function_signature() {
		Anonymous_function_signatureContext _localctx = new Anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 164, RULE_anonymous_function_signature);
		try {
			State = 1523;
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1512; Match(OPEN_PARENS);
				State = 1513; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1514; Match(OPEN_PARENS);
				State = 1515; explicit_anonymous_function_parameter_list();
				State = 1516; Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1518; Match(OPEN_PARENS);
				State = 1519; implicit_anonymous_function_parameter_list();
				State = 1520; Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1522; implicit_anonymous_function_parameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
			return GetRuleContext<Explicit_anonymous_function_parameter_listContext>(0);
		}
		public Explicit_anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_signatureContext explicit_anonymous_function_signature() {
		Explicit_anonymous_function_signatureContext _localctx = new Explicit_anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 166, RULE_explicit_anonymous_function_signature);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1525; Match(OPEN_PARENS);
			State = 1527;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)))) != 0)) {
				{
				State = 1526; explicit_anonymous_function_parameter_list();
				}
			}

			State = 1529; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Explicit_anonymous_function_parameterContext[] explicit_anonymous_function_parameter() {
			return GetRuleContexts<Explicit_anonymous_function_parameterContext>();
		}
		public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Explicit_anonymous_function_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Explicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameter_listContext explicit_anonymous_function_parameter_list() {
		Explicit_anonymous_function_parameter_listContext _localctx = new Explicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 168, RULE_explicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531; explicit_anonymous_function_parameter();
			State = 1536;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1532; Match(COMMA);
				State = 1533; explicit_anonymous_function_parameter();
				}
				}
				State = 1538;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Explicit_anonymous_function_parameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Anonymous_function_parameter_modifierContext anonymous_function_parameter_modifier() {
			return GetRuleContext<Anonymous_function_parameter_modifierContext>(0);
		}
		public Explicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExplicit_anonymous_function_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Explicit_anonymous_function_parameterContext explicit_anonymous_function_parameter() {
		Explicit_anonymous_function_parameterContext _localctx = new Explicit_anonymous_function_parameterContext(Context, State);
		EnterRule(_localctx, 170, RULE_explicit_anonymous_function_parameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1540;
			_la = TokenStream.La(1);
			if (_la==OUT || _la==REF) {
				{
				State = 1539; anonymous_function_parameter_modifier();
				}
			}

			State = 1542; type();
			State = 1543; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_parameter_modifierContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public Anonymous_function_parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_function_parameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_function_parameter_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_parameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_parameter_modifierContext anonymous_function_parameter_modifier() {
		Anonymous_function_parameter_modifierContext _localctx = new Anonymous_function_parameter_modifierContext(Context, State);
		EnterRule(_localctx, 172, RULE_anonymous_function_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1545;
			_la = TokenStream.La(1);
			if ( !(_la==OUT || _la==REF) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_signatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
			return GetRuleContext<Implicit_anonymous_function_parameter_listContext>(0);
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
			return GetRuleContext<Implicit_anonymous_function_parameterContext>(0);
		}
		public Implicit_anonymous_function_signatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_signature; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_signature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_signature(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_signature(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_signatureContext implicit_anonymous_function_signature() {
		Implicit_anonymous_function_signatureContext _localctx = new Implicit_anonymous_function_signatureContext(Context, State);
		EnterRule(_localctx, 174, RULE_implicit_anonymous_function_signature);
		int _la;
		try {
			State = 1553;
			switch (TokenStream.La(1)) {
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1547; Match(OPEN_PARENS);
				State = 1549;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
					{
					State = 1548; implicit_anonymous_function_parameter_list();
					}
				}

				State = 1551; Match(CLOSE_PARENS);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1552; implicit_anonymous_function_parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameter_listContext : ParserRuleContext {
		public Implicit_anonymous_function_parameterContext[] implicit_anonymous_function_parameter() {
			return GetRuleContexts<Implicit_anonymous_function_parameterContext>();
		}
		public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter(int i) {
			return GetRuleContext<Implicit_anonymous_function_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Implicit_anonymous_function_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameter_listContext implicit_anonymous_function_parameter_list() {
		Implicit_anonymous_function_parameter_listContext _localctx = new Implicit_anonymous_function_parameter_listContext(Context, State);
		EnterRule(_localctx, 176, RULE_implicit_anonymous_function_parameter_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1555; implicit_anonymous_function_parameter();
			State = 1560;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1556; Match(COMMA);
				State = 1557; implicit_anonymous_function_parameter();
				}
				}
				State = 1562;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Implicit_anonymous_function_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Implicit_anonymous_function_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicit_anonymous_function_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterImplicit_anonymous_function_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitImplicit_anonymous_function_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImplicit_anonymous_function_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Implicit_anonymous_function_parameterContext implicit_anonymous_function_parameter() {
		Implicit_anonymous_function_parameterContext _localctx = new Implicit_anonymous_function_parameterContext(Context, State);
		EnterRule(_localctx, 178, RULE_implicit_anonymous_function_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1563; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Anonymous_function_bodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Anonymous_function_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymous_function_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAnonymous_function_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAnonymous_function_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnonymous_function_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Anonymous_function_bodyContext anonymous_function_body() {
		Anonymous_function_bodyContext _localctx = new Anonymous_function_bodyContext(Context, State);
		EnterRule(_localctx, 180, RULE_anonymous_function_body);
		try {
			State = 1567;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1565; expression(0);
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1566; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_expressionContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_expressionContext query_expression() {
		Query_expressionContext _localctx = new Query_expressionContext(Context, State);
		EnterRule(_localctx, 182, RULE_query_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1569; from_clause();
			State = 1570; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_clauseContext : ParserRuleContext {
		public From_contextual_keywordContext from_contextual_keyword() {
			return GetRuleContext<From_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFrom_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFrom_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_clauseContext from_clause() {
		From_clauseContext _localctx = new From_clauseContext(Context, State);
		EnterRule(_localctx, 184, RULE_from_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1572; from_contextual_keyword();
			State = 1574;
			switch ( Interpreter.AdaptivePredict(TokenStream,89,Context) ) {
			case 1:
				{
				State = 1573; type();
				}
				break;
			}
			State = 1576; identifier();
			State = 1577; Match(IN);
			State = 1578; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_bodyContext : ParserRuleContext {
		public Select_or_group_clauseContext select_or_group_clause() {
			return GetRuleContext<Select_or_group_clauseContext>(0);
		}
		public Query_body_clausesContext query_body_clauses() {
			return GetRuleContext<Query_body_clausesContext>(0);
		}
		public Query_continuationContext query_continuation() {
			return GetRuleContext<Query_continuationContext>(0);
		}
		public Query_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_bodyContext query_body() {
		Query_bodyContext _localctx = new Query_bodyContext(Context, State);
		EnterRule(_localctx, 186, RULE_query_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1581;
			_la = TokenStream.La(1);
			if (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (FROM - 46)) | (1L << (JOIN - 46)) | (1L << (LET - 46)) | (1L << (ORDERBY - 46)) | (1L << (WHERE - 46)))) != 0)) {
				{
				State = 1580; query_body_clauses();
				}
			}

			State = 1583; select_or_group_clause();
			State = 1585;
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				{
				State = 1584; query_continuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clausesContext : ParserRuleContext {
		public Query_body_clauseContext[] query_body_clause() {
			return GetRuleContexts<Query_body_clauseContext>();
		}
		public Query_body_clauseContext query_body_clause(int i) {
			return GetRuleContext<Query_body_clauseContext>(i);
		}
		public Query_body_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_body_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_body_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clausesContext query_body_clauses() {
		Query_body_clausesContext _localctx = new Query_body_clausesContext(Context, State);
		EnterRule(_localctx, 188, RULE_query_body_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1587; query_body_clause();
			State = 1591;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 46)) & ~0x3f) == 0 && ((1L << (_la - 46)) & ((1L << (FROM - 46)) | (1L << (JOIN - 46)) | (1L << (LET - 46)) | (1L << (ORDERBY - 46)) | (1L << (WHERE - 46)))) != 0)) {
				{
				{
				State = 1588; query_body_clause();
				}
				}
				State = 1593;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_body_clauseContext : ParserRuleContext {
		public From_clauseContext from_clause() {
			return GetRuleContext<From_clauseContext>(0);
		}
		public Let_clauseContext let_clause() {
			return GetRuleContext<Let_clauseContext>(0);
		}
		public Where_clauseContext where_clause() {
			return GetRuleContext<Where_clauseContext>(0);
		}
		public Combined_join_clauseContext combined_join_clause() {
			return GetRuleContext<Combined_join_clauseContext>(0);
		}
		public Orderby_clauseContext orderby_clause() {
			return GetRuleContext<Orderby_clauseContext>(0);
		}
		public Query_body_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_body_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_body_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_body_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_body_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_body_clauseContext query_body_clause() {
		Query_body_clauseContext _localctx = new Query_body_clauseContext(Context, State);
		EnterRule(_localctx, 190, RULE_query_body_clause);
		try {
			State = 1599;
			switch (TokenStream.La(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1594; from_clause();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1595; let_clause();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1596; where_clause();
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1597; combined_join_clause();
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1598; orderby_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_clauseContext : ParserRuleContext {
		public Let_contextual_keywordContext let_contextual_keyword() {
			return GetRuleContext<Let_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Let_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLet_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLet_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_clauseContext let_clause() {
		Let_clauseContext _localctx = new Let_clauseContext(Context, State);
		EnterRule(_localctx, 192, RULE_let_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1601; let_contextual_keyword();
			State = 1602; identifier();
			State = 1603; Match(ASSIGNMENT);
			State = 1604; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_clauseContext : ParserRuleContext {
		public Where_contextual_keywordContext where_contextual_keyword() {
			return GetRuleContext<Where_contextual_keywordContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterWhere_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitWhere_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_clauseContext where_clause() {
		Where_clauseContext _localctx = new Where_clauseContext(Context, State);
		EnterRule(_localctx, 194, RULE_where_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1606; where_contextual_keyword();
			State = 1607; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_clauseContext : ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return GetRuleContext<Join_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return GetRuleContext<On_contextual_keywordContext>(0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return GetRuleContext<Equals_contextual_keywordContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterJoin_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitJoin_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_clauseContext join_clause() {
		Join_clauseContext _localctx = new Join_clauseContext(Context, State);
		EnterRule(_localctx, 196, RULE_join_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1609; join_contextual_keyword();
			State = 1611;
			switch ( Interpreter.AdaptivePredict(TokenStream,94,Context) ) {
			case 1:
				{
				State = 1610; type();
				}
				break;
			}
			State = 1613; identifier();
			State = 1614; Match(IN);
			State = 1615; expression(0);
			State = 1616; on_contextual_keyword();
			State = 1617; expression(0);
			State = 1618; equals_contextual_keyword();
			State = 1619; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_into_clauseContext : ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return GetRuleContext<Join_contextual_keywordContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return GetRuleContext<On_contextual_keywordContext>(0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return GetRuleContext<Equals_contextual_keywordContext>(0);
		}
		public Into_contextual_keywordContext into_contextual_keyword() {
			return GetRuleContext<Into_contextual_keywordContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Join_into_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_into_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterJoin_into_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitJoin_into_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_into_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_into_clauseContext join_into_clause() {
		Join_into_clauseContext _localctx = new Join_into_clauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_join_into_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1621; join_contextual_keyword();
			State = 1623;
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				{
				State = 1622; type();
				}
				break;
			}
			State = 1625; identifier();
			State = 1626; Match(IN);
			State = 1627; expression(0);
			State = 1628; on_contextual_keyword();
			State = 1629; expression(0);
			State = 1630; equals_contextual_keyword();
			State = 1631; expression(0);
			State = 1632; into_contextual_keyword();
			State = 1633; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Combined_join_clauseContext : ParserRuleContext {
		public Join_contextual_keywordContext join_contextual_keyword() {
			return GetRuleContext<Join_contextual_keywordContext>(0);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public On_contextual_keywordContext on_contextual_keyword() {
			return GetRuleContext<On_contextual_keywordContext>(0);
		}
		public Equals_contextual_keywordContext equals_contextual_keyword() {
			return GetRuleContext<Equals_contextual_keywordContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Into_contextual_keywordContext into_contextual_keyword() {
			return GetRuleContext<Into_contextual_keywordContext>(0);
		}
		public Combined_join_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combined_join_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCombined_join_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCombined_join_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCombined_join_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Combined_join_clauseContext combined_join_clause() {
		Combined_join_clauseContext _localctx = new Combined_join_clauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_combined_join_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1635; join_contextual_keyword();
			State = 1637;
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				{
				State = 1636; type();
				}
				break;
			}
			State = 1639; identifier();
			State = 1640; Match(IN);
			State = 1641; expression(0);
			State = 1642; on_contextual_keyword();
			State = 1643; expression(0);
			State = 1644; equals_contextual_keyword();
			State = 1645; expression(0);
			State = 1649;
			_la = TokenStream.La(1);
			if (_la==INTO) {
				{
				State = 1646; into_contextual_keyword();
				State = 1647; identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_clauseContext : ParserRuleContext {
		public Orderby_contextual_keywordContext orderby_contextual_keyword() {
			return GetRuleContext<Orderby_contextual_keywordContext>(0);
		}
		public OrderingsContext orderings() {
			return GetRuleContext<OrderingsContext>(0);
		}
		public Orderby_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrderby_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrderby_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_clauseContext orderby_clause() {
		Orderby_clauseContext _localctx = new Orderby_clauseContext(Context, State);
		EnterRule(_localctx, 202, RULE_orderby_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1651; orderby_contextual_keyword();
			State = 1652; orderings();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingsContext : ParserRuleContext {
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public OrderingsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderings; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrderings(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrderings(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderings(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingsContext orderings() {
		OrderingsContext _localctx = new OrderingsContext(Context, State);
		EnterRule(_localctx, 204, RULE_orderings);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1654; ordering();
			State = 1659;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1655; Match(COMMA);
				State = 1656; ordering();
				}
				}
				State = 1661;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Ordering_directionContext ordering_direction() {
			return GetRuleContext<Ordering_directionContext>(0);
		}
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext ordering() {
		OrderingContext _localctx = new OrderingContext(Context, State);
		EnterRule(_localctx, 206, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662; expression(0);
			State = 1664;
			_la = TokenStream.La(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 1663; ordering_direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ordering_directionContext : ParserRuleContext {
		public Ascending_contextual_keywordContext ascending_contextual_keyword() {
			return GetRuleContext<Ascending_contextual_keywordContext>(0);
		}
		public Descending_contextual_keywordContext descending_contextual_keyword() {
			return GetRuleContext<Descending_contextual_keywordContext>(0);
		}
		public Ordering_directionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering_direction; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrdering_direction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrdering_direction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrdering_direction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ordering_directionContext ordering_direction() {
		Ordering_directionContext _localctx = new Ordering_directionContext(Context, State);
		EnterRule(_localctx, 208, RULE_ordering_direction);
		try {
			State = 1668;
			switch (TokenStream.La(1)) {
			case ASCENDING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1666; ascending_contextual_keyword();
				}
				break;
			case DESCENDING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1667; descending_contextual_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_or_group_clauseContext : ParserRuleContext {
		public Select_clauseContext select_clause() {
			return GetRuleContext<Select_clauseContext>(0);
		}
		public Group_clauseContext group_clause() {
			return GetRuleContext<Group_clauseContext>(0);
		}
		public Select_or_group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_or_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSelect_or_group_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSelect_or_group_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_or_group_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_or_group_clauseContext select_or_group_clause() {
		Select_or_group_clauseContext _localctx = new Select_or_group_clauseContext(Context, State);
		EnterRule(_localctx, 210, RULE_select_or_group_clause);
		try {
			State = 1672;
			switch (TokenStream.La(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1670; select_clause();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1671; group_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_clauseContext : ParserRuleContext {
		public Select_contextual_keywordContext select_contextual_keyword() {
			return GetRuleContext<Select_contextual_keywordContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Select_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSelect_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSelect_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_clauseContext select_clause() {
		Select_clauseContext _localctx = new Select_clauseContext(Context, State);
		EnterRule(_localctx, 212, RULE_select_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1674; select_contextual_keyword();
			State = 1675; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_clauseContext : ParserRuleContext {
		public Group_contextual_keywordContext group_contextual_keyword() {
			return GetRuleContext<Group_contextual_keywordContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public By_contextual_keywordContext by_contextual_keyword() {
			return GetRuleContext<By_contextual_keywordContext>(0);
		}
		public Group_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGroup_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGroup_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_clauseContext group_clause() {
		Group_clauseContext _localctx = new Group_clauseContext(Context, State);
		EnterRule(_localctx, 214, RULE_group_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1677; group_contextual_keyword();
			State = 1678; expression(0);
			State = 1679; by_contextual_keyword();
			State = 1680; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Query_continuationContext : ParserRuleContext {
		public Into_contextual_keywordContext into_contextual_keyword() {
			return GetRuleContext<Into_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Query_bodyContext query_body() {
			return GetRuleContext<Query_bodyContext>(0);
		}
		public Query_continuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query_continuation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQuery_continuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQuery_continuation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuery_continuation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Query_continuationContext query_continuation() {
		Query_continuationContext _localctx = new Query_continuationContext(Context, State);
		EnterRule(_localctx, 216, RULE_query_continuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1682; into_contextual_keyword();
			State = 1683; identifier();
			State = 1684; query_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public IToken op;
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_ADD_ASSIGNMENT, 0); }
		public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_SUB_ASSIGNMENT, 0); }
		public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_MULT_ASSIGNMENT, 0); }
		public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_DIV_ASSIGNMENT, 0); }
		public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_MOD_ASSIGNMENT, 0); }
		public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_AND_ASSIGNMENT, 0); }
		public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_OR_ASSIGNMENT, 0); }
		public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_XOR_ASSIGNMENT, 0); }
		public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		public ITerminalNode OP_RIGHT_SHIFT_ASSIGNMENT() { return GetToken(CSharp4Parser.OP_RIGHT_SHIFT_ASSIGNMENT, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 218, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1686; unary_expression();
			State = 1687;
			_localctx.op = TokenStream.Lt(1);
			_la = TokenStream.La(1);
			if ( !(((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (ASSIGNMENT - 134)) | (1L << (OP_ADD_ASSIGNMENT - 134)) | (1L << (OP_SUB_ASSIGNMENT - 134)) | (1L << (OP_MULT_ASSIGNMENT - 134)) | (1L << (OP_DIV_ASSIGNMENT - 134)) | (1L << (OP_MOD_ASSIGNMENT - 134)) | (1L << (OP_AND_ASSIGNMENT - 134)) | (1L << (OP_OR_ASSIGNMENT - 134)) | (1L << (OP_XOR_ASSIGNMENT - 134)) | (1L << (OP_LEFT_SHIFT_ASSIGNMENT - 134)) | (1L << (OP_RIGHT_SHIFT_ASSIGNMENT - 134)))) != 0)) ) {
				_localctx.op = ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 1688; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ConditionalAndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_AND() { return GetToken(CSharp4Parser.OP_AND, 0); }
		public ConditionalAndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExpressionContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ParenExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentExpressionContext : ExpressionContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public AssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BITWISE_OR() { return GetToken(CSharp4Parser.BITWISE_OR, 0); }
		public OrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AMP() { return GetToken(CSharp4Parser.AMP, 0); }
		public AndExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ShiftExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_LEFT_SHIFT() { return GetToken(CSharp4Parser.OP_LEFT_SHIFT, 0); }
		public ITerminalNode OP_RIGHT_SHIFT() { return GetToken(CSharp4Parser.OP_RIGHT_SHIFT, 0); }
		public ShiftExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShiftExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LambdaExpressionContext : ExpressionContext {
		public Lambda_expressionContext lambda_expression() {
			return GetRuleContext<Lambda_expressionContext>(0);
		}
		public LambdaExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NonAssignmentExpressionContext : ExpressionContext {
		public Non_assignment_expressionContext non_assignment_expression() {
			return GetRuleContext<Non_assignment_expressionContext>(0);
		}
		public NonAssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNonAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNonAssignmentExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode INTERR() { return GetToken(CSharp4Parser.INTERR, 0); }
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public ConditionalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConditionalOrExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_OR() { return GetToken(CSharp4Parser.OP_OR, 0); }
		public ConditionalOrExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConditionalOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public ITerminalNode OP_LE() { return GetToken(CSharp4Parser.OP_LE, 0); }
		public ITerminalNode OP_GE() { return GetToken(CSharp4Parser.OP_GE, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_EQ() { return GetToken(CSharp4Parser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharp4Parser.OP_NE, 0); }
		public EqualityExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class XorExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CARET() { return GetToken(CSharp4Parser.CARET, 0); }
		public XorExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterXorExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitXorExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitXorExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(CSharp4Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CSharp4Parser.MINUS, 0); }
		public AdditiveExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicativeExpressionContext : ExpressionContext {
		public IToken op;
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(CSharp4Parser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(CSharp4Parser.PERCENT, 0); }
		public MultiplicativeExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicativeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NullCoalescingExpressionContext : ExpressionContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode OP_COALESCING() { return GetToken(CSharp4Parser.OP_COALESCING, 0); }
		public NullCoalescingExpressionContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNullCoalescingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNullCoalescingExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullCoalescingExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 220;
		EnterRecursionRule(_localctx, 220, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1698;
			switch ( Interpreter.AdaptivePredict(TokenStream,102,Context) ) {
			case 1:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 1691; Match(OPEN_PARENS);
				State = 1692; expression(0);
				State = 1693; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				{
				_localctx = new NonAssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1695; non_assignment_expression();
				}
				break;
			case 3:
				{
				_localctx = new AssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1696; assignment();
				}
				break;
			case 4:
				{
				_localctx = new LambdaExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 1697; lambda_expression();
				}
				break;
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 1741;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1739;
					switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1700;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1701;
						((MultiplicativeExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (STAR - 126)) | (1L << (DIV - 126)) | (1L << (PERCENT - 126)))) != 0)) ) {
							((MultiplicativeExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1702; expression(15);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1703;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1704;
						((AdditiveExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditiveExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1705; expression(14);
						}
						break;
					case 3:
						{
						_localctx = new ShiftExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1706;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1707;
						((ShiftExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==OP_LEFT_SHIFT || _la==OP_RIGHT_SHIFT) ) {
							((ShiftExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1708; expression(13);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1709;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1710;
						((RelationalExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(((((_la - 135)) & ~0x3f) == 0 && ((1L << (_la - 135)) & ((1L << (LT - 135)) | (1L << (GT - 135)) | (1L << (OP_LE - 135)) | (1L << (OP_GE - 135)))) != 0)) ) {
							((RelationalExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1711; expression(12);
						}
						break;
					case 5:
						{
						_localctx = new EqualityExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1712;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1713;
						((EqualityExpressionContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==OP_EQ || _la==OP_NE) ) {
							((EqualityExpressionContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 1714; expression(11);
						}
						break;
					case 6:
						{
						_localctx = new AndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1715;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1716; Match(AMP);
						State = 1717; expression(10);
						}
						break;
					case 7:
						{
						_localctx = new XorExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1718;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1719; Match(CARET);
						State = 1720; expression(9);
						}
						break;
					case 8:
						{
						_localctx = new OrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1721;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1722; Match(BITWISE_OR);
						State = 1723; expression(8);
						}
						break;
					case 9:
						{
						_localctx = new ConditionalAndExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1724;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1725; Match(OP_AND);
						State = 1726; expression(7);
						}
						break;
					case 10:
						{
						_localctx = new ConditionalOrExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1727;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1728; Match(OP_OR);
						State = 1729; expression(6);
						}
						break;
					case 11:
						{
						_localctx = new NullCoalescingExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1730;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 1731; Match(OP_COALESCING);
						State = 1732; expression(4);
						}
						break;
					case 12:
						{
						_localctx = new ConditionalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1733;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1734; Match(INTERR);
						State = 1735; expression(0);
						State = 1736; Match(COLON);
						State = 1737; expression(3);
						}
						break;
					}
					} 
				}
				State = 1743;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,104,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Non_assignment_expressionContext : ParserRuleContext {
		public Non_assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_assignment_expression; } }
	 
		public Non_assignment_expressionContext() { }
		public virtual void CopyFrom(Non_assignment_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExpressionContext : Non_assignment_expressionContext {
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public UnaryExpressionContext(Non_assignment_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class QueryExpressionContext : Non_assignment_expressionContext {
		public Query_expressionContext query_expression() {
			return GetRuleContext<Query_expressionContext>(0);
		}
		public QueryExpressionContext(Non_assignment_expressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQueryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_assignment_expressionContext non_assignment_expression() {
		Non_assignment_expressionContext _localctx = new Non_assignment_expressionContext(Context, State);
		EnterRule(_localctx, 222, RULE_non_assignment_expression);
		try {
			State = 1746;
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				_localctx = new QueryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1744; query_expression();
				}
				break;
			case 2:
				_localctx = new UnaryExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1745; unary_expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Constant_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstant_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstant_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_expressionContext constant_expression() {
		Constant_expressionContext _localctx = new Constant_expressionContext(Context, State);
		EnterRule(_localctx, 224, RULE_constant_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1748; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Labeled_statementContext labeled_statement() {
			return GetRuleContext<Labeled_statementContext>(0);
		}
		public Declaration_statementContext declaration_statement() {
			return GetRuleContext<Declaration_statementContext>(0);
		}
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 226, RULE_statement);
		try {
			State = 1753;
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1750; labeled_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1751; declaration_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1752; embedded_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public Embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEmbedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEmbedded_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statementContext embedded_statement() {
		Embedded_statementContext _localctx = new Embedded_statementContext(Context, State);
		EnterRule(_localctx, 228, RULE_embedded_statement);
		try {
			State = 1757;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1755; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1756; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Simple_embedded_statementContext : ParserRuleContext {
		public Empty_statementContext empty_statement() {
			return GetRuleContext<Empty_statementContext>(0);
		}
		public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		public Selection_statementContext selection_statement() {
			return GetRuleContext<Selection_statementContext>(0);
		}
		public Iteration_statementContext iteration_statement() {
			return GetRuleContext<Iteration_statementContext>(0);
		}
		public Jump_statementContext jump_statement() {
			return GetRuleContext<Jump_statementContext>(0);
		}
		public Try_statementContext try_statement() {
			return GetRuleContext<Try_statementContext>(0);
		}
		public Checked_statementContext checked_statement() {
			return GetRuleContext<Checked_statementContext>(0);
		}
		public Unchecked_statementContext unchecked_statement() {
			return GetRuleContext<Unchecked_statementContext>(0);
		}
		public Lock_statementContext lock_statement() {
			return GetRuleContext<Lock_statementContext>(0);
		}
		public Using_statementContext using_statement() {
			return GetRuleContext<Using_statementContext>(0);
		}
		public Yield_statementContext yield_statement() {
			return GetRuleContext<Yield_statementContext>(0);
		}
		public Embedded_statement_unsafeContext embedded_statement_unsafe() {
			return GetRuleContext<Embedded_statement_unsafeContext>(0);
		}
		public Simple_embedded_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simple_embedded_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSimple_embedded_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSimple_embedded_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimple_embedded_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Simple_embedded_statementContext simple_embedded_statement() {
		Simple_embedded_statementContext _localctx = new Simple_embedded_statementContext(Context, State);
		EnterRule(_localctx, 230, RULE_simple_embedded_statement);
		try {
			State = 1771;
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1759; empty_statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1760; expression_statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1761; selection_statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1762; iteration_statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1763; jump_statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1764; try_statement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1765; checked_statement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1766; unchecked_statement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1767; lock_statement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1768; using_statement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1769; yield_statement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1770; embedded_statement_unsafe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 232, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1773; Match(OPEN_BRACE);
			State = 1775;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BREAK - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (CONST - 10)) | (1L << (CONTINUE - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DO - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FIXED - 10)) | (1L << (FLOAT - 10)) | (1L << (FOR - 10)) | (1L << (FOREACH - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GOTO - 10)) | (1L << (GROUP - 10)) | (1L << (IF - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LOCK - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (RETURN - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (SWITCH - 78)) | (1L << (THIS - 78)) | (1L << (THROW - 78)) | (1L << (TRUE - 78)) | (1L << (TRY - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (UNSAFE - 78)) | (1L << (USHORT - 78)) | (1L << (USING - 78)) | (1L << (VOID - 78)) | (1L << (WHERE - 78)) | (1L << (WHILE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_BRACE - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (SEMICOLON - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1774; statement_list();
				}
			}

			State = 1777; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 234, RULE_statement_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1779; statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1782;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Empty_statementContext : ParserRuleContext {
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Empty_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_empty_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEmpty_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEmpty_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmpty_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Empty_statementContext empty_statement() {
		Empty_statementContext _localctx = new Empty_statementContext(Context, State);
		EnterRule(_localctx, 236, RULE_empty_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1784; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Labeled_statementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Labeled_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeled_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLabeled_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLabeled_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabeled_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Labeled_statementContext labeled_statement() {
		Labeled_statementContext _localctx = new Labeled_statementContext(Context, State);
		EnterRule(_localctx, 238, RULE_labeled_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1786; identifier();
			State = 1787; Match(COLON);
			State = 1788; statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Declaration_statementContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Local_constant_declarationContext local_constant_declaration() {
			return GetRuleContext<Local_constant_declarationContext>(0);
		}
		public Declaration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDeclaration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDeclaration_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Declaration_statementContext declaration_statement() {
		Declaration_statementContext _localctx = new Declaration_statementContext(Context, State);
		EnterRule(_localctx, 240, RULE_declaration_statement);
		try {
			State = 1796;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1790; local_variable_declaration();
				State = 1791; Match(SEMICOLON);
				}
				break;
			case CONST:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1793; local_constant_declaration();
				State = 1794; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declarationContext : ParserRuleContext {
		public Local_variable_typeContext t;
		public Local_variable_declaratorsContext local_variable_declarators() {
			return GetRuleContext<Local_variable_declaratorsContext>(0);
		}
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public Local_variable_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declarationContext local_variable_declaration() {
		Local_variable_declarationContext _localctx = new Local_variable_declarationContext(Context, State);
		EnterRule(_localctx, 242, RULE_local_variable_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1798; _localctx.t = local_variable_type();
			State = 1799; local_variable_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Local_variable_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_typeContext local_variable_type() {
		Local_variable_typeContext _localctx = new Local_variable_typeContext(Context, State);
		EnterRule(_localctx, 244, RULE_local_variable_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1801; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorsContext : ParserRuleContext {
		public Local_variable_declaratorContext[] local_variable_declarator() {
			return GetRuleContexts<Local_variable_declaratorContext>();
		}
		public Local_variable_declaratorContext local_variable_declarator(int i) {
			return GetRuleContext<Local_variable_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Local_variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorsContext local_variable_declarators() {
		Local_variable_declaratorsContext _localctx = new Local_variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 246, RULE_local_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1803; local_variable_declarator();
			State = 1808;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1804; Match(COMMA);
				State = 1805; local_variable_declarator();
				}
				}
				State = 1810;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Local_variable_initializerContext local_variable_initializer() {
			return GetRuleContext<Local_variable_initializerContext>(0);
		}
		public Local_variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_declaratorContext local_variable_declarator() {
		Local_variable_declaratorContext _localctx = new Local_variable_declaratorContext(Context, State);
		EnterRule(_localctx, 248, RULE_local_variable_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1811; identifier();
			State = 1814;
			_la = TokenStream.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1812; Match(ASSIGNMENT);
				State = 1813; local_variable_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
			return GetRuleContext<Local_variable_initializer_unsafeContext>(0);
		}
		public Local_variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializerContext local_variable_initializer() {
		Local_variable_initializerContext _localctx = new Local_variable_initializerContext(Context, State);
		EnterRule(_localctx, 250, RULE_local_variable_initializer);
		try {
			State = 1819;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1816; expression(0);
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1817; array_initializer();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1818; local_variable_initializer_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_constant_declarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharp4Parser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public Local_constant_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_constant_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_constant_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_constant_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_constant_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_constant_declarationContext local_constant_declaration() {
		Local_constant_declarationContext _localctx = new Local_constant_declarationContext(Context, State);
		EnterRule(_localctx, 252, RULE_local_constant_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1821; Match(CONST);
			State = 1822; type();
			State = 1823; constant_declarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		public Statement_expressionContext statement_expression() {
			return GetRuleContext<Statement_expressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 254, RULE_expression_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1825; statement_expression();
			State = 1826; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Statement_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatement_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatement_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_expressionContext statement_expression() {
		Statement_expressionContext _localctx = new Statement_expressionContext(Context, State);
		EnterRule(_localctx, 256, RULE_statement_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1828; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selection_statementContext : ParserRuleContext {
		public If_statementContext if_statement() {
			return GetRuleContext<If_statementContext>(0);
		}
		public Switch_statementContext switch_statement() {
			return GetRuleContext<Switch_statementContext>(0);
		}
		public Selection_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selection_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSelection_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSelection_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelection_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selection_statementContext selection_statement() {
		Selection_statementContext _localctx = new Selection_statementContext(Context, State);
		EnterRule(_localctx, 258, RULE_selection_statement);
		try {
			State = 1832;
			switch (TokenStream.La(1)) {
			case IF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1830; if_statement();
				}
				break;
			case SWITCH:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1831; switch_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_bodyContext : ParserRuleContext {
		public If_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_body; } }
	 
		public If_bodyContext() { }
		public virtual void CopyFrom(If_bodyContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfBodySingleContext : If_bodyContext {
		public Simple_embedded_statementContext simple_embedded_statement() {
			return GetRuleContext<Simple_embedded_statementContext>(0);
		}
		public IfBodySingleContext(If_bodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIfBodySingle(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIfBodySingle(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBodySingle(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfBodyBlockContext : If_bodyContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IfBodyBlockContext(If_bodyContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIfBodyBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIfBodyBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfBodyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_bodyContext if_body() {
		If_bodyContext _localctx = new If_bodyContext(Context, State);
		EnterRule(_localctx, 260, RULE_if_body);
		try {
			State = 1836;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				_localctx = new IfBodyBlockContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1834; block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				_localctx = new IfBodySingleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1835; simple_embedded_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statementContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(CSharp4Parser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public If_bodyContext[] if_body() {
			return GetRuleContexts<If_bodyContext>();
		}
		public If_bodyContext if_body(int i) {
			return GetRuleContext<If_bodyContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(CSharp4Parser.ELSE, 0); }
		public If_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIf_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIf_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statementContext if_statement() {
		If_statementContext _localctx = new If_statementContext(Context, State);
		EnterRule(_localctx, 262, RULE_if_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1838; Match(IF);
			State = 1839; Match(OPEN_PARENS);
			State = 1840; expression(0);
			State = 1841; Match(CLOSE_PARENS);
			State = 1842; if_body();
			State = 1845;
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				{
				State = 1843; Match(ELSE);
				State = 1844; if_body();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_statementContext : ParserRuleContext {
		public ITerminalNode SWITCH() { return GetToken(CSharp4Parser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Switch_blockContext switch_block() {
			return GetRuleContext<Switch_blockContext>(0);
		}
		public Switch_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_statementContext switch_statement() {
		Switch_statementContext _localctx = new Switch_statementContext(Context, State);
		EnterRule(_localctx, 264, RULE_switch_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1847; Match(SWITCH);
			State = 1848; Match(OPEN_PARENS);
			State = 1849; expression(0);
			State = 1850; Match(CLOSE_PARENS);
			State = 1851; switch_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_blockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Switch_sectionsContext switch_sections() {
			return GetRuleContext<Switch_sectionsContext>(0);
		}
		public Switch_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_blockContext switch_block() {
		Switch_blockContext _localctx = new Switch_blockContext(Context, State);
		EnterRule(_localctx, 266, RULE_switch_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1853; Match(OPEN_BRACE);
			State = 1855;
			_la = TokenStream.La(1);
			if (_la==CASE || _la==DEFAULT) {
				{
				State = 1854; switch_sections();
				}
			}

			State = 1857; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionsContext : ParserRuleContext {
		public Switch_sectionContext[] switch_section() {
			return GetRuleContexts<Switch_sectionContext>();
		}
		public Switch_sectionContext switch_section(int i) {
			return GetRuleContext<Switch_sectionContext>(i);
		}
		public Switch_sectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_sections; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_sections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_sections(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_sections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionsContext switch_sections() {
		Switch_sectionsContext _localctx = new Switch_sectionsContext(Context, State);
		EnterRule(_localctx, 268, RULE_switch_sections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1859; switch_section();
			State = 1863;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CASE || _la==DEFAULT) {
				{
				{
				State = 1860; switch_section();
				}
				}
				State = 1865;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_sectionContext : ParserRuleContext {
		public Switch_labelsContext switch_labels() {
			return GetRuleContext<Switch_labelsContext>(0);
		}
		public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Switch_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_sectionContext switch_section() {
		Switch_sectionContext _localctx = new Switch_sectionContext(Context, State);
		EnterRule(_localctx, 270, RULE_switch_section);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1866; switch_labels();
			State = 1867; statement_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelsContext : ParserRuleContext {
		public Switch_labelContext[] switch_label() {
			return GetRuleContexts<Switch_labelContext>();
		}
		public Switch_labelContext switch_label(int i) {
			return GetRuleContext<Switch_labelContext>(i);
		}
		public Switch_labelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_labels; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_labels(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_labels(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_labels(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelsContext switch_labels() {
		Switch_labelsContext _localctx = new Switch_labelsContext(Context, State);
		EnterRule(_localctx, 272, RULE_switch_labels);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1869; switch_label();
			State = 1873;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 1870; switch_label();
					}
					} 
				}
				State = 1875;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,120,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Switch_labelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(CSharp4Parser.CASE, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode COLONswitch() { return GetToken(CSharp4Parser.COLONswitch, 0); }
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Switch_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switch_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSwitch_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSwitch_label(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitch_label(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Switch_labelContext switch_label() {
		Switch_labelContext _localctx = new Switch_labelContext(Context, State);
		EnterRule(_localctx, 274, RULE_switch_label);
		try {
			State = 1882;
			switch (TokenStream.La(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1876; Match(CASE);
				State = 1877; constant_expression();
				State = 1878; Match(COLONswitch);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1880; Match(DEFAULT);
				State = 1881; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Iteration_statementContext : ParserRuleContext {
		public While_statementContext while_statement() {
			return GetRuleContext<While_statementContext>(0);
		}
		public Do_statementContext do_statement() {
			return GetRuleContext<Do_statementContext>(0);
		}
		public For_statementContext for_statement() {
			return GetRuleContext<For_statementContext>(0);
		}
		public Foreach_statementContext foreach_statement() {
			return GetRuleContext<Foreach_statementContext>(0);
		}
		public Iteration_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteration_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIteration_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIteration_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteration_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Iteration_statementContext iteration_statement() {
		Iteration_statementContext _localctx = new Iteration_statementContext(Context, State);
		EnterRule(_localctx, 276, RULE_iteration_statement);
		try {
			State = 1888;
			switch (TokenStream.La(1)) {
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1884; while_statement();
				}
				break;
			case DO:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1885; do_statement();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1886; for_statement();
				}
				break;
			case FOREACH:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1887; foreach_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class While_statementContext : ParserRuleContext {
		public ITerminalNode WHILE() { return GetToken(CSharp4Parser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public While_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_while_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterWhile_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitWhile_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhile_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public While_statementContext while_statement() {
		While_statementContext _localctx = new While_statementContext(Context, State);
		EnterRule(_localctx, 278, RULE_while_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1890; Match(WHILE);
			State = 1891; Match(OPEN_PARENS);
			State = 1892; expression(0);
			State = 1893; Match(CLOSE_PARENS);
			State = 1894; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Do_statementContext : ParserRuleContext {
		public ITerminalNode DO() { return GetToken(CSharp4Parser.DO, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(CSharp4Parser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Do_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_do_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDo_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDo_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDo_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Do_statementContext do_statement() {
		Do_statementContext _localctx = new Do_statementContext(Context, State);
		EnterRule(_localctx, 280, RULE_do_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1896; Match(DO);
			State = 1897; embedded_statement();
			State = 1898; Match(WHILE);
			State = 1899; Match(OPEN_PARENS);
			State = 1900; expression(0);
			State = 1901; Match(CLOSE_PARENS);
			State = 1902; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_statementContext : ParserRuleContext {
		public ITerminalNode FOR() { return GetToken(CSharp4Parser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(CSharp4Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharp4Parser.SEMICOLON, i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public For_initializerContext for_initializer() {
			return GetRuleContext<For_initializerContext>(0);
		}
		public For_conditionContext for_condition() {
			return GetRuleContext<For_conditionContext>(0);
		}
		public For_iteratorContext for_iterator() {
			return GetRuleContext<For_iteratorContext>(0);
		}
		public For_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFor_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFor_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_statementContext for_statement() {
		For_statementContext _localctx = new For_statementContext(Context, State);
		EnterRule(_localctx, 282, RULE_for_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904; Match(FOR);
			State = 1905; Match(OPEN_PARENS);
			State = 1907;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (VOID - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1906; for_initializer();
				}
			}

			State = 1909; Match(SEMICOLON);
			State = 1911;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1910; for_condition();
				}
			}

			State = 1913; Match(SEMICOLON);
			State = 1915;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1914; for_iterator();
				}
			}

			State = 1917; Match(CLOSE_PARENS);
			State = 1918; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_initializerContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public Statement_expression_listContext statement_expression_list() {
			return GetRuleContext<Statement_expression_listContext>(0);
		}
		public For_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_initializerContext for_initializer() {
		For_initializerContext _localctx = new For_initializerContext(Context, State);
		EnterRule(_localctx, 284, RULE_for_initializer);
		try {
			State = 1922;
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1920; local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1921; statement_expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_conditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public For_conditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFor_condition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFor_condition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_condition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_conditionContext for_condition() {
		For_conditionContext _localctx = new For_conditionContext(Context, State);
		EnterRule(_localctx, 286, RULE_for_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1924; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_iteratorContext : ParserRuleContext {
		public Statement_expression_listContext statement_expression_list() {
			return GetRuleContext<Statement_expression_listContext>(0);
		}
		public For_iteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_iterator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFor_iterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFor_iterator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFor_iterator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public For_iteratorContext for_iterator() {
		For_iteratorContext _localctx = new For_iteratorContext(Context, State);
		EnterRule(_localctx, 288, RULE_for_iterator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1926; statement_expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_expression_listContext : ParserRuleContext {
		public Statement_expressionContext[] statement_expression() {
			return GetRuleContexts<Statement_expressionContext>();
		}
		public Statement_expressionContext statement_expression(int i) {
			return GetRuleContext<Statement_expressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Statement_expression_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_expression_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatement_expression_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatement_expression_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_expression_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_expression_listContext statement_expression_list() {
		Statement_expression_listContext _localctx = new Statement_expression_listContext(Context, State);
		EnterRule(_localctx, 290, RULE_statement_expression_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1928; statement_expression();
			State = 1933;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 1929; Match(COMMA);
				State = 1930; statement_expression();
				}
				}
				State = 1935;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Foreach_statementContext : ParserRuleContext {
		public ITerminalNode FOREACH() { return GetToken(CSharp4Parser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Local_variable_typeContext local_variable_type() {
			return GetRuleContext<Local_variable_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Foreach_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_foreach_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterForeach_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitForeach_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForeach_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Foreach_statementContext foreach_statement() {
		Foreach_statementContext _localctx = new Foreach_statementContext(Context, State);
		EnterRule(_localctx, 292, RULE_foreach_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1936; Match(FOREACH);
			State = 1937; Match(OPEN_PARENS);
			State = 1938; local_variable_type();
			State = 1939; identifier();
			State = 1940; Match(IN);
			State = 1941; expression(0);
			State = 1942; Match(CLOSE_PARENS);
			State = 1943; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jump_statementContext : ParserRuleContext {
		public Break_statementContext break_statement() {
			return GetRuleContext<Break_statementContext>(0);
		}
		public Continue_statementContext continue_statement() {
			return GetRuleContext<Continue_statementContext>(0);
		}
		public Goto_statementContext goto_statement() {
			return GetRuleContext<Goto_statementContext>(0);
		}
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public Throw_statementContext throw_statement() {
			return GetRuleContext<Throw_statementContext>(0);
		}
		public Jump_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jump_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterJump_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitJump_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJump_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jump_statementContext jump_statement() {
		Jump_statementContext _localctx = new Jump_statementContext(Context, State);
		EnterRule(_localctx, 294, RULE_jump_statement);
		try {
			State = 1950;
			switch (TokenStream.La(1)) {
			case BREAK:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1945; break_statement();
				}
				break;
			case CONTINUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1946; continue_statement();
				}
				break;
			case GOTO:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1947; goto_statement();
				}
				break;
			case RETURN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1948; return_statement();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1949; throw_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Break_statementContext : ParserRuleContext {
		public ITerminalNode BREAK() { return GetToken(CSharp4Parser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Break_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBreak_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBreak_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Break_statementContext break_statement() {
		Break_statementContext _localctx = new Break_statementContext(Context, State);
		EnterRule(_localctx, 296, RULE_break_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1952; Match(BREAK);
			State = 1953; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Continue_statementContext : ParserRuleContext {
		public ITerminalNode CONTINUE() { return GetToken(CSharp4Parser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Continue_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterContinue_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitContinue_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Continue_statementContext continue_statement() {
		Continue_statementContext _localctx = new Continue_statementContext(Context, State);
		EnterRule(_localctx, 298, RULE_continue_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1955; Match(CONTINUE);
			State = 1956; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Goto_statementContext : ParserRuleContext {
		public ITerminalNode GOTO() { return GetToken(CSharp4Parser.GOTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ITerminalNode CASE() { return GetToken(CSharp4Parser.CASE, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public Goto_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_goto_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGoto_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGoto_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGoto_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Goto_statementContext goto_statement() {
		Goto_statementContext _localctx = new Goto_statementContext(Context, State);
		EnterRule(_localctx, 300, RULE_goto_statement);
		try {
			State = 1970;
			switch ( Interpreter.AdaptivePredict(TokenStream,129,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1958; Match(GOTO);
				State = 1959; identifier();
				State = 1960; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1962; Match(GOTO);
				State = 1963; Match(CASE);
				State = 1964; constant_expression();
				State = 1965; Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1967; Match(GOTO);
				State = 1968; Match(DEFAULT);
				State = 1969; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ITerminalNode RETURN() { return GetToken(CSharp4Parser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterReturn_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitReturn_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 302, RULE_return_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1972; Match(RETURN);
			State = 1974;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1973; expression(0);
				}
			}

			State = 1976; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Throw_statementContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(CSharp4Parser.THROW, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Throw_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throw_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterThrow_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitThrow_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitThrow_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Throw_statementContext throw_statement() {
		Throw_statementContext _localctx = new Throw_statementContext(Context, State);
		EnterRule(_localctx, 304, RULE_throw_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1978; Match(THROW);
			State = 1980;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 1979; expression(0);
				}
			}

			State = 1982; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Try_statementContext : ParserRuleContext {
		public ITerminalNode TRY() { return GetToken(CSharp4Parser.TRY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Catch_clausesContext catch_clauses() {
			return GetRuleContext<Catch_clausesContext>(0);
		}
		public Finally_clauseContext finally_clause() {
			return GetRuleContext<Finally_clauseContext>(0);
		}
		public Try_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_try_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterTry_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitTry_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTry_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Try_statementContext try_statement() {
		Try_statementContext _localctx = new Try_statementContext(Context, State);
		EnterRule(_localctx, 306, RULE_try_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1984; Match(TRY);
			State = 1985; block();
			State = 1987;
			_la = TokenStream.La(1);
			if (_la==CATCH) {
				{
				State = 1986; catch_clauses();
				}
			}

			State = 1990;
			_la = TokenStream.La(1);
			if (_la==FINALLY) {
				{
				State = 1989; finally_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Catch_clausesContext : ParserRuleContext {
		public Specific_catch_clausesContext specific_catch_clauses() {
			return GetRuleContext<Specific_catch_clausesContext>(0);
		}
		public General_catch_clauseContext general_catch_clause() {
			return GetRuleContext<General_catch_clauseContext>(0);
		}
		public Catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCatch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCatch_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Catch_clausesContext catch_clauses() {
		Catch_clausesContext _localctx = new Catch_clausesContext(Context, State);
		EnterRule(_localctx, 308, RULE_catch_clauses);
		int _la;
		try {
			State = 1997;
			switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1992; specific_catch_clauses();
				State = 1994;
				_la = TokenStream.La(1);
				if (_la==CATCH) {
					{
					State = 1993; general_catch_clause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1996; general_catch_clause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clausesContext : ParserRuleContext {
		public Specific_catch_clauseContext[] specific_catch_clause() {
			return GetRuleContexts<Specific_catch_clauseContext>();
		}
		public Specific_catch_clauseContext specific_catch_clause(int i) {
			return GetRuleContext<Specific_catch_clauseContext>(i);
		}
		public Specific_catch_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clausesContext specific_catch_clauses() {
		Specific_catch_clausesContext _localctx = new Specific_catch_clausesContext(Context, State);
		EnterRule(_localctx, 310, RULE_specific_catch_clauses);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1999; specific_catch_clause();
			State = 2003;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2000; specific_catch_clause();
					}
					} 
				}
				State = 2005;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,136,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharp4Parser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Specific_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSpecific_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSpecific_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_catch_clauseContext specific_catch_clause() {
		Specific_catch_clauseContext _localctx = new Specific_catch_clauseContext(Context, State);
		EnterRule(_localctx, 312, RULE_specific_catch_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2006; Match(CATCH);
			State = 2007; Match(OPEN_PARENS);
			State = 2008; class_type();
			State = 2010;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
				{
				State = 2009; identifier();
				}
			}

			State = 2012; Match(CLOSE_PARENS);
			State = 2013; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_catch_clauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharp4Parser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public General_catch_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_catch_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGeneral_catch_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGeneral_catch_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_catch_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_catch_clauseContext general_catch_clause() {
		General_catch_clauseContext _localctx = new General_catch_clauseContext(Context, State);
		EnterRule(_localctx, 314, RULE_general_catch_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2015; Match(CATCH);
			State = 2016; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finally_clauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(CSharp4Parser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Finally_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finally_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFinally_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFinally_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinally_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finally_clauseContext finally_clause() {
		Finally_clauseContext _localctx = new Finally_clauseContext(Context, State);
		EnterRule(_localctx, 316, RULE_finally_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2018; Match(FINALLY);
			State = 2019; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Checked_statementContext : ParserRuleContext {
		public ITerminalNode CHECKED() { return GetToken(CSharp4Parser.CHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Checked_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checked_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterChecked_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitChecked_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChecked_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Checked_statementContext checked_statement() {
		Checked_statementContext _localctx = new Checked_statementContext(Context, State);
		EnterRule(_localctx, 318, RULE_checked_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2021; Match(CHECKED);
			State = 2022; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unchecked_statementContext : ParserRuleContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharp4Parser.UNCHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Unchecked_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unchecked_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnchecked_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnchecked_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnchecked_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unchecked_statementContext unchecked_statement() {
		Unchecked_statementContext _localctx = new Unchecked_statementContext(Context, State);
		EnterRule(_localctx, 320, RULE_unchecked_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2024; Match(UNCHECKED);
			State = 2025; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Lock_statementContext : ParserRuleContext {
		public ITerminalNode LOCK() { return GetToken(CSharp4Parser.LOCK, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Lock_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lock_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLock_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLock_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLock_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Lock_statementContext lock_statement() {
		Lock_statementContext _localctx = new Lock_statementContext(Context, State);
		EnterRule(_localctx, 322, RULE_lock_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2027; Match(LOCK);
			State = 2028; Match(OPEN_PARENS);
			State = 2029; expression(0);
			State = 2030; Match(CLOSE_PARENS);
			State = 2031; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_statementContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Resource_acquisitionContext resource_acquisition() {
			return GetRuleContext<Resource_acquisitionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Using_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_statementContext using_statement() {
		Using_statementContext _localctx = new Using_statementContext(Context, State);
		EnterRule(_localctx, 324, RULE_using_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2033; Match(USING);
			State = 2034; Match(OPEN_PARENS);
			State = 2035; resource_acquisition();
			State = 2036; Match(CLOSE_PARENS);
			State = 2037; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Resource_acquisitionContext : ParserRuleContext {
		public Local_variable_declarationContext local_variable_declaration() {
			return GetRuleContext<Local_variable_declarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Resource_acquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource_acquisition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterResource_acquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitResource_acquisition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource_acquisition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Resource_acquisitionContext resource_acquisition() {
		Resource_acquisitionContext _localctx = new Resource_acquisitionContext(Context, State);
		EnterRule(_localctx, 326, RULE_resource_acquisition);
		try {
			State = 2041;
			switch ( Interpreter.AdaptivePredict(TokenStream,138,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2039; local_variable_declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2040; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_statementContext : ParserRuleContext {
		public Yield_contextual_keywordContext yield_contextual_keyword() {
			return GetRuleContext<Yield_contextual_keywordContext>(0);
		}
		public ITerminalNode RETURN() { return GetToken(CSharp4Parser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ITerminalNode BREAK() { return GetToken(CSharp4Parser.BREAK, 0); }
		public Yield_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterYield_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitYield_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_statementContext yield_statement() {
		Yield_statementContext _localctx = new Yield_statementContext(Context, State);
		EnterRule(_localctx, 328, RULE_yield_statement);
		try {
			State = 2052;
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2043; yield_contextual_keyword();
				State = 2044; Match(RETURN);
				State = 2045; expression(0);
				State = 2046; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2048; yield_contextual_keyword();
				State = 2049; Match(BREAK);
				State = 2050; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compilation_unitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CSharp4Parser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(CSharp4Parser.BYTE_ORDER_MARK, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilation_unit; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCompilation_unit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCompilation_unit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilation_unit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compilation_unitContext compilation_unit() {
		Compilation_unitContext _localctx = new Compilation_unitContext(Context, State);
		EnterRule(_localctx, 330, RULE_compilation_unit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2055;
			_la = TokenStream.La(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 2054; Match(BYTE_ORDER_MARK);
				}
			}

			State = 2058;
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				{
				State = 2057; extern_alias_directives();
				}
				break;
			}
			State = 2061;
			_la = TokenStream.La(1);
			if (_la==USING) {
				{
				State = 2060; using_directives();
				}
			}

			State = 2066;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2063; global_attribute_section();
					}
					} 
				}
				State = 2068;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,143,Context);
			}
			State = 2070;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (STRUCT - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)) | (1L << (OPEN_BRACKET - 70)))) != 0)) {
				{
				State = 2069; namespace_member_declarations();
				}
			}

			State = 2072; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declarationContext : ParserRuleContext {
		public Qualified_identifierContext qi;
		public ITerminalNode NAMESPACE() { return GetToken(CSharp4Parser.NAMESPACE, 0); }
		public Namespace_bodyContext namespace_body() {
			return GetRuleContext<Namespace_bodyContext>(0);
		}
		public Qualified_identifierContext qualified_identifier() {
			return GetRuleContext<Qualified_identifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Namespace_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declarationContext namespace_declaration() {
		Namespace_declarationContext _localctx = new Namespace_declarationContext(Context, State);
		EnterRule(_localctx, 332, RULE_namespace_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2074; Match(NAMESPACE);
			State = 2075; _localctx.qi = qualified_identifier();
			State = 2076; namespace_body();
			State = 2078;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2077; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_identifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(CSharp4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharp4Parser.DOT, i);
		}
		public Qualified_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQualified_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQualified_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_identifierContext qualified_identifier() {
		Qualified_identifierContext _localctx = new Qualified_identifierContext(Context, State);
		EnterRule(_localctx, 334, RULE_qualified_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2080; identifier();
			State = 2085;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 2081; Match(DOT);
				State = 2082; identifier();
				}
				}
				State = 2087;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Extern_alias_directivesContext extern_alias_directives() {
			return GetRuleContext<Extern_alias_directivesContext>(0);
		}
		public Using_directivesContext using_directives() {
			return GetRuleContext<Using_directivesContext>(0);
		}
		public Namespace_member_declarationsContext namespace_member_declarations() {
			return GetRuleContext<Namespace_member_declarationsContext>(0);
		}
		public Namespace_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_bodyContext namespace_body() {
		Namespace_bodyContext _localctx = new Namespace_bodyContext(Context, State);
		EnterRule(_localctx, 336, RULE_namespace_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2088; Match(OPEN_BRACE);
			State = 2090;
			switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
			case 1:
				{
				State = 2089; extern_alias_directives();
				}
				break;
			}
			State = 2093;
			_la = TokenStream.La(1);
			if (_la==USING) {
				{
				State = 2092; using_directives();
				}
			}

			State = 2096;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (STRUCT - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)) | (1L << (OPEN_BRACKET - 70)))) != 0)) {
				{
				State = 2095; namespace_member_declarations();
				}
			}

			State = 2098; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directivesContext : ParserRuleContext {
		public Extern_alias_directiveContext[] extern_alias_directive() {
			return GetRuleContexts<Extern_alias_directiveContext>();
		}
		public Extern_alias_directiveContext extern_alias_directive(int i) {
			return GetRuleContext<Extern_alias_directiveContext>(i);
		}
		public Extern_alias_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExtern_alias_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExtern_alias_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directivesContext extern_alias_directives() {
		Extern_alias_directivesContext _localctx = new Extern_alias_directivesContext(Context, State);
		EnterRule(_localctx, 338, RULE_extern_alias_directives);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2101;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2100; extern_alias_directive();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2103;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,150,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Extern_alias_directiveContext : ParserRuleContext {
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Alias_contextual_keywordContext alias_contextual_keyword() {
			return GetRuleContext<Alias_contextual_keywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Extern_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extern_alias_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterExtern_alias_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitExtern_alias_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExtern_alias_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Extern_alias_directiveContext extern_alias_directive() {
		Extern_alias_directiveContext _localctx = new Extern_alias_directiveContext(Context, State);
		EnterRule(_localctx, 340, RULE_extern_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2105; Match(EXTERN);
			State = 2106; alias_contextual_keyword();
			State = 2107; identifier();
			State = 2108; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directivesContext : ParserRuleContext {
		public Using_directiveContext[] using_directive() {
			return GetRuleContexts<Using_directiveContext>();
		}
		public Using_directiveContext using_directive(int i) {
			return GetRuleContext<Using_directiveContext>(i);
		}
		public Using_directivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directives; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_directives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_directives(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_directives(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directivesContext using_directives() {
		Using_directivesContext _localctx = new Using_directivesContext(Context, State);
		EnterRule(_localctx, 342, RULE_using_directives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2111;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2110; using_directive();
				}
				}
				State = 2113;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==USING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_directiveContext : ParserRuleContext {
		public Using_alias_directiveContext using_alias_directive() {
			return GetRuleContext<Using_alias_directiveContext>(0);
		}
		public Using_namespace_directiveContext using_namespace_directive() {
			return GetRuleContext<Using_namespace_directiveContext>(0);
		}
		public Using_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_directiveContext using_directive() {
		Using_directiveContext _localctx = new Using_directiveContext(Context, State);
		EnterRule(_localctx, 344, RULE_using_directive);
		try {
			State = 2117;
			switch ( Interpreter.AdaptivePredict(TokenStream,152,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2115; using_alias_directive();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2116; using_namespace_directive();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_alias_directiveContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Namespace_or_type_nameContext namespace_or_type_name() {
			return GetRuleContext<Namespace_or_type_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Using_alias_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_alias_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_alias_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_alias_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_alias_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_alias_directiveContext using_alias_directive() {
		Using_alias_directiveContext _localctx = new Using_alias_directiveContext(Context, State);
		EnterRule(_localctx, 346, RULE_using_alias_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2119; Match(USING);
			State = 2120; identifier();
			State = 2121; Match(ASSIGNMENT);
			State = 2122; namespace_or_type_name();
			State = 2123; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Using_namespace_directiveContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public Namespace_nameContext namespace_name() {
			return GetRuleContext<Namespace_nameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Using_namespace_directiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using_namespace_directive; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUsing_namespace_directive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUsing_namespace_directive(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing_namespace_directive(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Using_namespace_directiveContext using_namespace_directive() {
		Using_namespace_directiveContext _localctx = new Using_namespace_directiveContext(Context, State);
		EnterRule(_localctx, 348, RULE_using_namespace_directive);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2125; Match(USING);
			State = 2126; namespace_name();
			State = 2127; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationsContext : ParserRuleContext {
		public Namespace_member_declarationContext[] namespace_member_declaration() {
			return GetRuleContexts<Namespace_member_declarationContext>();
		}
		public Namespace_member_declarationContext namespace_member_declaration(int i) {
			return GetRuleContext<Namespace_member_declarationContext>(i);
		}
		public Namespace_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationsContext namespace_member_declarations() {
		Namespace_member_declarationsContext _localctx = new Namespace_member_declarationsContext(Context, State);
		EnterRule(_localctx, 350, RULE_namespace_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2130;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2129; namespace_member_declaration();
				}
				}
				State = 2132;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (STRUCT - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)) | (1L << (OPEN_BRACKET - 70)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_member_declarationContext : ParserRuleContext {
		public Namespace_declarationContext namespace_declaration() {
			return GetRuleContext<Namespace_declarationContext>(0);
		}
		public Type_declarationContext type_declaration() {
			return GetRuleContext<Type_declarationContext>(0);
		}
		public Namespace_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamespace_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamespace_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamespace_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_member_declarationContext namespace_member_declaration() {
		Namespace_member_declarationContext _localctx = new Namespace_member_declarationContext(Context, State);
		EnterRule(_localctx, 352, RULE_namespace_member_declaration);
		try {
			State = 2136;
			switch (TokenStream.La(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2134; namespace_declaration();
				}
				break;
			case ABSTRACT:
			case CLASS:
			case DELEGATE:
			case ENUM:
			case EXTERN:
			case INTERFACE:
			case INTERNAL:
			case NEW:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case SEALED:
			case STATIC:
			case STRUCT:
			case UNSAFE:
			case VIRTUAL:
			case VOLATILE:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2135; type_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declarationContext : ParserRuleContext {
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Type_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_declarationContext type_declaration() {
		Type_declarationContext _localctx = new Type_declarationContext(Context, State);
		EnterRule(_localctx, 354, RULE_type_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2139;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2138; attributes();
				}
			}

			State = 2142;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PARTIAL - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (READONLY - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)) | (1L << (VOLATILE - 70)))) != 0)) {
				{
				State = 2141; all_member_modifiers();
				}
			}

			State = 2149;
			switch (TokenStream.La(1)) {
			case CLASS:
				{
				State = 2144; class_definition();
				}
				break;
			case STRUCT:
				{
				State = 2145; struct_definition();
				}
				break;
			case INTERFACE:
				{
				State = 2146; interface_definition();
				}
				break;
			case ENUM:
				{
				State = 2147; enum_definition();
				}
				break;
			case DELEGATE:
				{
				State = 2148; delegate_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qualified_alias_memberContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(CSharp4Parser.DOUBLE_COLON, 0); }
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Qualified_alias_memberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualified_alias_member; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterQualified_alias_member(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitQualified_alias_member(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualified_alias_member(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qualified_alias_memberContext qualified_alias_member() {
		Qualified_alias_memberContext _localctx = new Qualified_alias_memberContext(Context, State);
		EnterRule(_localctx, 356, RULE_qualified_alias_member);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2151; identifier();
			State = 2152; Match(DOUBLE_COLON);
			State = 2153; identifier();
			State = 2154; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_declarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Class_modifiersContext class_modifiers() {
			return GetRuleContext<Class_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Class_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_declarationContext class_declaration() {
		Class_declarationContext _localctx = new Class_declarationContext(Context, State);
		EnterRule(_localctx, 358, RULE_class_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2157;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2156; attributes();
				}
			}

			State = 2160;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (PUBLIC - 73)) | (1L << (SEALED - 73)) | (1L << (STATIC - 73)) | (1L << (UNSAFE - 73)))) != 0)) {
				{
				State = 2159; class_modifiers();
				}
			}

			State = 2163;
			_la = TokenStream.La(1);
			if (_la==PARTIAL) {
				{
				State = 2162; partial_contextual_keyword();
				}
			}

			State = 2165; Match(CLASS);
			State = 2166; identifier();
			State = 2168;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 2167; type_parameter_list();
				}
			}

			State = 2171;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 2170; class_base();
				}
			}

			State = 2174;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 2173; type_parameter_constraints_clauses();
				}
			}

			State = 2176; class_body();
			State = 2178;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2177; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifiersContext : ParserRuleContext {
		public Class_modifierContext[] class_modifier() {
			return GetRuleContexts<Class_modifierContext>();
		}
		public Class_modifierContext class_modifier(int i) {
			return GetRuleContext<Class_modifierContext>(i);
		}
		public Class_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifiersContext class_modifiers() {
		Class_modifiersContext _localctx = new Class_modifiersContext(Context, State);
		EnterRule(_localctx, 360, RULE_class_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2180; class_modifier();
			State = 2184;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (PUBLIC - 73)) | (1L << (SEALED - 73)) | (1L << (STATIC - 73)) | (1L << (UNSAFE - 73)))) != 0)) {
				{
				{
				State = 2181; class_modifier();
				}
				}
				State = 2186;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public Class_modifier_unsafeContext class_modifier_unsafe() {
			return GetRuleContext<Class_modifier_unsafeContext>(0);
		}
		public Class_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifierContext class_modifier() {
		Class_modifierContext _localctx = new Class_modifierContext(Context, State);
		EnterRule(_localctx, 362, RULE_class_modifier);
		try {
			State = 2196;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2187; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2188; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2189; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2190; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2191; Match(PRIVATE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2192; Match(ABSTRACT);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2193; Match(SEALED);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2194; Match(STATIC);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2195; class_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public Type_parametersContext type_parameters() {
			return GetRuleContext<Type_parametersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_listContext type_parameter_list() {
		Type_parameter_listContext _localctx = new Type_parameter_listContext(Context, State);
		EnterRule(_localctx, 364, RULE_type_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2198; Match(LT);
			State = 2199; type_parameters();
			State = 2200; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parametersContext : ParserRuleContext {
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Type_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parametersContext type_parameters() {
		Type_parametersContext _localctx = new Type_parametersContext(Context, State);
		EnterRule(_localctx, 366, RULE_type_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2203;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2202; attributes();
				}
			}

			State = 2205; type_parameter();
			State = 2213;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2206; Match(COMMA);
				State = 2208;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2207; attributes();
					}
				}

				State = 2210; type_parameter();
				}
				}
				State = 2215;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameterContext type_parameter() {
		Type_parameterContext _localctx = new Type_parameterContext(Context, State);
		EnterRule(_localctx, 368, RULE_type_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2216; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Interface_typeContext[] interface_type() {
			return GetRuleContexts<Interface_typeContext>();
		}
		public Interface_typeContext interface_type(int i) {
			return GetRuleContext<Interface_typeContext>(i);
		}
		public Class_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_baseContext class_base() {
		Class_baseContext _localctx = new Class_baseContext(Context, State);
		EnterRule(_localctx, 370, RULE_class_base);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2218; Match(COLON);
			State = 2219; class_type();
			State = 2224;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2220; Match(COMMA);
				State = 2221; interface_type();
				}
				}
				State = 2226;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_type_listContext : ParserRuleContext {
		public Interface_typeContext[] interface_type() {
			return GetRuleContexts<Interface_typeContext>();
		}
		public Interface_typeContext interface_type(int i) {
			return GetRuleContext<Interface_typeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Interface_type_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_type_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_type_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_type_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_type_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_type_listContext interface_type_list() {
		Interface_type_listContext _localctx = new Interface_type_listContext(Context, State);
		EnterRule(_localctx, 372, RULE_interface_type_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2227; interface_type();
			State = 2232;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2228; Match(COMMA);
				State = 2229; interface_type();
				}
				}
				State = 2234;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clausesContext : ParserRuleContext {
		public Type_parameter_constraints_clauseContext[] type_parameter_constraints_clause() {
			return GetRuleContexts<Type_parameter_constraints_clauseContext>();
		}
		public Type_parameter_constraints_clauseContext type_parameter_constraints_clause(int i) {
			return GetRuleContext<Type_parameter_constraints_clauseContext>(i);
		}
		public Type_parameter_constraints_clausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clauses; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clauses(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clauses(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
		Type_parameter_constraints_clausesContext _localctx = new Type_parameter_constraints_clausesContext(Context, State);
		EnterRule(_localctx, 374, RULE_type_parameter_constraints_clauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2235; type_parameter_constraints_clause();
			State = 2239;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==WHERE) {
				{
				{
				State = 2236; type_parameter_constraints_clause();
				}
				}
				State = 2241;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraints_clauseContext : ParserRuleContext {
		public Where_contextual_keywordContext where_contextual_keyword() {
			return GetRuleContext<Where_contextual_keywordContext>(0);
		}
		public Type_parameterContext type_parameter() {
			return GetRuleContext<Type_parameterContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Type_parameter_constraintsContext type_parameter_constraints() {
			return GetRuleContext<Type_parameter_constraintsContext>(0);
		}
		public Type_parameter_constraints_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints_clause; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints_clause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints_clause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraints_clauseContext type_parameter_constraints_clause() {
		Type_parameter_constraints_clauseContext _localctx = new Type_parameter_constraints_clauseContext(Context, State);
		EnterRule(_localctx, 376, RULE_type_parameter_constraints_clause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2242; where_contextual_keyword();
			State = 2243; type_parameter();
			State = 2244; Match(COLON);
			State = 2245; type_parameter_constraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_parameter_constraintsContext : ParserRuleContext {
		public Constructor_constraintContext constructor_constraint() {
			return GetRuleContext<Constructor_constraintContext>(0);
		}
		public Primary_constraintContext primary_constraint() {
			return GetRuleContext<Primary_constraintContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Secondary_constraintsContext secondary_constraints() {
			return GetRuleContext<Secondary_constraintsContext>(0);
		}
		public Type_parameter_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_parameter_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_parameter_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_parameter_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_parameter_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_parameter_constraintsContext type_parameter_constraints() {
		Type_parameter_constraintsContext _localctx = new Type_parameter_constraintsContext(Context, State);
		EnterRule(_localctx, 378, RULE_type_parameter_constraints);
		int _la;
		try {
			State = 2257;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2247; constructor_constraint();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case CLASS:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case STRUCT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2248; primary_constraint();
				State = 2251;
				switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
				case 1:
					{
					State = 2249; Match(COMMA);
					State = 2250; secondary_constraints();
					}
					break;
				}
				State = 2255;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2253; Match(COMMA);
					State = 2254; constructor_constraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_constraintContext : ParserRuleContext {
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public Primary_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimary_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimary_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_constraintContext primary_constraint() {
		Primary_constraintContext _localctx = new Primary_constraintContext(Context, State);
		EnterRule(_localctx, 380, RULE_primary_constraint);
		try {
			State = 2262;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2259; class_type();
				}
				break;
			case CLASS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2260; Match(CLASS);
				}
				break;
			case STRUCT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2261; Match(STRUCT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Secondary_constraintsContext : ParserRuleContext {
		public Interface_typeContext[] interface_type() {
			return GetRuleContexts<Interface_typeContext>();
		}
		public Interface_typeContext interface_type(int i) {
			return GetRuleContext<Interface_typeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Secondary_constraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondary_constraints; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSecondary_constraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSecondary_constraints(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSecondary_constraints(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Secondary_constraintsContext secondary_constraints() {
		Secondary_constraintsContext _localctx = new Secondary_constraintsContext(Context, State);
		EnterRule(_localctx, 382, RULE_secondary_constraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2264; interface_type();
			State = 2269;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2265; Match(COMMA);
					State = 2266; interface_type();
					}
					} 
				}
				State = 2271;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,177,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_constraintContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Constructor_constraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_constraint; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_constraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_constraint(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_constraint(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_constraintContext constructor_constraint() {
		Constructor_constraintContext _localctx = new Constructor_constraintContext(Context, State);
		EnterRule(_localctx, 384, RULE_constructor_constraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2272; Match(NEW);
			State = 2273; Match(OPEN_PARENS);
			State = 2274; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Class_member_declarationsContext class_member_declarations() {
			return GetRuleContext<Class_member_declarationsContext>(0);
		}
		public Class_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_bodyContext class_body() {
		Class_bodyContext _localctx = new Class_bodyContext(Context, State);
		EnterRule(_localctx, 386, RULE_class_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2276; Match(OPEN_BRACE);
			State = 2278;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pp_directive) | (1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE) {
				{
				State = 2277; class_member_declarations();
				}
			}

			State = 2280; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationsContext : ParserRuleContext {
		public Class_member_declarationContext[] class_member_declaration() {
			return GetRuleContexts<Class_member_declarationContext>();
		}
		public Class_member_declarationContext class_member_declaration(int i) {
			return GetRuleContext<Class_member_declarationContext>(i);
		}
		public Class_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationsContext class_member_declarations() {
		Class_member_declarationsContext _localctx = new Class_member_declarationsContext(Context, State);
		EnterRule(_localctx, 388, RULE_class_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2283;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2282; class_member_declaration();
				}
				}
				State = 2285;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Pp_directive) | (1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return GetRuleContext<Destructor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public ITerminalNode Pp_directive() { return GetToken(CSharp4Parser.Pp_directive, 0); }
		public Class_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_member_declarationContext class_member_declaration() {
		Class_member_declarationContext _localctx = new Class_member_declarationContext(Context, State);
		EnterRule(_localctx, 390, RULE_class_member_declaration);
		int _la;
		try {
			State = 2303;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case OBJECT:
			case ON:
			case ORDERBY:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REMOVE:
			case SBYTE:
			case SEALED:
			case SELECT:
			case SET:
			case SHORT:
			case STATIC:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case UNSAFE:
			case USHORT:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_BRACKET:
			case TILDE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2288;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2287; attributes();
					}
				}

				State = 2291;
				switch ( Interpreter.AdaptivePredict(TokenStream,181,Context) ) {
				case 1:
					{
					State = 2290; all_member_modifiers();
					}
					break;
				}
				State = 2300;
				switch (TokenStream.La(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case CLASS:
				case CONST:
				case DECIMAL:
				case DELEGATE:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case ENUM:
				case EQUALS:
				case EVENT:
				case EXPLICIT:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case IMPLICIT:
				case INT:
				case INTERFACE:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case STRUCT:
				case UINT:
				case ULONG:
				case USHORT:
				case VOID:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 2293; common_member_declaration();
					}
					break;
				case TILDE:
					{
					State = 2294; Match(TILDE);
					State = 2295; identifier();
					State = 2296; Match(OPEN_PARENS);
					State = 2297; Match(CLOSE_PARENS);
					State = 2298; destructor_body();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case Pp_directive:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2302; Match(Pp_directive);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifiersContext : ParserRuleContext {
		public All_member_modifierContext m;
		public All_member_modifierContext[] all_member_modifier() {
			return GetRuleContexts<All_member_modifierContext>();
		}
		public All_member_modifierContext all_member_modifier(int i) {
			return GetRuleContext<All_member_modifierContext>(i);
		}
		public All_member_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAll_member_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAll_member_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifiersContext all_member_modifiers() {
		All_member_modifiersContext _localctx = new All_member_modifiersContext(Context, State);
		EnterRule(_localctx, 392, RULE_all_member_modifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2306;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2305; _localctx.m = all_member_modifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2308;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,184,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class All_member_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharp4Parser.READONLY, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharp4Parser.VOLATILE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public All_member_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_all_member_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAll_member_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAll_member_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAll_member_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public All_member_modifierContext all_member_modifier() {
		All_member_modifierContext _localctx = new All_member_modifierContext(Context, State);
		EnterRule(_localctx, 394, RULE_all_member_modifier);
		try {
			State = 2325;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2310; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2311; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2312; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2313; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2314; Match(PRIVATE);
				}
				break;
			case READONLY:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2315; Match(READONLY);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2316; Match(VOLATILE);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2317; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2318; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2319; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2320; Match(ABSTRACT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2321; Match(STATIC);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2322; Match(UNSAFE);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2323; Match(EXTERN);
				}
				break;
			case PARTIAL:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2324; partial_contextual_keyword();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_member_declarationContext : ParserRuleContext {
		public Constant_declaration2Context constant_declaration2() {
			return GetRuleContext<Constant_declaration2Context>(0);
		}
		public Typed_member_declarationContext typed_member_declaration() {
			return GetRuleContext<Typed_member_declarationContext>(0);
		}
		public Event_declaration2Context event_declaration2() {
			return GetRuleContext<Event_declaration2Context>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public Operator_bodyContext operator_body() {
			return GetRuleContext<Operator_bodyContext>(0);
		}
		public Constructor_declaration2Context constructor_declaration2() {
			return GetRuleContext<Constructor_declaration2Context>(0);
		}
		public Type_voidContext type_void() {
			return GetRuleContext<Type_voidContext>(0);
		}
		public Method_declaration2Context method_declaration2() {
			return GetRuleContext<Method_declaration2Context>(0);
		}
		public Class_definitionContext class_definition() {
			return GetRuleContext<Class_definitionContext>(0);
		}
		public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		public Interface_definitionContext interface_definition() {
			return GetRuleContext<Interface_definitionContext>(0);
		}
		public Enum_definitionContext enum_definition() {
			return GetRuleContext<Enum_definitionContext>(0);
		}
		public Delegate_definitionContext delegate_definition() {
			return GetRuleContext<Delegate_definitionContext>(0);
		}
		public Common_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterCommon_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitCommon_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_member_declarationContext common_member_declaration() {
		Common_member_declarationContext _localctx = new Common_member_declarationContext(Context, State);
		EnterRule(_localctx, 396, RULE_common_member_declaration);
		try {
			State = 2342;
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2327; constant_declaration2();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2328; typed_member_declaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2329; event_declaration2();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2330; conversion_operator_declarator();
				State = 2331; operator_body();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2333; constructor_declaration2();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2334; type_void();
				State = 2335; method_declaration2();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2337; class_definition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2338; struct_definition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2339; interface_definition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2340; enum_definition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2341; delegate_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Typed_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public Indexer_declaration2Context indexer_declaration2() {
			return GetRuleContext<Indexer_declaration2Context>(0);
		}
		public Method_declaration2Context method_declaration2() {
			return GetRuleContext<Method_declaration2Context>(0);
		}
		public Property_declaration2Context property_declaration2() {
			return GetRuleContext<Property_declaration2Context>(0);
		}
		public Operator_declaration2Context operator_declaration2() {
			return GetRuleContext<Operator_declaration2Context>(0);
		}
		public Field_declaration2Context field_declaration2() {
			return GetRuleContext<Field_declaration2Context>(0);
		}
		public Typed_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typed_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterTyped_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitTyped_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTyped_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Typed_member_declarationContext typed_member_declaration() {
		Typed_member_declarationContext _localctx = new Typed_member_declarationContext(Context, State);
		EnterRule(_localctx, 398, RULE_typed_member_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2344; type();
			State = 2354;
			switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
			case 1:
				{
				State = 2345; interface_type();
				State = 2346; Match(DOT);
				State = 2347; indexer_declaration2();
				}
				break;
			case 2:
				{
				State = 2349; method_declaration2();
				}
				break;
			case 3:
				{
				State = 2350; property_declaration2();
				}
				break;
			case 4:
				{
				State = 2351; indexer_declaration2();
				}
				break;
			case 5:
				{
				State = 2352; operator_declaration2();
				}
				break;
			case 6:
				{
				State = 2353; field_declaration2();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorsContext : ParserRuleContext {
		public Constant_declaratorContext[] constant_declarator() {
			return GetRuleContexts<Constant_declaratorContext>();
		}
		public Constant_declaratorContext constant_declarator(int i) {
			return GetRuleContext<Constant_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Constant_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstant_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstant_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorsContext constant_declarators() {
		Constant_declaratorsContext _localctx = new Constant_declaratorsContext(Context, State);
		EnterRule(_localctx, 400, RULE_constant_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2356; constant_declarator();
			State = 2361;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2357; Match(COMMA);
				State = 2358; constant_declarator();
				}
				}
				State = 2363;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Constant_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstant_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstant_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaratorContext constant_declarator() {
		Constant_declaratorContext _localctx = new Constant_declaratorContext(Context, State);
		EnterRule(_localctx, 402, RULE_constant_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2364; identifier();
			State = 2365; Match(ASSIGNMENT);
			State = 2366; constant_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorsContext : ParserRuleContext {
		public Variable_declaratorContext[] variable_declarator() {
			return GetRuleContexts<Variable_declaratorContext>();
		}
		public Variable_declaratorContext variable_declarator(int i) {
			return GetRuleContext<Variable_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Variable_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorsContext variable_declarators() {
		Variable_declaratorsContext _localctx = new Variable_declaratorsContext(Context, State);
		EnterRule(_localctx, 404, RULE_variable_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2368; variable_declarator();
			State = 2373;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2369; Match(COMMA);
				State = 2370; variable_declarator();
				}
				}
				State = 2375;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Variable_initializerContext variable_initializer() {
			return GetRuleContext<Variable_initializerContext>(0);
		}
		public Variable_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_declaratorContext variable_declarator() {
		Variable_declaratorContext _localctx = new Variable_declaratorContext(Context, State);
		EnterRule(_localctx, 406, RULE_variable_declarator);
		try {
			State = 2381;
			switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2376; identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2377; identifier();
				State = 2378; Match(ASSIGNMENT);
				State = 2379; variable_initializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Array_initializerContext array_initializer() {
			return GetRuleContext<Array_initializerContext>(0);
		}
		public Variable_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializerContext variable_initializer() {
		Variable_initializerContext _localctx = new Variable_initializerContext(Context, State);
		EnterRule(_localctx, 408, RULE_variable_initializer);
		try {
			State = 2385;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case USHORT:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case STRING_LITERAL:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2383; expression(0);
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2384; array_initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declarationContext : ParserRuleContext {
		public Method_headerContext method_header() {
			return GetRuleContext<Method_headerContext>(0);
		}
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declarationContext method_declaration() {
		Method_declarationContext _localctx = new Method_declarationContext(Context, State);
		EnterRule(_localctx, 410, RULE_method_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2387; method_header();
			State = 2388; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_headerContext : ParserRuleContext {
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Method_modifiersContext method_modifiers() {
			return GetRuleContext<Method_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_headerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_header; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_header(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_header(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_header(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_headerContext method_header() {
		Method_headerContext _localctx = new Method_headerContext(Context, State);
		EnterRule(_localctx, 412, RULE_method_header);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2391;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2390; attributes();
				}
			}

			State = 2394;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2393; method_modifiers();
				}
			}

			State = 2397;
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				{
				State = 2396; partial_contextual_keyword();
				}
				break;
			}
			State = 2399; return_type();
			State = 2400; member_name();
			State = 2402;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 2401; type_parameter_list();
				}
			}

			State = 2404; Match(OPEN_PARENS);
			State = 2406;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 2405; formal_parameter_list();
				}
			}

			State = 2408; Match(CLOSE_PARENS);
			State = 2410;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 2409; type_parameter_constraints_clauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifiersContext : ParserRuleContext {
		public Method_modifierContext[] method_modifier() {
			return GetRuleContexts<Method_modifierContext>();
		}
		public Method_modifierContext method_modifier(int i) {
			return GetRuleContext<Method_modifierContext>(i);
		}
		public Method_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifiersContext method_modifiers() {
		Method_modifiersContext _localctx = new Method_modifiersContext(Context, State);
		EnterRule(_localctx, 414, RULE_method_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2413;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2412; method_modifier();
				}
				}
				State = 2415;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Method_modifier_unsafeContext method_modifier_unsafe() {
			return GetRuleContext<Method_modifier_unsafeContext>(0);
		}
		public Method_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifierContext method_modifier() {
		Method_modifierContext _localctx = new Method_modifierContext(Context, State);
		EnterRule(_localctx, 416, RULE_method_modifier);
		try {
			State = 2429;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2417; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2418; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2419; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2420; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2421; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2422; Match(STATIC);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2423; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2424; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2425; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2426; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2427; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2428; method_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Return_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterReturn_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitReturn_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_typeContext return_type() {
		Return_typeContext _localctx = new Return_typeContext(Context, State);
		EnterRule(_localctx, 418, RULE_return_type);
		try {
			State = 2433;
			switch ( Interpreter.AdaptivePredict(TokenStream,200,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2431; type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2432; Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_nameContext : ParserRuleContext {
		public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		public Member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_nameContext member_name() {
		Member_nameContext _localctx = new Member_nameContext(Context, State);
		EnterRule(_localctx, 420, RULE_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2435; interface_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Method_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_bodyContext method_body() {
		Method_bodyContext _localctx = new Method_bodyContext(Context, State);
		EnterRule(_localctx, 422, RULE_method_body);
		try {
			State = 2439;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2437; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2438; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Formal_parameter_listContext : ParserRuleContext {
		public Parameter_arrayContext parameter_array() {
			return GetRuleContext<Parameter_arrayContext>(0);
		}
		public Fixed_parametersContext fixed_parameters() {
			return GetRuleContext<Fixed_parametersContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Formal_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formal_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFormal_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFormal_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormal_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Formal_parameter_listContext formal_parameter_list() {
		Formal_parameter_listContext _localctx = new Formal_parameter_listContext(Context, State);
		EnterRule(_localctx, 424, RULE_formal_parameter_list);
		int _la;
		try {
			State = 2447;
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2441; parameter_array();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2442; fixed_parameters();
				State = 2445;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2443; Match(COMMA);
					State = 2444; parameter_array();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parametersContext : ParserRuleContext {
		public Fixed_parameterContext[] fixed_parameter() {
			return GetRuleContexts<Fixed_parameterContext>();
		}
		public Fixed_parameterContext fixed_parameter(int i) {
			return GetRuleContext<Fixed_parameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Fixed_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parametersContext fixed_parameters() {
		Fixed_parametersContext _localctx = new Fixed_parametersContext(Context, State);
		EnterRule(_localctx, 426, RULE_fixed_parameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2449; fixed_parameter();
			State = 2454;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2450; Match(COMMA);
					State = 2451; fixed_parameter();
					}
					} 
				}
				State = 2456;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,204,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_parameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_modifierContext parameter_modifier() {
			return GetRuleContext<Parameter_modifierContext>(0);
		}
		public Default_argumentContext default_argument() {
			return GetRuleContext<Default_argumentContext>(0);
		}
		public ArglistContext arglist() {
			return GetRuleContext<ArglistContext>(0);
		}
		public Fixed_parameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_parameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_parameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_parameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_parameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_parameterContext fixed_parameter() {
		Fixed_parameterContext _localctx = new Fixed_parameterContext(Context, State);
		EnterRule(_localctx, 428, RULE_fixed_parameter);
		int _la;
		try {
			State = 2469;
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2458;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 2457; attributes();
					}
				}

				State = 2461;
				_la = TokenStream.La(1);
				if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OUT - 69)) | (1L << (REF - 69)) | (1L << (THIS - 69)))) != 0)) {
					{
					State = 2460; parameter_modifier();
					}
				}

				State = 2463; type();
				State = 2464; identifier();
				State = 2466;
				_la = TokenStream.La(1);
				if (_la==ASSIGNMENT) {
					{
					State = 2465; default_argument();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2468; arglist();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Default_argumentContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Default_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_default_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDefault_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDefault_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefault_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Default_argumentContext default_argument() {
		Default_argumentContext _localctx = new Default_argumentContext(Context, State);
		EnterRule(_localctx, 430, RULE_default_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2471; Match(ASSIGNMENT);
			State = 2472; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_modifierContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public Parameter_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterParameter_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitParameter_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_modifierContext parameter_modifier() {
		Parameter_modifierContext _localctx = new Parameter_modifierContext(Context, State);
		EnterRule(_localctx, 432, RULE_parameter_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2474;
			_la = TokenStream.La(1);
			if ( !(((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (OUT - 69)) | (1L << (REF - 69)) | (1L << (THIS - 69)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_arrayContext : ParserRuleContext {
		public ITerminalNode PARAMS() { return GetToken(CSharp4Parser.PARAMS, 0); }
		public Array_typeContext array_type() {
			return GetRuleContext<Array_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Parameter_arrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_array; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterParameter_array(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitParameter_array(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_array(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_arrayContext parameter_array() {
		Parameter_arrayContext _localctx = new Parameter_arrayContext(Context, State);
		EnterRule(_localctx, 434, RULE_parameter_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2477;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2476; attributes();
				}
			}

			State = 2479; Match(PARAMS);
			State = 2480; array_type();
			State = 2481; identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Property_modifiersContext property_modifiers() {
			return GetRuleContext<Property_modifiersContext>(0);
		}
		public Property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declarationContext property_declaration() {
		Property_declarationContext _localctx = new Property_declarationContext(Context, State);
		EnterRule(_localctx, 436, RULE_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2484;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2483; attributes();
				}
			}

			State = 2487;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2486; property_modifiers();
				}
			}

			State = 2489; type();
			State = 2490; member_name();
			State = 2491; Match(OPEN_BRACE);
			State = 2492; accessor_declarations();
			State = 2493; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_modifiersContext : ParserRuleContext {
		public Property_modifierContext[] property_modifier() {
			return GetRuleContexts<Property_modifierContext>();
		}
		public Property_modifierContext property_modifier(int i) {
			return GetRuleContext<Property_modifierContext>(i);
		}
		public Property_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_modifiersContext property_modifiers() {
		Property_modifiersContext _localctx = new Property_modifiersContext(Context, State);
		EnterRule(_localctx, 438, RULE_property_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2496;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2495; property_modifier();
				}
				}
				State = 2498;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Property_modifier_unsafeContext property_modifier_unsafe() {
			return GetRuleContext<Property_modifier_unsafeContext>(0);
		}
		public Property_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_modifierContext property_modifier() {
		Property_modifierContext _localctx = new Property_modifierContext(Context, State);
		EnterRule(_localctx, 440, RULE_property_modifier);
		try {
			State = 2512;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2500; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2501; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2502; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2503; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2504; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2505; Match(STATIC);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2506; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2507; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2508; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2509; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2510; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2511; property_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_declarationsContext : ParserRuleContext {
		public AttributesContext attrs;
		public Accessor_modifierContext mods;
		public Get_contextual_keywordContext get_contextual_keyword() {
			return GetRuleContext<Get_contextual_keywordContext>(0);
		}
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public Set_contextual_keywordContext set_contextual_keyword() {
			return GetRuleContext<Set_contextual_keywordContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext set_accessor_declaration() {
			return GetRuleContext<Set_accessor_declarationContext>(0);
		}
		public Get_accessor_declarationContext get_accessor_declaration() {
			return GetRuleContext<Get_accessor_declarationContext>(0);
		}
		public Accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAccessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAccessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_declarationsContext accessor_declarations() {
		Accessor_declarationsContext _localctx = new Accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 442, RULE_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2515;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2514; _localctx.attrs = attributes();
				}
			}

			State = 2518;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)))) != 0)) {
				{
				State = 2517; _localctx.mods = accessor_modifier();
				}
			}

			State = 2530;
			switch (TokenStream.La(1)) {
			case GET:
				{
				State = 2520; get_contextual_keyword();
				State = 2521; accessor_body();
				State = 2523;
				_la = TokenStream.La(1);
				if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (SET - 55)) | (1L << (OPEN_BRACKET - 55)))) != 0)) {
					{
					State = 2522; set_accessor_declaration();
					}
				}

				}
				break;
			case SET:
				{
				State = 2525; set_contextual_keyword();
				State = 2526; accessor_body();
				State = 2528;
				_la = TokenStream.La(1);
				if (_la==GET || _la==INTERNAL || ((((_la - 73)) & ~0x3f) == 0 && ((1L << (_la - 73)) & ((1L << (PRIVATE - 73)) | (1L << (PROTECTED - 73)) | (1L << (OPEN_BRACKET - 73)))) != 0)) {
					{
					State = 2527; get_accessor_declaration();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_accessor_declarationContext : ParserRuleContext {
		public Get_contextual_keywordContext get_contextual_keyword() {
			return GetRuleContext<Get_contextual_keywordContext>(0);
		}
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Get_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_accessor_declarationContext get_accessor_declaration() {
		Get_accessor_declarationContext _localctx = new Get_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 444, RULE_get_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2533;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2532; attributes();
				}
			}

			State = 2536;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)))) != 0)) {
				{
				State = 2535; accessor_modifier();
				}
			}

			State = 2538; get_contextual_keyword();
			State = 2539; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_accessor_declarationContext : ParserRuleContext {
		public Set_contextual_keywordContext set_contextual_keyword() {
			return GetRuleContext<Set_contextual_keywordContext>(0);
		}
		public Accessor_bodyContext accessor_body() {
			return GetRuleContext<Accessor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Accessor_modifierContext accessor_modifier() {
			return GetRuleContext<Accessor_modifierContext>(0);
		}
		public Set_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSet_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSet_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_accessor_declarationContext set_accessor_declaration() {
		Set_accessor_declarationContext _localctx = new Set_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 446, RULE_set_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2542;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2541; attributes();
				}
			}

			State = 2545;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)))) != 0)) {
				{
				State = 2544; accessor_modifier();
				}
			}

			State = 2547; set_contextual_keyword();
			State = 2548; accessor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_modifierContext : ParserRuleContext {
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Accessor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAccessor_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAccessor_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_modifierContext accessor_modifier() {
		Accessor_modifierContext _localctx = new Accessor_modifierContext(Context, State);
		EnterRule(_localctx, 448, RULE_accessor_modifier);
		try {
			State = 2557;
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2550; Match(PROTECTED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2551; Match(INTERNAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2552; Match(PRIVATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2553; Match(PROTECTED);
				State = 2554; Match(INTERNAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2555; Match(INTERNAL);
				State = 2556; Match(PROTECTED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Accessor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Accessor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAccessor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAccessor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAccessor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Accessor_bodyContext accessor_body() {
		Accessor_bodyContext _localctx = new Accessor_bodyContext(Context, State);
		EnterRule(_localctx, 450, RULE_accessor_body);
		try {
			State = 2561;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2559; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2560; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declarationContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_modifiersContext event_modifiers() {
			return GetRuleContext<Event_modifiersContext>(0);
		}
		public Event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declarationContext event_declaration() {
		Event_declarationContext _localctx = new Event_declarationContext(Context, State);
		EnterRule(_localctx, 452, RULE_event_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2564;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2563; attributes();
				}
			}

			State = 2567;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2566; event_modifiers();
				}
			}

			State = 2569; Match(EVENT);
			State = 2570; type();
			State = 2579;
			switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
			case 1:
				{
				State = 2571; variable_declarators();
				State = 2572; Match(SEMICOLON);
				}
				break;
			case 2:
				{
				State = 2574; member_name();
				State = 2575; Match(OPEN_BRACE);
				State = 2576; event_accessor_declarations();
				State = 2577; Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_modifiersContext : ParserRuleContext {
		public Event_modifierContext[] event_modifier() {
			return GetRuleContexts<Event_modifierContext>();
		}
		public Event_modifierContext event_modifier(int i) {
			return GetRuleContext<Event_modifierContext>(i);
		}
		public Event_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_modifiersContext event_modifiers() {
		Event_modifiersContext _localctx = new Event_modifiersContext(Context, State);
		EnterRule(_localctx, 454, RULE_event_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2581; event_modifier();
			State = 2585;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (STATIC - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				{
				State = 2582; event_modifier();
				}
				}
				State = 2587;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Event_modifier_unsafeContext event_modifier_unsafe() {
			return GetRuleContext<Event_modifier_unsafeContext>(0);
		}
		public Event_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_modifierContext event_modifier() {
		Event_modifierContext _localctx = new Event_modifierContext(Context, State);
		EnterRule(_localctx, 456, RULE_event_modifier);
		try {
			State = 2600;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2588; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2589; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2590; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2591; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2592; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2593; Match(STATIC);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2594; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2595; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2596; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2597; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2598; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2599; event_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_accessor_declarationsContext : ParserRuleContext {
		public Add_contextual_keywordContext add_contextual_keyword() {
			return GetRuleContext<Add_contextual_keywordContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Remove_accessor_declarationContext remove_accessor_declaration() {
			return GetRuleContext<Remove_accessor_declarationContext>(0);
		}
		public Remove_contextual_keywordContext remove_contextual_keyword() {
			return GetRuleContext<Remove_contextual_keywordContext>(0);
		}
		public Add_accessor_declarationContext add_accessor_declaration() {
			return GetRuleContext<Add_accessor_declarationContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Event_accessor_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_accessor_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_accessor_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_accessor_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_accessor_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_accessor_declarationsContext event_accessor_declarations() {
		Event_accessor_declarationsContext _localctx = new Event_accessor_declarationsContext(Context, State);
		EnterRule(_localctx, 458, RULE_event_accessor_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2603;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2602; attributes();
				}
			}

			State = 2613;
			switch (TokenStream.La(1)) {
			case ADD:
				{
				State = 2605; add_contextual_keyword();
				State = 2606; block();
				State = 2607; remove_accessor_declaration();
				}
				break;
			case REMOVE:
				{
				State = 2609; remove_contextual_keyword();
				State = 2610; block();
				State = 2611; add_accessor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_accessor_declarationContext : ParserRuleContext {
		public Add_contextual_keywordContext add_contextual_keyword() {
			return GetRuleContext<Add_contextual_keywordContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Add_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAdd_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAdd_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_accessor_declarationContext add_accessor_declaration() {
		Add_accessor_declarationContext _localctx = new Add_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 460, RULE_add_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2616;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2615; attributes();
				}
			}

			State = 2618; add_contextual_keyword();
			State = 2619; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_accessor_declarationContext : ParserRuleContext {
		public Remove_contextual_keywordContext remove_contextual_keyword() {
			return GetRuleContext<Remove_contextual_keywordContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Remove_accessor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_accessor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRemove_accessor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRemove_accessor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_accessor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_accessor_declarationContext remove_accessor_declaration() {
		Remove_accessor_declarationContext _localctx = new Remove_accessor_declarationContext(Context, State);
		EnterRule(_localctx, 462, RULE_remove_accessor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2622;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2621; attributes();
				}
			}

			State = 2624; remove_contextual_keyword();
			State = 2625; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declarationContext : ParserRuleContext {
		public Indexer_declaratorContext indexer_declarator() {
			return GetRuleContext<Indexer_declaratorContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Indexer_modifiersContext indexer_modifiers() {
			return GetRuleContext<Indexer_modifiersContext>(0);
		}
		public Indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declarationContext indexer_declaration() {
		Indexer_declarationContext _localctx = new Indexer_declarationContext(Context, State);
		EnterRule(_localctx, 464, RULE_indexer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2628;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2627; attributes();
				}
			}

			State = 2631;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				State = 2630; indexer_modifiers();
				}
			}

			State = 2633; indexer_declarator();
			State = 2634; Match(OPEN_BRACE);
			State = 2635; accessor_declarations();
			State = 2636; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_modifiersContext : ParserRuleContext {
		public Indexer_modifierContext[] indexer_modifier() {
			return GetRuleContexts<Indexer_modifierContext>();
		}
		public Indexer_modifierContext indexer_modifier(int i) {
			return GetRuleContext<Indexer_modifierContext>(i);
		}
		public Indexer_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_modifiersContext indexer_modifiers() {
		Indexer_modifiersContext _localctx = new Indexer_modifiersContext(Context, State);
		EnterRule(_localctx, 466, RULE_indexer_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2638; indexer_modifier();
			State = 2642;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << EXTERN) | (1L << INTERNAL) | (1L << NEW))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (OVERRIDE - 70)) | (1L << (PRIVATE - 70)) | (1L << (PROTECTED - 70)) | (1L << (PUBLIC - 70)) | (1L << (SEALED - 70)) | (1L << (UNSAFE - 70)) | (1L << (VIRTUAL - 70)))) != 0)) {
				{
				{
				State = 2639; indexer_modifier();
				}
				}
				State = 2644;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Indexer_modifier_unsafeContext indexer_modifier_unsafe() {
			return GetRuleContext<Indexer_modifier_unsafeContext>(0);
		}
		public Indexer_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_modifierContext indexer_modifier() {
		Indexer_modifierContext _localctx = new Indexer_modifierContext(Context, State);
		EnterRule(_localctx, 468, RULE_indexer_modifier);
		try {
			State = 2656;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2645; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2646; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2647; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2648; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2649; Match(PRIVATE);
				}
				break;
			case VIRTUAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2650; Match(VIRTUAL);
				}
				break;
			case SEALED:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2651; Match(SEALED);
				}
				break;
			case OVERRIDE:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2652; Match(OVERRIDE);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2653; Match(ABSTRACT);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2654; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2655; indexer_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declaratorContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Interface_typeContext interface_type() {
			return GetRuleContext<Interface_typeContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public Indexer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declaratorContext indexer_declarator() {
		Indexer_declaratorContext _localctx = new Indexer_declaratorContext(Context, State);
		EnterRule(_localctx, 470, RULE_indexer_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2658; type();
			State = 2662;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0)) {
				{
				State = 2659; interface_type();
				State = 2660; Match(DOT);
				}
			}

			State = 2664; Match(THIS);
			State = 2665; Match(OPEN_BRACKET);
			State = 2666; formal_parameter_list();
			State = 2667; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declarationContext : ParserRuleContext {
		public Operator_modifiersContext operator_modifiers() {
			return GetRuleContext<Operator_modifiersContext>(0);
		}
		public Operator_declaratorContext operator_declarator() {
			return GetRuleContext<Operator_declaratorContext>(0);
		}
		public Operator_bodyContext operator_body() {
			return GetRuleContext<Operator_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Operator_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declarationContext operator_declaration() {
		Operator_declarationContext _localctx = new Operator_declarationContext(Context, State);
		EnterRule(_localctx, 472, RULE_operator_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2670;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2669; attributes();
				}
			}

			State = 2672; operator_modifiers();
			State = 2673; operator_declarator();
			State = 2674; operator_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modifiersContext : ParserRuleContext {
		public Operator_modifierContext[] operator_modifier() {
			return GetRuleContexts<Operator_modifierContext>();
		}
		public Operator_modifierContext operator_modifier(int i) {
			return GetRuleContext<Operator_modifierContext>(i);
		}
		public Operator_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modifiersContext operator_modifiers() {
		Operator_modifiersContext _localctx = new Operator_modifiersContext(Context, State);
		EnterRule(_localctx, 474, RULE_operator_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2676; operator_modifier();
			State = 2680;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (EXTERN - 39)) | (1L << (PUBLIC - 39)) | (1L << (STATIC - 39)) | (1L << (UNSAFE - 39)))) != 0)) {
				{
				{
				State = 2677; operator_modifier();
				}
				}
				State = 2682;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Operator_modifier_unsafeContext operator_modifier_unsafe() {
			return GetRuleContext<Operator_modifier_unsafeContext>(0);
		}
		public Operator_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modifierContext operator_modifier() {
		Operator_modifierContext _localctx = new Operator_modifierContext(Context, State);
		EnterRule(_localctx, 476, RULE_operator_modifier);
		try {
			State = 2687;
			switch (TokenStream.La(1)) {
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2683; Match(PUBLIC);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2684; Match(STATIC);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2685; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2686; operator_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declaratorContext : ParserRuleContext {
		public Unary_operator_declaratorContext unary_operator_declarator() {
			return GetRuleContext<Unary_operator_declaratorContext>(0);
		}
		public Binary_operator_declaratorContext binary_operator_declarator() {
			return GetRuleContext<Binary_operator_declaratorContext>(0);
		}
		public Conversion_operator_declaratorContext conversion_operator_declarator() {
			return GetRuleContext<Conversion_operator_declaratorContext>(0);
		}
		public Operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declaratorContext operator_declarator() {
		Operator_declaratorContext _localctx = new Operator_declaratorContext(Context, State);
		EnterRule(_localctx, 478, RULE_operator_declarator);
		try {
			State = 2692;
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2689; unary_operator_declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2690; binary_operator_declarator();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2691; conversion_operator_declarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_operator_declaratorContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public Overloadable_unary_operatorContext overloadable_unary_operator() {
			return GetRuleContext<Overloadable_unary_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Unary_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnary_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnary_operator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_operator_declaratorContext unary_operator_declarator() {
		Unary_operator_declaratorContext _localctx = new Unary_operator_declaratorContext(Context, State);
		EnterRule(_localctx, 480, RULE_unary_operator_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2694; type();
			State = 2695; Match(OPERATOR);
			State = 2696; overloadable_unary_operator();
			State = 2697; Match(OPEN_PARENS);
			State = 2698; type();
			State = 2699; identifier();
			State = 2700; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_unary_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(CSharp4Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CSharp4Parser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(CSharp4Parser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public ITerminalNode OP_INC() { return GetToken(CSharp4Parser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(CSharp4Parser.OP_DEC, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharp4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharp4Parser.FALSE, 0); }
		public Overloadable_unary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_unary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOverloadable_unary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOverloadable_unary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_unary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_unary_operatorContext overloadable_unary_operator() {
		Overloadable_unary_operatorContext _localctx = new Overloadable_unary_operatorContext(Context, State);
		EnterRule(_localctx, 482, RULE_overloadable_unary_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2702;
			_la = TokenStream.La(1);
			if ( !(_la==FALSE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (TRUE - 93)) | (1L << (PLUS - 93)) | (1L << (MINUS - 93)) | (1L << (BANG - 93)) | (1L << (TILDE - 93)) | (1L << (OP_INC - 93)) | (1L << (OP_DEC - 93)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Binary_operator_declaratorContext : ParserRuleContext {
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public Overloadable_binary_operatorContext overloadable_binary_operator() {
			return GetRuleContext<Overloadable_binary_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Binary_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBinary_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBinary_operator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Binary_operator_declaratorContext binary_operator_declarator() {
		Binary_operator_declaratorContext _localctx = new Binary_operator_declaratorContext(Context, State);
		EnterRule(_localctx, 484, RULE_binary_operator_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2704; type();
			State = 2705; Match(OPERATOR);
			State = 2706; overloadable_binary_operator();
			State = 2707; Match(OPEN_PARENS);
			State = 2708; type();
			State = 2709; identifier();
			State = 2710; Match(COMMA);
			State = 2711; type();
			State = 2712; identifier();
			State = 2713; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_binary_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(CSharp4Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CSharp4Parser.MINUS, 0); }
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(CSharp4Parser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(CSharp4Parser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(CSharp4Parser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(CSharp4Parser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(CSharp4Parser.CARET, 0); }
		public ITerminalNode OP_LEFT_SHIFT() { return GetToken(CSharp4Parser.OP_LEFT_SHIFT, 0); }
		public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(CSharp4Parser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharp4Parser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public ITerminalNode OP_GE() { return GetToken(CSharp4Parser.OP_GE, 0); }
		public ITerminalNode OP_LE() { return GetToken(CSharp4Parser.OP_LE, 0); }
		public Overloadable_binary_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_binary_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOverloadable_binary_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOverloadable_binary_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_binary_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_binary_operatorContext overloadable_binary_operator() {
		Overloadable_binary_operatorContext _localctx = new Overloadable_binary_operatorContext(Context, State);
		EnterRule(_localctx, 486, RULE_overloadable_binary_operator);
		try {
			State = 2731;
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2715; Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2716; Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2717; Match(STAR);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2718; Match(DIV);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2719; Match(PERCENT);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2720; Match(AMP);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2721; Match(BITWISE_OR);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2722; Match(CARET);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2723; Match(OP_LEFT_SHIFT);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2724; right_shift();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2725; Match(OP_EQ);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2726; Match(OP_NE);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2727; Match(GT);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2728; Match(LT);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2729; Match(OP_GE);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2730; Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Overloadable_operatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(CSharp4Parser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CSharp4Parser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(CSharp4Parser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public ITerminalNode OP_INC() { return GetToken(CSharp4Parser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(CSharp4Parser.OP_DEC, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharp4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharp4Parser.FALSE, 0); }
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(CSharp4Parser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(CSharp4Parser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(CSharp4Parser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(CSharp4Parser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(CSharp4Parser.CARET, 0); }
		public ITerminalNode OP_LEFT_SHIFT() { return GetToken(CSharp4Parser.OP_LEFT_SHIFT, 0); }
		public Right_shiftContext right_shift() {
			return GetRuleContext<Right_shiftContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(CSharp4Parser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharp4Parser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public ITerminalNode OP_GE() { return GetToken(CSharp4Parser.OP_GE, 0); }
		public ITerminalNode OP_LE() { return GetToken(CSharp4Parser.OP_LE, 0); }
		public Overloadable_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadable_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOverloadable_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOverloadable_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOverloadable_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Overloadable_operatorContext overloadable_operator() {
		Overloadable_operatorContext _localctx = new Overloadable_operatorContext(Context, State);
		EnterRule(_localctx, 488, RULE_overloadable_operator);
		try {
			State = 2755;
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2733; Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2734; Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2735; Match(BANG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2736; Match(TILDE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2737; Match(OP_INC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2738; Match(OP_DEC);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2739; Match(TRUE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2740; Match(FALSE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2741; Match(STAR);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2742; Match(DIV);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2743; Match(PERCENT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2744; Match(AMP);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2745; Match(BITWISE_OR);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2746; Match(CARET);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2747; Match(OP_LEFT_SHIFT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2748; right_shift();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2749; Match(OP_EQ);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2750; Match(OP_NE);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2751; Match(GT);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2752; Match(LT);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2753; Match(OP_GE);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2754; Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Conversion_operator_declaratorContext : ParserRuleContext {
		public ITerminalNode IMPLICIT() { return GetToken(CSharp4Parser.IMPLICIT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharp4Parser.EXPLICIT, 0); }
		public Conversion_operator_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversion_operator_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConversion_operator_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConversion_operator_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConversion_operator_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Conversion_operator_declaratorContext conversion_operator_declarator() {
		Conversion_operator_declaratorContext _localctx = new Conversion_operator_declaratorContext(Context, State);
		EnterRule(_localctx, 490, RULE_conversion_operator_declarator);
		try {
			State = 2773;
			switch (TokenStream.La(1)) {
			case IMPLICIT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2757; Match(IMPLICIT);
				State = 2758; Match(OPERATOR);
				State = 2759; type();
				State = 2760; Match(OPEN_PARENS);
				State = 2761; type();
				State = 2762; identifier();
				State = 2763; Match(CLOSE_PARENS);
				}
				break;
			case EXPLICIT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2765; Match(EXPLICIT);
				State = 2766; Match(OPERATOR);
				State = 2767; type();
				State = 2768; Match(OPEN_PARENS);
				State = 2769; type();
				State = 2770; identifier();
				State = 2771; Match(CLOSE_PARENS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Operator_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_bodyContext operator_body() {
		Operator_bodyContext _localctx = new Operator_bodyContext(Context, State);
		EnterRule(_localctx, 492, RULE_operator_body);
		try {
			State = 2777;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2775; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2776; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declarationContext : ParserRuleContext {
		public Constructor_declaratorContext constructor_declarator() {
			return GetRuleContext<Constructor_declaratorContext>(0);
		}
		public Constructor_bodyContext constructor_body() {
			return GetRuleContext<Constructor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Constructor_modifiersContext constructor_modifiers() {
			return GetRuleContext<Constructor_modifiersContext>(0);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declarationContext constructor_declaration() {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(Context, State);
		EnterRule(_localctx, 494, RULE_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2780;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2779; attributes();
				}
			}

			State = 2783;
			_la = TokenStream.La(1);
			if (((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (EXTERN - 39)) | (1L << (INTERNAL - 39)) | (1L << (PRIVATE - 39)) | (1L << (PROTECTED - 39)) | (1L << (PUBLIC - 39)) | (1L << (UNSAFE - 39)))) != 0)) {
				{
				State = 2782; constructor_modifiers();
				}
			}

			State = 2785; constructor_declarator();
			State = 2786; constructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_modifiersContext : ParserRuleContext {
		public Constructor_modifierContext[] constructor_modifier() {
			return GetRuleContexts<Constructor_modifierContext>();
		}
		public Constructor_modifierContext constructor_modifier(int i) {
			return GetRuleContext<Constructor_modifierContext>(i);
		}
		public Constructor_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_modifiersContext constructor_modifiers() {
		Constructor_modifiersContext _localctx = new Constructor_modifiersContext(Context, State);
		EnterRule(_localctx, 496, RULE_constructor_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2789;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2788; constructor_modifier();
				}
				}
				State = 2791;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 39)) & ~0x3f) == 0 && ((1L << (_la - 39)) & ((1L << (EXTERN - 39)) | (1L << (INTERNAL - 39)) | (1L << (PRIVATE - 39)) | (1L << (PROTECTED - 39)) | (1L << (PUBLIC - 39)) | (1L << (UNSAFE - 39)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_modifierContext : ParserRuleContext {
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public Constructor_modifier_unsafeContext constructor_modifier_unsafe() {
			return GetRuleContext<Constructor_modifier_unsafeContext>(0);
		}
		public Constructor_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_modifierContext constructor_modifier() {
		Constructor_modifierContext _localctx = new Constructor_modifierContext(Context, State);
		EnterRule(_localctx, 498, RULE_constructor_modifier);
		try {
			State = 2799;
			switch (TokenStream.La(1)) {
			case PUBLIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2793; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2794; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2795; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2796; Match(PRIVATE);
				}
				break;
			case EXTERN:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2797; Match(EXTERN);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2798; constructor_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declaratorContext constructor_declarator() {
		Constructor_declaratorContext _localctx = new Constructor_declaratorContext(Context, State);
		EnterRule(_localctx, 500, RULE_constructor_declarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2801; identifier();
			State = 2802; Match(OPEN_PARENS);
			State = 2804;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 2803; formal_parameter_list();
				}
			}

			State = 2806; Match(CLOSE_PARENS);
			State = 2808;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 2807; constructor_initializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_initializerContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public ITerminalNode BASE() { return GetToken(CSharp4Parser.BASE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public Constructor_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_initializerContext constructor_initializer() {
		Constructor_initializerContext _localctx = new Constructor_initializerContext(Context, State);
		EnterRule(_localctx, 502, RULE_constructor_initializer);
		int _la;
		try {
			State = 2824;
			switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2810; Match(COLON);
				State = 2811; Match(BASE);
				State = 2812; Match(OPEN_PARENS);
				State = 2814;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 2813; argument_list();
					}
				}

				State = 2816; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2817; Match(COLON);
				State = 2818; Match(THIS);
				State = 2819; Match(OPEN_PARENS);
				State = 2821;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
					{
					State = 2820; argument_list();
					}
				}

				State = 2823; Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Constructor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_bodyContext constructor_body() {
		Constructor_bodyContext _localctx = new Constructor_bodyContext(Context, State);
		EnterRule(_localctx, 504, RULE_constructor_body);
		try {
			State = 2828;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2826; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2827; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_declarationContext : ParserRuleContext {
		public Static_constructor_modifiersContext static_constructor_modifiers() {
			return GetRuleContext<Static_constructor_modifiersContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Static_constructor_bodyContext static_constructor_body() {
			return GetRuleContext<Static_constructor_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Static_constructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatic_constructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatic_constructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_constructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_declarationContext static_constructor_declaration() {
		Static_constructor_declarationContext _localctx = new Static_constructor_declarationContext(Context, State);
		EnterRule(_localctx, 506, RULE_static_constructor_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2831;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2830; attributes();
				}
			}

			State = 2833; static_constructor_modifiers();
			State = 2834; identifier();
			State = 2835; Match(OPEN_PARENS);
			State = 2836; Match(CLOSE_PARENS);
			State = 2837; static_constructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_modifiersContext : ParserRuleContext {
		public Static_constructor_modifiers_unsafeContext static_constructor_modifiers_unsafe() {
			return GetRuleContext<Static_constructor_modifiers_unsafeContext>(0);
		}
		public Static_constructor_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatic_constructor_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatic_constructor_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_constructor_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_modifiersContext static_constructor_modifiers() {
		Static_constructor_modifiersContext _localctx = new Static_constructor_modifiersContext(Context, State);
		EnterRule(_localctx, 508, RULE_static_constructor_modifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2839; static_constructor_modifiers_unsafe();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Static_constructor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatic_constructor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatic_constructor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_constructor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_bodyContext static_constructor_body() {
		Static_constructor_bodyContext _localctx = new Static_constructor_bodyContext(Context, State);
		EnterRule(_localctx, 510, RULE_static_constructor_body);
		try {
			State = 2843;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2841; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2842; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_declarationContext : ParserRuleContext {
		public Destructor_declaration_unsafeContext destructor_declaration_unsafe() {
			return GetRuleContext<Destructor_declaration_unsafeContext>(0);
		}
		public Destructor_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDestructor_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDestructor_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_declarationContext destructor_declaration() {
		Destructor_declarationContext _localctx = new Destructor_declarationContext(Context, State);
		EnterRule(_localctx, 512, RULE_destructor_declaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2845; destructor_declaration_unsafe();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_bodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Destructor_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDestructor_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDestructor_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_bodyContext destructor_body() {
		Destructor_bodyContext _localctx = new Destructor_bodyContext(Context, State);
		EnterRule(_localctx, 514, RULE_destructor_body);
		try {
			State = 2849;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2847; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2848; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 516, RULE_body);
		try {
			State = 2853;
			switch (TokenStream.La(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2851; block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2852; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declarationContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Struct_modifiersContext struct_modifiers() {
			return GetRuleContext<Struct_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Struct_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_declarationContext struct_declaration() {
		Struct_declarationContext _localctx = new Struct_declarationContext(Context, State);
		EnterRule(_localctx, 518, RULE_struct_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2856;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2855; attributes();
				}
			}

			State = 2859;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 2858; struct_modifiers();
				}
			}

			State = 2862;
			_la = TokenStream.La(1);
			if (_la==PARTIAL) {
				{
				State = 2861; partial_contextual_keyword();
				}
			}

			State = 2864; Match(STRUCT);
			State = 2865; identifier();
			State = 2867;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 2866; type_parameter_list();
				}
			}

			State = 2870;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 2869; struct_interfaces();
				}
			}

			State = 2873;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 2872; type_parameter_constraints_clauses();
				}
			}

			State = 2875; struct_body();
			State = 2877;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 2876; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_modifiersContext : ParserRuleContext {
		public Struct_modifierContext[] struct_modifier() {
			return GetRuleContexts<Struct_modifierContext>();
		}
		public Struct_modifierContext struct_modifier(int i) {
			return GetRuleContext<Struct_modifierContext>(i);
		}
		public Struct_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_modifiersContext struct_modifiers() {
		Struct_modifiersContext _localctx = new Struct_modifiersContext(Context, State);
		EnterRule(_localctx, 520, RULE_struct_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2879; struct_modifier();
			State = 2883;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				{
				State = 2880; struct_modifier();
				}
				}
				State = 2885;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Struct_modifier_unsafeContext struct_modifier_unsafe() {
			return GetRuleContext<Struct_modifier_unsafeContext>(0);
		}
		public Struct_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_modifierContext struct_modifier() {
		Struct_modifierContext _localctx = new Struct_modifierContext(Context, State);
		EnterRule(_localctx, 522, RULE_struct_modifier);
		try {
			State = 2892;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2886; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2887; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2888; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2889; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2890; Match(PRIVATE);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2891; struct_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_interfacesContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Struct_interfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_interfaces; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_interfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_interfaces(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_interfaces(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_interfacesContext struct_interfaces() {
		Struct_interfacesContext _localctx = new Struct_interfacesContext(Context, State);
		EnterRule(_localctx, 524, RULE_struct_interfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2894; Match(COLON);
			State = 2895; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Struct_member_declarationsContext struct_member_declarations() {
			return GetRuleContext<Struct_member_declarationsContext>(0);
		}
		public Struct_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_bodyContext struct_body() {
		Struct_bodyContext _localctx = new Struct_bodyContext(Context, State);
		EnterRule(_localctx, 526, RULE_struct_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2897; Match(OPEN_BRACE);
			State = 2899;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 2898; struct_member_declarations();
				}
			}

			State = 2901; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationsContext : ParserRuleContext {
		public Struct_member_declarationContext[] struct_member_declaration() {
			return GetRuleContexts<Struct_member_declarationContext>();
		}
		public Struct_member_declarationContext struct_member_declaration(int i) {
			return GetRuleContext<Struct_member_declarationContext>(i);
		}
		public Struct_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationsContext struct_member_declarations() {
		Struct_member_declarationsContext _localctx = new Struct_member_declarationsContext(Context, State);
		EnterRule(_localctx, 528, RULE_struct_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2903; struct_member_declaration();
			State = 2907;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				{
				State = 2904; struct_member_declaration();
				}
				}
				State = 2909;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declarationContext : ParserRuleContext {
		public Common_member_declarationContext common_member_declaration() {
			return GetRuleContext<Common_member_declarationContext>(0);
		}
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public Buffer_element_typeContext buffer_element_type() {
			return GetRuleContext<Buffer_element_typeContext>(0);
		}
		public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
			return GetRuleContext<Fixed_size_buffer_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public All_member_modifiersContext all_member_modifiers() {
			return GetRuleContext<All_member_modifiersContext>(0);
		}
		public Struct_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declarationContext struct_member_declaration() {
		Struct_member_declarationContext _localctx = new Struct_member_declarationContext(Context, State);
		EnterRule(_localctx, 530, RULE_struct_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2911;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2910; attributes();
				}
			}

			State = 2914;
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				{
				State = 2913; all_member_modifiers();
				}
				break;
			}
			State = 2922;
			switch (TokenStream.La(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case USHORT:
			case VOID:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 2916; common_member_declaration();
				}
				break;
			case FIXED:
				{
				State = 2917; Match(FIXED);
				State = 2918; buffer_element_type();
				State = 2919; fixed_size_buffer_declarators();
				State = 2920; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public Array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArray_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArray_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_typeContext array_type() {
		Array_typeContext _localctx = new Array_typeContext(Context, State);
		EnterRule(_localctx, 532, RULE_array_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2924; base_type();
			State = 2932;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 2928;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 2925;
					_la = TokenStream.La(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					}
					State = 2930;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 2931; rank_specifier();
				}
				}
				State = 2934;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 116)) & ~0x3f) == 0 && ((1L << (_la - 116)) & ((1L << (OPEN_BRACKET - 116)) | (1L << (STAR - 116)) | (1L << (INTERR - 116)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Non_array_typeContext : ParserRuleContext {
		public Base_typeContext base_type() {
			return GetRuleContext<Base_typeContext>(0);
		}
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharp4Parser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharp4Parser.STAR, i);
		}
		public Non_array_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_non_array_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNon_array_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNon_array_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNon_array_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Non_array_typeContext non_array_type() {
		Non_array_typeContext _localctx = new Non_array_typeContext(Context, State);
		EnterRule(_localctx, 534, RULE_non_array_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2936; base_type();
			State = 2942;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,278,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					State = 2940;
					switch (TokenStream.La(1)) {
					case OPEN_BRACKET:
						{
						State = 2937; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 2938; Match(INTERR);
						}
						break;
					case STAR:
						{
						State = 2939; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 2944;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,278,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifiersContext : ParserRuleContext {
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public Rank_specifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRank_specifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRank_specifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_specifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifiersContext rank_specifiers() {
		Rank_specifiersContext _localctx = new Rank_specifiersContext(Context, State);
		EnterRule(_localctx, 536, RULE_rank_specifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2946;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 2945; rank_specifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2948;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,279,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rank_specifierContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Dim_separatorsContext dim_separators() {
			return GetRuleContext<Dim_separatorsContext>(0);
		}
		public Rank_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rank_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRank_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRank_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRank_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rank_specifierContext rank_specifier() {
		Rank_specifierContext _localctx = new Rank_specifierContext(Context, State);
		EnterRule(_localctx, 538, RULE_rank_specifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2950; Match(OPEN_BRACKET);
			State = 2952;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 2951; dim_separators();
				}
			}

			State = 2954; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dim_separatorsContext : ParserRuleContext {
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Dim_separatorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dim_separators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDim_separators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDim_separators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDim_separators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dim_separatorsContext dim_separators() {
		Dim_separatorsContext _localctx = new Dim_separatorsContext(Context, State);
		EnterRule(_localctx, 540, RULE_dim_separators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2956; Match(COMMA);
			State = 2960;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 2957; Match(COMMA);
				}
				}
				State = 2962;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_initializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Variable_initializer_listContext variable_initializer_list() {
			return GetRuleContext<Variable_initializer_listContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Array_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArray_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArray_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Array_initializerContext array_initializer() {
		Array_initializerContext _localctx = new Array_initializerContext(Context, State);
		EnterRule(_localctx, 542, RULE_array_initializer);
		int _la;
		try {
			State = 2972;
			switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2963; Match(OPEN_BRACE);
				State = 2964; Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2965; Match(OPEN_BRACE);
				State = 2966; variable_initializer_list();
				State = 2968;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 2967; Match(COMMA);
					}
				}

				State = 2970; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variable_initializer_listContext : ParserRuleContext {
		public Variable_initializerContext[] variable_initializer() {
			return GetRuleContexts<Variable_initializerContext>();
		}
		public Variable_initializerContext variable_initializer(int i) {
			return GetRuleContext<Variable_initializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Variable_initializer_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable_initializer_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariable_initializer_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariable_initializer_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable_initializer_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variable_initializer_listContext variable_initializer_list() {
		Variable_initializer_listContext _localctx = new Variable_initializer_listContext(Context, State);
		EnterRule(_localctx, 544, RULE_variable_initializer_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2974; variable_initializer();
			State = 2979;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,284,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 2975; Match(COMMA);
					State = 2976; variable_initializer();
					}
					} 
				}
				State = 2981;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,284,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_declarationContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(CSharp4Parser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Interface_modifiersContext interface_modifiers() {
			return GetRuleContext<Interface_modifiersContext>(0);
		}
		public Partial_contextual_keywordContext partial_contextual_keyword() {
			return GetRuleContext<Partial_contextual_keywordContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Interface_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_declarationContext interface_declaration() {
		Interface_declarationContext _localctx = new Interface_declarationContext(Context, State);
		EnterRule(_localctx, 546, RULE_interface_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2983;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2982; attributes();
				}
			}

			State = 2986;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 2985; interface_modifiers();
				}
			}

			State = 2989;
			_la = TokenStream.La(1);
			if (_la==PARTIAL) {
				{
				State = 2988; partial_contextual_keyword();
				}
			}

			State = 2991; Match(INTERFACE);
			State = 2992; identifier();
			State = 2994;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 2993; variant_type_parameter_list();
				}
			}

			State = 2997;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 2996; interface_base();
				}
			}

			State = 3000;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 2999; type_parameter_constraints_clauses();
				}
			}

			State = 3002; interface_body();
			State = 3004;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3003; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_modifiersContext : ParserRuleContext {
		public Interface_modifierContext[] interface_modifier() {
			return GetRuleContexts<Interface_modifierContext>();
		}
		public Interface_modifierContext interface_modifier(int i) {
			return GetRuleContext<Interface_modifierContext>(i);
		}
		public Interface_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_modifiersContext interface_modifiers() {
		Interface_modifiersContext _localctx = new Interface_modifiersContext(Context, State);
		EnterRule(_localctx, 548, RULE_interface_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3006; interface_modifier();
			State = 3010;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				{
				State = 3007; interface_modifier();
				}
				}
				State = 3012;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Interface_modifier_unsafeContext interface_modifier_unsafe() {
			return GetRuleContext<Interface_modifier_unsafeContext>(0);
		}
		public Interface_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_modifierContext interface_modifier() {
		Interface_modifierContext _localctx = new Interface_modifierContext(Context, State);
		EnterRule(_localctx, 550, RULE_interface_modifier);
		try {
			State = 3019;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3013; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3014; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3015; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3016; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3017; Match(PRIVATE);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3018; interface_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parameter_listContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharp4Parser.LT, 0); }
		public Variant_type_parametersContext variant_type_parameters() {
			return GetRuleContext<Variant_type_parametersContext>(0);
		}
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Variant_type_parameter_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameter_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariant_type_parameter_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariant_type_parameter_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameter_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parameter_listContext variant_type_parameter_list() {
		Variant_type_parameter_listContext _localctx = new Variant_type_parameter_listContext(Context, State);
		EnterRule(_localctx, 552, RULE_variant_type_parameter_list);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3021; Match(LT);
			State = 3022; variant_type_parameters();
			State = 3023; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variant_type_parametersContext : ParserRuleContext {
		public Type_parameterContext[] type_parameter() {
			return GetRuleContexts<Type_parameterContext>();
		}
		public Type_parameterContext type_parameter(int i) {
			return GetRuleContext<Type_parameterContext>(i);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Variance_annotationContext[] variance_annotation() {
			return GetRuleContexts<Variance_annotationContext>();
		}
		public Variance_annotationContext variance_annotation(int i) {
			return GetRuleContext<Variance_annotationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Variant_type_parametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variant_type_parameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariant_type_parameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariant_type_parameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariant_type_parameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variant_type_parametersContext variant_type_parameters() {
		Variant_type_parametersContext _localctx = new Variant_type_parametersContext(Context, State);
		EnterRule(_localctx, 554, RULE_variant_type_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3026;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3025; attributes();
				}
			}

			State = 3029;
			_la = TokenStream.La(1);
			if (_la==IN || _la==OUT) {
				{
				State = 3028; variance_annotation();
				}
			}

			State = 3031; type_parameter();
			State = 3042;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3032; Match(COMMA);
				State = 3034;
				_la = TokenStream.La(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 3033; attributes();
					}
				}

				State = 3037;
				_la = TokenStream.La(1);
				if (_la==IN || _la==OUT) {
					{
					State = 3036; variance_annotation();
					}
				}

				State = 3039; type_parameter();
				}
				}
				State = 3044;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Variance_annotationContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public Variance_annotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variance_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterVariance_annotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitVariance_annotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariance_annotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Variance_annotationContext variance_annotation() {
		Variance_annotationContext _localctx = new Variance_annotationContext(Context, State);
		EnterRule(_localctx, 556, RULE_variance_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3045;
			_la = TokenStream.La(1);
			if ( !(_la==IN || _la==OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Interface_type_listContext interface_type_list() {
			return GetRuleContext<Interface_type_listContext>(0);
		}
		public Interface_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_baseContext interface_base() {
		Interface_baseContext _localctx = new Interface_baseContext(Context, State);
		EnterRule(_localctx, 558, RULE_interface_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3047; Match(COLON);
			State = 3048; interface_type_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Interface_member_declarationsContext interface_member_declarations() {
			return GetRuleContext<Interface_member_declarationsContext>(0);
		}
		public Interface_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_bodyContext interface_body() {
		Interface_bodyContext _localctx = new Interface_bodyContext(Context, State);
		EnterRule(_localctx, 560, RULE_interface_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3050; Match(OPEN_BRACE);
			State = 3052;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3051; interface_member_declarations();
				}
			}

			State = 3054; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationsContext : ParserRuleContext {
		public Interface_member_declarationContext[] interface_member_declaration() {
			return GetRuleContexts<Interface_member_declarationContext>();
		}
		public Interface_member_declarationContext interface_member_declaration(int i) {
			return GetRuleContext<Interface_member_declarationContext>(i);
		}
		public Interface_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationsContext interface_member_declarations() {
		Interface_member_declarationsContext _localctx = new Interface_member_declarationsContext(Context, State);
		EnterRule(_localctx, 562, RULE_interface_member_declarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3057;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3056; interface_member_declaration();
				}
				}
				State = 3059;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_member_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_member_declarationContext interface_member_declaration() {
		Interface_member_declarationContext _localctx = new Interface_member_declarationContext(Context, State);
		EnterRule(_localctx, 564, RULE_interface_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3062;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3061; attributes();
				}
			}

			State = 3065;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3064; Match(NEW);
				}
			}

			State = 3117;
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				{
				State = 3067; type();
				State = 3095;
				switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
				case 1:
					{
					State = 3068; identifier();
					State = 3070;
					_la = TokenStream.La(1);
					if (_la==LT) {
						{
						State = 3069; type_parameter_list();
						}
					}

					State = 3072; Match(OPEN_PARENS);
					State = 3074;
					_la = TokenStream.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
						{
						State = 3073; formal_parameter_list();
						}
					}

					State = 3076; Match(CLOSE_PARENS);
					State = 3078;
					_la = TokenStream.La(1);
					if (_la==WHERE) {
						{
						State = 3077; type_parameter_constraints_clauses();
						}
					}

					State = 3080; Match(SEMICOLON);
					}
					break;
				case 2:
					{
					State = 3082; identifier();
					State = 3083; Match(OPEN_BRACE);
					State = 3084; interface_accessors();
					State = 3085; Match(CLOSE_BRACE);
					}
					break;
				case 3:
					{
					State = 3087; Match(THIS);
					State = 3088; Match(OPEN_BRACKET);
					State = 3089; formal_parameter_list();
					State = 3090; Match(CLOSE_BRACKET);
					State = 3091; Match(OPEN_BRACE);
					State = 3092; interface_accessors();
					State = 3093; Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3097; Match(VOID);
				State = 3098; identifier();
				State = 3100;
				_la = TokenStream.La(1);
				if (_la==LT) {
					{
					State = 3099; type_parameter_list();
					}
				}

				State = 3102; Match(OPEN_PARENS);
				State = 3104;
				_la = TokenStream.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
					{
					State = 3103; formal_parameter_list();
					}
				}

				State = 3106; Match(CLOSE_PARENS);
				State = 3108;
				_la = TokenStream.La(1);
				if (_la==WHERE) {
					{
					State = 3107; type_parameter_constraints_clauses();
					}
				}

				State = 3110; Match(SEMICOLON);
				}
				break;
			case 3:
				{
				State = 3112; Match(EVENT);
				State = 3113; type();
				State = 3114; identifier();
				State = 3115; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_method_declarationContext : ParserRuleContext {
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_method_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_method_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_method_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_method_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_method_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_method_declarationContext interface_method_declaration() {
		Interface_method_declarationContext _localctx = new Interface_method_declarationContext(Context, State);
		EnterRule(_localctx, 566, RULE_interface_method_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3120;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3119; attributes();
				}
			}

			State = 3123;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3122; Match(NEW);
				}
			}

			State = 3125; return_type();
			State = 3126; identifier();
			State = 3128;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3127; type_parameter_list();
				}
			}

			State = 3130; Match(OPEN_PARENS);
			State = 3132;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3131; formal_parameter_list();
				}
			}

			State = 3134; Match(CLOSE_PARENS);
			State = 3136;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3135; type_parameter_constraints_clauses();
				}
			}

			State = 3138; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_property_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Interface_property_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_property_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_property_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_property_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_property_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_property_declarationContext interface_property_declaration() {
		Interface_property_declarationContext _localctx = new Interface_property_declarationContext(Context, State);
		EnterRule(_localctx, 568, RULE_interface_property_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3141;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3140; attributes();
				}
			}

			State = 3144;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3143; Match(NEW);
				}
			}

			State = 3146; type();
			State = 3147; identifier();
			State = 3148; Match(OPEN_BRACE);
			State = 3149; interface_accessors();
			State = 3150; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_accessorsContext : ParserRuleContext {
		public Get_contextual_keywordContext get_contextual_keyword() {
			return GetRuleContext<Get_contextual_keywordContext>(0);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(CSharp4Parser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharp4Parser.SEMICOLON, i);
		}
		public Set_contextual_keywordContext set_contextual_keyword() {
			return GetRuleContext<Set_contextual_keywordContext>(0);
		}
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public Interface_accessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_accessors; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_accessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_accessors(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_accessors(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_accessorsContext interface_accessors() {
		Interface_accessorsContext _localctx = new Interface_accessorsContext(Context, State);
		EnterRule(_localctx, 570, RULE_interface_accessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3153;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3152; attributes();
				}
			}

			State = 3175;
			switch (TokenStream.La(1)) {
			case GET:
				{
				State = 3155; get_contextual_keyword();
				State = 3156; Match(SEMICOLON);
				State = 3163;
				_la = TokenStream.La(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					State = 3158;
					_la = TokenStream.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 3157; attributes();
						}
					}

					State = 3160; set_contextual_keyword();
					State = 3161; Match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				State = 3165; set_contextual_keyword();
				State = 3166; Match(SEMICOLON);
				State = 3173;
				_la = TokenStream.La(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					State = 3168;
					_la = TokenStream.La(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 3167; attributes();
						}
					}

					State = 3170; get_contextual_keyword();
					State = 3171; Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_event_declarationContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Interface_event_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_event_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_event_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_event_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_event_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_event_declarationContext interface_event_declaration() {
		Interface_event_declarationContext _localctx = new Interface_event_declarationContext(Context, State);
		EnterRule(_localctx, 572, RULE_interface_event_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3178;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3177; attributes();
				}
			}

			State = 3181;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3180; Match(NEW);
				}
			}

			State = 3183; Match(EVENT);
			State = 3184; type();
			State = 3185; identifier();
			State = 3186; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_indexer_declarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public Interface_indexer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_indexer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_indexer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_indexer_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_indexer_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_indexer_declarationContext interface_indexer_declaration() {
		Interface_indexer_declarationContext _localctx = new Interface_indexer_declarationContext(Context, State);
		EnterRule(_localctx, 574, RULE_interface_indexer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3189;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3188; attributes();
				}
			}

			State = 3192;
			_la = TokenStream.La(1);
			if (_la==NEW) {
				{
				State = 3191; Match(NEW);
				}
			}

			State = 3194; type();
			State = 3195; Match(THIS);
			State = 3196; Match(OPEN_BRACKET);
			State = 3197; formal_parameter_list();
			State = 3198; Match(CLOSE_BRACKET);
			State = 3199; Match(OPEN_BRACE);
			State = 3200; interface_accessors();
			State = 3201; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declarationContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(CSharp4Parser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Enum_modifiersContext enum_modifiers() {
			return GetRuleContext<Enum_modifiersContext>(0);
		}
		public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Enum_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declarationContext enum_declaration() {
		Enum_declarationContext _localctx = new Enum_declarationContext(Context, State);
		EnterRule(_localctx, 576, RULE_enum_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3204;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3203; attributes();
				}
			}

			State = 3207;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)))) != 0)) {
				{
				State = 3206; enum_modifiers();
				}
			}

			State = 3209; Match(ENUM);
			State = 3210; identifier();
			State = 3212;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3211; enum_base();
				}
			}

			State = 3214; enum_body();
			State = 3216;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3215; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_baseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Integral_typeContext integral_type() {
			return GetRuleContext<Integral_typeContext>(0);
		}
		public Enum_baseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_base; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_base(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_base(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_base(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_baseContext enum_base() {
		Enum_baseContext _localctx = new Enum_baseContext(Context, State);
		EnterRule(_localctx, 578, RULE_enum_base);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3218; Match(COLON);
			State = 3219; integral_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_bodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Enum_member_declarationsContext enum_member_declarations() {
			return GetRuleContext<Enum_member_declarationsContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Enum_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_body; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_body(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_body(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_bodyContext enum_body() {
		Enum_bodyContext _localctx = new Enum_bodyContext(Context, State);
		EnterRule(_localctx, 580, RULE_enum_body);
		int _la;
		try {
			State = 3230;
			switch ( Interpreter.AdaptivePredict(TokenStream,333,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3221; Match(OPEN_BRACE);
				State = 3222; Match(CLOSE_BRACE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3223; Match(OPEN_BRACE);
				State = 3224; enum_member_declarations();
				State = 3226;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 3225; Match(COMMA);
					}
				}

				State = 3228; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_modifiersContext : ParserRuleContext {
		public Enum_modifierContext[] enum_modifier() {
			return GetRuleContexts<Enum_modifierContext>();
		}
		public Enum_modifierContext enum_modifier(int i) {
			return GetRuleContext<Enum_modifierContext>(i);
		}
		public Enum_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_modifiersContext enum_modifiers() {
		Enum_modifiersContext _localctx = new Enum_modifiersContext(Context, State);
		EnterRule(_localctx, 582, RULE_enum_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3233;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3232; enum_modifier();
				}
				}
				State = 3235;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Enum_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_modifierContext enum_modifier() {
		Enum_modifierContext _localctx = new Enum_modifierContext(Context, State);
		EnterRule(_localctx, 584, RULE_enum_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3237;
			_la = TokenStream.La(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationsContext : ParserRuleContext {
		public Enum_member_declarationContext[] enum_member_declaration() {
			return GetRuleContexts<Enum_member_declarationContext>();
		}
		public Enum_member_declarationContext enum_member_declaration(int i) {
			return GetRuleContext<Enum_member_declarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Enum_member_declarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_member_declarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_member_declarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationsContext enum_member_declarations() {
		Enum_member_declarationsContext _localctx = new Enum_member_declarationsContext(Context, State);
		EnterRule(_localctx, 586, RULE_enum_member_declarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3239; enum_member_declaration();
			State = 3244;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3240; Match(COMMA);
					State = 3241; enum_member_declaration();
					}
					} 
				}
				State = 3246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,335,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_member_declarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public Enum_member_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_member_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_member_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_member_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_member_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_member_declarationContext enum_member_declaration() {
		Enum_member_declarationContext _localctx = new Enum_member_declarationContext(Context, State);
		EnterRule(_localctx, 588, RULE_enum_member_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3248;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3247; attributes();
				}
			}

			State = 3250; identifier();
			State = 3253;
			_la = TokenStream.La(1);
			if (_la==ASSIGNMENT) {
				{
				State = 3251; Match(ASSIGNMENT);
				State = 3252; constant_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_declarationContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Delegate_modifiersContext delegate_modifiers() {
			return GetRuleContext<Delegate_modifiersContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_declarationContext delegate_declaration() {
		Delegate_declarationContext _localctx = new Delegate_declarationContext(Context, State);
		EnterRule(_localctx, 590, RULE_delegate_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3256;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3255; attributes();
				}
			}

			State = 3259;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 3258; delegate_modifiers();
				}
			}

			State = 3261; Match(DELEGATE);
			State = 3262; return_type();
			State = 3263; identifier();
			State = 3265;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3264; variant_type_parameter_list();
				}
			}

			State = 3267; Match(OPEN_PARENS);
			State = 3269;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3268; formal_parameter_list();
				}
			}

			State = 3271; Match(CLOSE_PARENS);
			State = 3273;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3272; type_parameter_constraints_clauses();
				}
			}

			State = 3275; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_modifiersContext : ParserRuleContext {
		public Delegate_modifierContext[] delegate_modifier() {
			return GetRuleContexts<Delegate_modifierContext>();
		}
		public Delegate_modifierContext delegate_modifier(int i) {
			return GetRuleContext<Delegate_modifierContext>(i);
		}
		public Delegate_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_modifiersContext delegate_modifiers() {
		Delegate_modifiersContext _localctx = new Delegate_modifiersContext(Context, State);
		EnterRule(_localctx, 592, RULE_delegate_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3277; delegate_modifier();
			State = 3281;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				{
				State = 3278; delegate_modifier();
				}
				}
				State = 3283;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public Delegate_modifier_unsafeContext delegate_modifier_unsafe() {
			return GetRuleContext<Delegate_modifier_unsafeContext>(0);
		}
		public Delegate_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_modifierContext delegate_modifier() {
		Delegate_modifierContext _localctx = new Delegate_modifierContext(Context, State);
		EnterRule(_localctx, 594, RULE_delegate_modifier);
		try {
			State = 3290;
			switch (TokenStream.La(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3284; Match(NEW);
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3285; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3286; Match(PROTECTED);
				}
				break;
			case INTERNAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3287; Match(INTERNAL);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3288; Match(PRIVATE);
				}
				break;
			case UNSAFE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3289; delegate_modifier_unsafe();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attributesContext : ParserRuleContext {
		public Global_attribute_sectionsContext global_attribute_sections() {
			return GetRuleContext<Global_attribute_sectionsContext>(0);
		}
		public Global_attributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attributesContext global_attributes() {
		Global_attributesContext _localctx = new Global_attributesContext(Context, State);
		EnterRule(_localctx, 596, RULE_global_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3292; global_attribute_sections();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionsContext : ParserRuleContext {
		public Global_attribute_sectionContext[] global_attribute_section() {
			return GetRuleContexts<Global_attribute_sectionContext>();
		}
		public Global_attribute_sectionContext global_attribute_section(int i) {
			return GetRuleContext<Global_attribute_sectionContext>(i);
		}
		public Global_attribute_sectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_sections; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_sections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_sections(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_sections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionsContext global_attribute_sections() {
		Global_attribute_sectionsContext _localctx = new Global_attribute_sectionsContext(Context, State);
		EnterRule(_localctx, 598, RULE_global_attribute_sections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3295;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3294; global_attribute_section();
				}
				}
				State = 3297;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_sectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Global_attribute_target_specifierContext global_attribute_target_specifier() {
			return GetRuleContext<Global_attribute_target_specifierContext>(0);
		}
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Global_attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_sectionContext global_attribute_section() {
		Global_attribute_sectionContext _localctx = new Global_attribute_sectionContext(Context, State);
		EnterRule(_localctx, 600, RULE_global_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3299; Match(OPEN_BRACKET);
			State = 3300; global_attribute_target_specifier();
			State = 3301; attribute_list();
			State = 3303;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 3302; Match(COMMA);
				}
			}

			State = 3305; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_target_specifierContext : ParserRuleContext {
		public Global_attribute_targetContext global_attribute_target() {
			return GetRuleContext<Global_attribute_targetContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Global_attribute_target_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_target_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_target_specifierContext global_attribute_target_specifier() {
		Global_attribute_target_specifierContext _localctx = new Global_attribute_target_specifierContext(Context, State);
		EnterRule(_localctx, 602, RULE_global_attribute_target_specifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3307; global_attribute_target();
			State = 3308; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Global_attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Global_attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_global_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGlobal_attribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGlobal_attribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobal_attribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Global_attribute_targetContext global_attribute_target() {
		Global_attribute_targetContext _localctx = new Global_attribute_targetContext(Context, State);
		EnterRule(_localctx, 604, RULE_global_attribute_target);
		try {
			State = 3312;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3310; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3311; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public Attribute_sectionsContext attribute_sections() {
			return GetRuleContext<Attribute_sectionsContext>(0);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 606, RULE_attributes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3314; attribute_sections();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionsContext : ParserRuleContext {
		public Attribute_sectionContext[] attribute_section() {
			return GetRuleContexts<Attribute_sectionContext>();
		}
		public Attribute_sectionContext attribute_section(int i) {
			return GetRuleContext<Attribute_sectionContext>(i);
		}
		public Attribute_sectionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_sections; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_sections(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_sections(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_sections(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionsContext attribute_sections() {
		Attribute_sectionsContext _localctx = new Attribute_sectionsContext(Context, State);
		EnterRule(_localctx, 608, RULE_attribute_sections);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3317;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3316; attribute_section();
				}
				}
				State = 3319;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_sectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Attribute_listContext attribute_list() {
			return GetRuleContext<Attribute_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Attribute_target_specifierContext attribute_target_specifier() {
			return GetRuleContext<Attribute_target_specifierContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Attribute_sectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_section; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_section(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_section(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_section(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_sectionContext attribute_section() {
		Attribute_sectionContext _localctx = new Attribute_sectionContext(Context, State);
		EnterRule(_localctx, 610, RULE_attribute_section);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3321; Match(OPEN_BRACKET);
			State = 3323;
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				{
				State = 3322; attribute_target_specifier();
				}
				break;
			}
			State = 3325; attribute_list();
			State = 3327;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 3326; Match(COMMA);
				}
			}

			State = 3329; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_target_specifierContext : ParserRuleContext {
		public Attribute_targetContext attribute_target() {
			return GetRuleContext<Attribute_targetContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharp4Parser.COLON, 0); }
		public Attribute_target_specifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target_specifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_target_specifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_target_specifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_target_specifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_target_specifierContext attribute_target_specifier() {
		Attribute_target_specifierContext _localctx = new Attribute_target_specifierContext(Context, State);
		EnterRule(_localctx, 612, RULE_attribute_target_specifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3331; attribute_target();
			State = 3332; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_targetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Attribute_targetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_target; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_target(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_target(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_target(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_targetContext attribute_target() {
		Attribute_targetContext _localctx = new Attribute_targetContext(Context, State);
		EnterRule(_localctx, 614, RULE_attribute_target);
		try {
			State = 3336;
			switch (TokenStream.La(1)) {
			case ABSTRACT:
			case AS:
			case BASE:
			case BOOL:
			case BREAK:
			case BYTE:
			case CASE:
			case CATCH:
			case CHAR:
			case CHECKED:
			case CLASS:
			case CONST:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DO:
			case DOUBLE:
			case ELSE:
			case ENUM:
			case EVENT:
			case EXPLICIT:
			case EXTERN:
			case FALSE:
			case FINALLY:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case GOTO:
			case IF:
			case IMPLICIT:
			case IN:
			case INT:
			case INTERFACE:
			case INTERNAL:
			case IS:
			case LOCK:
			case LONG:
			case NAMESPACE:
			case NEW:
			case NULL:
			case OBJECT:
			case OPERATOR:
			case OUT:
			case OVERRIDE:
			case PARAMS:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case RETURN:
			case SBYTE:
			case SEALED:
			case SHORT:
			case SIZEOF:
			case STACKALLOC:
			case STATIC:
			case STRING:
			case STRUCT:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VIRTUAL:
			case VOID:
			case VOLATILE:
			case WHILE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3334; keyword();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3335; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_listContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Attribute_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_listContext attribute_list() {
		Attribute_listContext _localctx = new Attribute_listContext(Context, State);
		EnterRule(_localctx, 616, RULE_attribute_list);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3338; attribute();
			State = 3343;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,352,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3339; Match(COMMA);
					State = 3340; attribute();
					}
					} 
				}
				State = 3345;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,352,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return GetRuleContext<Attribute_nameContext>(0);
		}
		public Attribute_argumentsContext attribute_arguments() {
			return GetRuleContext<Attribute_argumentsContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 618, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3346; attribute_name();
			State = 3348;
			_la = TokenStream.La(1);
			if (_la==OPEN_PARENS) {
				{
				State = 3347; attribute_arguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_nameContext : ParserRuleContext {
		public Type_nameContext type_name() {
			return GetRuleContext<Type_nameContext>(0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_nameContext attribute_name() {
		Attribute_nameContext _localctx = new Attribute_nameContext(Context, State);
		EnterRule(_localctx, 620, RULE_attribute_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3350; type_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argumentsContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Positional_argument_listContext positional_argument_list() {
			return GetRuleContext<Positional_argument_listContext>(0);
		}
		public Attribute_argumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_arguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_arguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_arguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argumentsContext attribute_arguments() {
		Attribute_argumentsContext _localctx = new Attribute_argumentsContext(Context, State);
		EnterRule(_localctx, 622, RULE_attribute_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3352; Match(OPEN_PARENS);
			State = 3354;
			_la = TokenStream.La(1);
			if (((((_la - 10)) & ~0x3f) == 0 && ((1L << (_la - 10)) & ((1L << (ADD - 10)) | (1L << (ALIAS - 10)) | (1L << (ARGLIST - 10)) | (1L << (ASCENDING - 10)) | (1L << (BASE - 10)) | (1L << (BOOL - 10)) | (1L << (BY - 10)) | (1L << (BYTE - 10)) | (1L << (CHAR - 10)) | (1L << (CHECKED - 10)) | (1L << (DECIMAL - 10)) | (1L << (DEFAULT - 10)) | (1L << (DELEGATE - 10)) | (1L << (DESCENDING - 10)) | (1L << (DOUBLE - 10)) | (1L << (DYNAMIC - 10)) | (1L << (EQUALS - 10)) | (1L << (FALSE - 10)) | (1L << (FLOAT - 10)) | (1L << (FROM - 10)) | (1L << (GET - 10)) | (1L << (GROUP - 10)) | (1L << (INT - 10)) | (1L << (INTO - 10)) | (1L << (JOIN - 10)) | (1L << (LET - 10)) | (1L << (LONG - 10)) | (1L << (NEW - 10)) | (1L << (NULL - 10)) | (1L << (OBJECT - 10)) | (1L << (ON - 10)) | (1L << (ORDERBY - 10)) | (1L << (PARTIAL - 10)))) != 0) || ((((_la - 78)) & ~0x3f) == 0 && ((1L << (_la - 78)) & ((1L << (REMOVE - 78)) | (1L << (SBYTE - 78)) | (1L << (SELECT - 78)) | (1L << (SET - 78)) | (1L << (SHORT - 78)) | (1L << (SIZEOF - 78)) | (1L << (STRING - 78)) | (1L << (THIS - 78)) | (1L << (TRUE - 78)) | (1L << (TYPEOF - 78)) | (1L << (UINT - 78)) | (1L << (ULONG - 78)) | (1L << (UNCHECKED - 78)) | (1L << (USHORT - 78)) | (1L << (WHERE - 78)) | (1L << (YIELD - 78)) | (1L << (IDENTIFIER - 78)) | (1L << (INTEGER_LITERAL - 78)) | (1L << (REAL_LITERAL - 78)) | (1L << (CHARACTER_LITERAL - 78)) | (1L << (STRING_LITERAL - 78)) | (1L << (OPEN_PARENS - 78)) | (1L << (PLUS - 78)) | (1L << (MINUS - 78)) | (1L << (STAR - 78)) | (1L << (AMP - 78)) | (1L << (BANG - 78)) | (1L << (TILDE - 78)) | (1L << (OP_INC - 78)) | (1L << (OP_DEC - 78)))) != 0)) {
				{
				State = 3353; positional_argument_list();
				}
			}

			State = 3356; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positional_argument_listContext : ParserRuleContext {
		public Positional_argumentContext arg;
		public Positional_argumentContext arg2;
		public Positional_argumentContext[] positional_argument() {
			return GetRuleContexts<Positional_argumentContext>();
		}
		public Positional_argumentContext positional_argument(int i) {
			return GetRuleContext<Positional_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Positional_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positional_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPositional_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPositional_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositional_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Positional_argument_listContext positional_argument_list() {
		Positional_argument_listContext _localctx = new Positional_argument_listContext(Context, State);
		EnterRule(_localctx, 624, RULE_positional_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3358; _localctx.arg = positional_argument();
			State = 3363;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3359; Match(COMMA);
				State = 3360; _localctx.arg2 = positional_argument();
				}
				}
				State = 3365;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Positional_argumentContext : ParserRuleContext {
		public Attribute_argument_expressionContext attribute_argument_expression() {
			return GetRuleContext<Attribute_argument_expressionContext>(0);
		}
		public Positional_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_positional_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPositional_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPositional_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPositional_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Positional_argumentContext positional_argument() {
		Positional_argumentContext _localctx = new Positional_argumentContext(Context, State);
		EnterRule(_localctx, 626, RULE_positional_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3366; attribute_argument_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argument_listContext : ParserRuleContext {
		public Named_argumentContext[] named_argument() {
			return GetRuleContexts<Named_argumentContext>();
		}
		public Named_argumentContext named_argument(int i) {
			return GetRuleContext<Named_argumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Named_argument_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamed_argument_list(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamed_argument_list(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_argument_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_argument_listContext named_argument_list() {
		Named_argument_listContext _localctx = new Named_argument_listContext(Context, State);
		EnterRule(_localctx, 628, RULE_named_argument_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3368; named_argument();
			State = 3373;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3369; Match(COMMA);
				State = 3370; named_argument();
				}
				}
				State = 3375;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Named_argumentContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Attribute_argument_expressionContext attribute_argument_expression() {
			return GetRuleContext<Attribute_argument_expressionContext>(0);
		}
		public Named_argumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_named_argument; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterNamed_argument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitNamed_argument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNamed_argument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Named_argumentContext named_argument() {
		Named_argumentContext _localctx = new Named_argumentContext(Context, State);
		EnterRule(_localctx, 630, RULE_named_argument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3376; identifier();
			State = 3377; Match(ASSIGNMENT);
			State = 3378; attribute_argument_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_argument_expressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Attribute_argument_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_argument_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAttribute_argument_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAttribute_argument_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_argument_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_argument_expressionContext attribute_argument_expression() {
		Attribute_argument_expressionContext _localctx = new Attribute_argument_expressionContext(Context, State);
		EnterRule(_localctx, 632, RULE_attribute_argument_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3380; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Class_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_modifier_unsafeContext class_modifier_unsafe() {
		Class_modifier_unsafeContext _localctx = new Class_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 634, RULE_class_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3382; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Struct_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_modifier_unsafeContext struct_modifier_unsafe() {
		Struct_modifier_unsafeContext _localctx = new Struct_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 636, RULE_struct_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3384; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Interface_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_modifier_unsafeContext interface_modifier_unsafe() {
		Interface_modifier_unsafeContext _localctx = new Interface_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 638, RULE_interface_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3386; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Delegate_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_modifier_unsafeContext delegate_modifier_unsafe() {
		Delegate_modifier_unsafeContext _localctx = new Delegate_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 640, RULE_delegate_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3388; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Field_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterField_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitField_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_modifier_unsafeContext field_modifier_unsafe() {
		Field_modifier_unsafeContext _localctx = new Field_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 642, RULE_field_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3390; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Method_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_modifier_unsafeContext method_modifier_unsafe() {
		Method_modifier_unsafeContext _localctx = new Method_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 644, RULE_method_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3392; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Property_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_modifier_unsafeContext property_modifier_unsafe() {
		Property_modifier_unsafeContext _localctx = new Property_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 646, RULE_property_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3394; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Event_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_modifier_unsafeContext event_modifier_unsafe() {
		Event_modifier_unsafeContext _localctx = new Event_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 648, RULE_event_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3396; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Indexer_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_modifier_unsafeContext indexer_modifier_unsafe() {
		Indexer_modifier_unsafeContext _localctx = new Indexer_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 650, RULE_indexer_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3398; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Operator_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_modifier_unsafeContext operator_modifier_unsafe() {
		Operator_modifier_unsafeContext _localctx = new Operator_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 652, RULE_operator_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3400; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_modifier_unsafeContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Constructor_modifier_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_modifier_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_modifier_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_modifier_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_modifier_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_modifier_unsafeContext constructor_modifier_unsafe() {
		Constructor_modifier_unsafeContext _localctx = new Constructor_modifier_unsafeContext(Context, State);
		EnterRule(_localctx, 654, RULE_constructor_modifier_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3402; Match(UNSAFE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_declaration_unsafeContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return GetRuleContext<Destructor_bodyContext>(0);
		}
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Destructor_declaration_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_declaration_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDestructor_declaration_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDestructor_declaration_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_declaration_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_declaration_unsafeContext destructor_declaration_unsafe() {
		Destructor_declaration_unsafeContext _localctx = new Destructor_declaration_unsafeContext(Context, State);
		EnterRule(_localctx, 656, RULE_destructor_declaration_unsafe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3405;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3404; attributes();
				}
			}

			State = 3415;
			switch ( Interpreter.AdaptivePredict(TokenStream,360,Context) ) {
			case 1:
				{
				State = 3408;
				_la = TokenStream.La(1);
				if (_la==EXTERN) {
					{
					State = 3407; Match(EXTERN);
					}
				}

				State = 3411;
				_la = TokenStream.La(1);
				if (_la==UNSAFE) {
					{
					State = 3410; Match(UNSAFE);
					}
				}

				}
				break;
			case 2:
				{
				State = 3413; Match(UNSAFE);
				State = 3414; Match(EXTERN);
				}
				break;
			}
			State = 3417; Match(TILDE);
			State = 3418; identifier();
			State = 3419; Match(OPEN_PARENS);
			State = 3420; Match(CLOSE_PARENS);
			State = 3421; destructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Static_constructor_modifiers_unsafeContext : ParserRuleContext {
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Static_constructor_modifiers_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_static_constructor_modifiers_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStatic_constructor_modifiers_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStatic_constructor_modifiers_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatic_constructor_modifiers_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Static_constructor_modifiers_unsafeContext static_constructor_modifiers_unsafe() {
		Static_constructor_modifiers_unsafeContext _localctx = new Static_constructor_modifiers_unsafeContext(Context, State);
		EnterRule(_localctx, 658, RULE_static_constructor_modifiers_unsafe);
		int _la;
		try {
			State = 3447;
			switch ( Interpreter.AdaptivePredict(TokenStream,362,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3424;
				_la = TokenStream.La(1);
				if (_la==EXTERN || _la==UNSAFE) {
					{
					State = 3423;
					_la = TokenStream.La(1);
					if ( !(_la==EXTERN || _la==UNSAFE) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
				}

				State = 3426; Match(STATIC);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3427; Match(EXTERN);
				State = 3428; Match(UNSAFE);
				State = 3429; Match(STATIC);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3430; Match(UNSAFE);
				State = 3431; Match(EXTERN);
				State = 3432; Match(STATIC);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3433; Match(EXTERN);
				State = 3434; Match(STATIC);
				State = 3435; Match(UNSAFE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3436; Match(UNSAFE);
				State = 3437; Match(STATIC);
				State = 3438; Match(EXTERN);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3439; Match(STATIC);
				State = 3440;
				_la = TokenStream.La(1);
				if ( !(_la==EXTERN || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 3441; Match(STATIC);
				State = 3442; Match(EXTERN);
				State = 3443; Match(UNSAFE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 3444; Match(STATIC);
				State = 3445; Match(UNSAFE);
				State = 3446; Match(EXTERN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Embedded_statement_unsafeContext : ParserRuleContext {
		public Unsafe_statementContext unsafe_statement() {
			return GetRuleContext<Unsafe_statementContext>(0);
		}
		public Fixed_statementContext fixed_statement() {
			return GetRuleContext<Fixed_statementContext>(0);
		}
		public Embedded_statement_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embedded_statement_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEmbedded_statement_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEmbedded_statement_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmbedded_statement_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Embedded_statement_unsafeContext embedded_statement_unsafe() {
		Embedded_statement_unsafeContext _localctx = new Embedded_statement_unsafeContext(Context, State);
		EnterRule(_localctx, 660, RULE_embedded_statement_unsafe);
		try {
			State = 3451;
			switch (TokenStream.La(1)) {
			case UNSAFE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3449; unsafe_statement();
				}
				break;
			case FIXED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3450; fixed_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unsafe_statementContext : ParserRuleContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public Unsafe_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unsafe_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnsafe_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnsafe_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnsafe_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unsafe_statementContext unsafe_statement() {
		Unsafe_statementContext _localctx = new Unsafe_statementContext(Context, State);
		EnterRule(_localctx, 662, RULE_unsafe_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3453; Match(UNSAFE);
			State = 3454; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_unsafeContext : ParserRuleContext {
		public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		public Type_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterType_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitType_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Type_unsafeContext type_unsafe() {
		Type_unsafeContext _localctx = new Type_unsafeContext(Context, State);
		EnterRule(_localctx, 664, RULE_type_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3456; pointer_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_typeContext : ParserRuleContext {
		public Simple_typeContext simple_type() {
			return GetRuleContext<Simple_typeContext>(0);
		}
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public Rank_specifierContext[] rank_specifier() {
			return GetRuleContexts<Rank_specifierContext>();
		}
		public Rank_specifierContext rank_specifier(int i) {
			return GetRuleContext<Rank_specifierContext>(i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharp4Parser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharp4Parser.INTERR, i);
		}
		public Class_typeContext class_type() {
			return GetRuleContext<Class_typeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public Pointer_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPointer_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPointer_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_typeContext pointer_type() {
		Pointer_typeContext _localctx = new Pointer_typeContext(Context, State);
		EnterRule(_localctx, 666, RULE_pointer_type);
		int _la;
		try {
			State = 3480;
			switch (TokenStream.La(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3458; simple_type();
				State = 3463;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 3461;
					switch (TokenStream.La(1)) {
					case OPEN_BRACKET:
						{
						State = 3459; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 3460; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3465;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 3466; Match(STAR);
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3468; class_type();
				State = 3473;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 3471;
					switch (TokenStream.La(1)) {
					case OPEN_BRACKET:
						{
						State = 3469; rank_specifier();
						}
						break;
					case INTERR:
						{
						State = 3470; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 3475;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 3476; Match(STAR);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3478; Match(VOID);
				State = 3479; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unmanaged_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Unmanaged_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unmanaged_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnmanaged_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnmanaged_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnmanaged_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unmanaged_typeContext unmanaged_type() {
		Unmanaged_typeContext _localctx = new Unmanaged_typeContext(Context, State);
		EnterRule(_localctx, 668, RULE_unmanaged_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3482; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_no_array_creation_expression_unsafeContext : ParserRuleContext {
		public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Primary_no_array_creation_expression_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_no_array_creation_expression_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPrimary_no_array_creation_expression_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPrimary_no_array_creation_expression_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_no_array_creation_expression_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_no_array_creation_expression_unsafeContext primary_no_array_creation_expression_unsafe() {
		Primary_no_array_creation_expression_unsafeContext _localctx = new Primary_no_array_creation_expression_unsafeContext(Context, State);
		EnterRule(_localctx, 670, RULE_primary_no_array_creation_expression_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3484; primary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unary_expression_unsafeContext : ParserRuleContext {
		public Pointer_indirection_expressionContext pointer_indirection_expression() {
			return GetRuleContext<Pointer_indirection_expressionContext>(0);
		}
		public Addressof_expressionContext addressof_expression() {
			return GetRuleContext<Addressof_expressionContext>(0);
		}
		public Unary_expression_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterUnary_expression_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitUnary_expression_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expression_unsafeContext unary_expression_unsafe() {
		Unary_expression_unsafeContext _localctx = new Unary_expression_unsafeContext(Context, State);
		EnterRule(_localctx, 672, RULE_unary_expression_unsafe);
		try {
			State = 3488;
			switch (TokenStream.La(1)) {
			case STAR:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3486; pointer_indirection_expression();
				}
				break;
			case AMP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3487; addressof_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Pointer_indirection_expressionContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(CSharp4Parser.STAR, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Pointer_indirection_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointer_indirection_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPointer_indirection_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPointer_indirection_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPointer_indirection_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Pointer_indirection_expressionContext pointer_indirection_expression() {
		Pointer_indirection_expressionContext _localctx = new Pointer_indirection_expressionContext(Context, State);
		EnterRule(_localctx, 674, RULE_pointer_indirection_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3490; Match(STAR);
			State = 3491; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Addressof_expressionContext : ParserRuleContext {
		public ITerminalNode AMP() { return GetToken(CSharp4Parser.AMP, 0); }
		public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		public Addressof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addressof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAddressof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAddressof_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddressof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Addressof_expressionContext addressof_expression() {
		Addressof_expressionContext _localctx = new Addressof_expressionContext(Context, State);
		EnterRule(_localctx, 676, RULE_addressof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3493; Match(AMP);
			State = 3494; unary_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sizeof_expressionContext : ParserRuleContext {
		public ITerminalNode SIZEOF() { return GetToken(CSharp4Parser.SIZEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Unmanaged_typeContext unmanaged_type() {
			return GetRuleContext<Unmanaged_typeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Sizeof_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeof_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSizeof_expression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSizeof_expression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSizeof_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sizeof_expressionContext sizeof_expression() {
		Sizeof_expressionContext _localctx = new Sizeof_expressionContext(Context, State);
		EnterRule(_localctx, 678, RULE_sizeof_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3496; Match(SIZEOF);
			State = 3497; Match(OPEN_PARENS);
			State = 3498; unmanaged_type();
			State = 3499; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_statementContext : ParserRuleContext {
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public Pointer_typeContext pointer_type() {
			return GetRuleContext<Pointer_typeContext>(0);
		}
		public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
			return GetRuleContext<Fixed_pointer_declaratorsContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Embedded_statementContext embedded_statement() {
			return GetRuleContext<Embedded_statementContext>(0);
		}
		public Fixed_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_statementContext fixed_statement() {
		Fixed_statementContext _localctx = new Fixed_statementContext(Context, State);
		EnterRule(_localctx, 680, RULE_fixed_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3501; Match(FIXED);
			State = 3502; Match(OPEN_PARENS);
			State = 3503; pointer_type();
			State = 3504; fixed_pointer_declarators();
			State = 3505; Match(CLOSE_PARENS);
			State = 3506; embedded_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorsContext : ParserRuleContext {
		public Fixed_pointer_declaratorContext[] fixed_pointer_declarator() {
			return GetRuleContexts<Fixed_pointer_declaratorContext>();
		}
		public Fixed_pointer_declaratorContext fixed_pointer_declarator(int i) {
			return GetRuleContext<Fixed_pointer_declaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharp4Parser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharp4Parser.COMMA, i);
		}
		public Fixed_pointer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorsContext fixed_pointer_declarators() {
		Fixed_pointer_declaratorsContext _localctx = new Fixed_pointer_declaratorsContext(Context, State);
		EnterRule(_localctx, 682, RULE_fixed_pointer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3508; fixed_pointer_declarator();
			State = 3513;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 3509; Match(COMMA);
				State = 3510; fixed_pointer_declarator();
				}
				}
				State = 3515;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public Fixed_pointer_initializerContext fixed_pointer_initializer() {
			return GetRuleContext<Fixed_pointer_initializerContext>(0);
		}
		public Fixed_pointer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_pointer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_pointer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_declaratorContext fixed_pointer_declarator() {
		Fixed_pointer_declaratorContext _localctx = new Fixed_pointer_declaratorContext(Context, State);
		EnterRule(_localctx, 684, RULE_fixed_pointer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3516; identifier();
			State = 3517; Match(ASSIGNMENT);
			State = 3518; fixed_pointer_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_pointer_initializerContext : ParserRuleContext {
		public ITerminalNode AMP() { return GetToken(CSharp4Parser.AMP, 0); }
		public Variable_referenceContext variable_reference() {
			return GetRuleContext<Variable_referenceContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Fixed_pointer_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_pointer_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_pointer_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_pointer_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_pointer_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_pointer_initializerContext fixed_pointer_initializer() {
		Fixed_pointer_initializerContext _localctx = new Fixed_pointer_initializerContext(Context, State);
		EnterRule(_localctx, 686, RULE_fixed_pointer_initializer);
		try {
			State = 3523;
			switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3520; Match(AMP);
				State = 3521; variable_reference();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3522; expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_member_declaration_unsafeContext : ParserRuleContext {
		public Fixed_size_buffer_declarationContext fixed_size_buffer_declaration() {
			return GetRuleContext<Fixed_size_buffer_declarationContext>(0);
		}
		public Struct_member_declaration_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_member_declaration_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_member_declaration_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_member_declaration_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_member_declaration_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_member_declaration_unsafeContext struct_member_declaration_unsafe() {
		Struct_member_declaration_unsafeContext _localctx = new Struct_member_declaration_unsafeContext(Context, State);
		EnterRule(_localctx, 688, RULE_struct_member_declaration_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3525; fixed_size_buffer_declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declarationContext : ParserRuleContext {
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public Buffer_element_typeContext buffer_element_type() {
			return GetRuleContext<Buffer_element_typeContext>(0);
		}
		public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
			return GetRuleContext<Fixed_size_buffer_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public Fixed_size_buffer_modifiersContext fixed_size_buffer_modifiers() {
			return GetRuleContext<Fixed_size_buffer_modifiersContext>(0);
		}
		public Fixed_size_buffer_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declarationContext fixed_size_buffer_declaration() {
		Fixed_size_buffer_declarationContext _localctx = new Fixed_size_buffer_declarationContext(Context, State);
		EnterRule(_localctx, 690, RULE_fixed_size_buffer_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3528;
			_la = TokenStream.La(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 3527; attributes();
				}
			}

			State = 3531;
			_la = TokenStream.La(1);
			if (((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) {
				{
				State = 3530; fixed_size_buffer_modifiers();
				}
			}

			State = 3533; Match(FIXED);
			State = 3534; buffer_element_type();
			State = 3535; fixed_size_buffer_declarators();
			State = 3536; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_modifiersContext : ParserRuleContext {
		public Fixed_size_buffer_modifierContext[] fixed_size_buffer_modifier() {
			return GetRuleContexts<Fixed_size_buffer_modifierContext>();
		}
		public Fixed_size_buffer_modifierContext fixed_size_buffer_modifier(int i) {
			return GetRuleContext<Fixed_size_buffer_modifierContext>(i);
		}
		public Fixed_size_buffer_modifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_modifiers; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_modifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_modifiers(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_modifiers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_modifiersContext fixed_size_buffer_modifiers() {
		Fixed_size_buffer_modifiersContext _localctx = new Fixed_size_buffer_modifiersContext(Context, State);
		EnterRule(_localctx, 692, RULE_fixed_size_buffer_modifiers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3539;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3538; fixed_size_buffer_modifier();
				}
				}
				State = 3541;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( ((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_modifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public Fixed_size_buffer_modifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_modifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_modifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_modifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_modifierContext fixed_size_buffer_modifier() {
		Fixed_size_buffer_modifierContext _localctx = new Fixed_size_buffer_modifierContext(Context, State);
		EnterRule(_localctx, 694, RULE_fixed_size_buffer_modifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3543;
			_la = TokenStream.La(1);
			if ( !(((((_la - 55)) & ~0x3f) == 0 && ((1L << (_la - 55)) & ((1L << (INTERNAL - 55)) | (1L << (NEW - 55)) | (1L << (PRIVATE - 55)) | (1L << (PROTECTED - 55)) | (1L << (PUBLIC - 55)) | (1L << (UNSAFE - 55)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Buffer_element_typeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Buffer_element_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_buffer_element_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBuffer_element_type(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBuffer_element_type(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBuffer_element_type(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Buffer_element_typeContext buffer_element_type() {
		Buffer_element_typeContext _localctx = new Buffer_element_typeContext(Context, State);
		EnterRule(_localctx, 696, RULE_buffer_element_type);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3545; type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorsContext : ParserRuleContext {
		public Fixed_size_buffer_declaratorContext[] fixed_size_buffer_declarator() {
			return GetRuleContexts<Fixed_size_buffer_declaratorContext>();
		}
		public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator(int i) {
			return GetRuleContext<Fixed_size_buffer_declaratorContext>(i);
		}
		public Fixed_size_buffer_declaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_declarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorsContext fixed_size_buffer_declarators() {
		Fixed_size_buffer_declaratorsContext _localctx = new Fixed_size_buffer_declaratorsContext(Context, State);
		EnterRule(_localctx, 698, RULE_fixed_size_buffer_declarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3548;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 3547; fixed_size_buffer_declarator();
				}
				}
				State = 3550;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET))) != 0) || ((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & ((1L << (ON - 66)) | (1L << (ORDERBY - 66)) | (1L << (PARTIAL - 66)) | (1L << (REMOVE - 66)) | (1L << (SELECT - 66)) | (1L << (SET - 66)) | (1L << (WHERE - 66)) | (1L << (YIELD - 66)) | (1L << (IDENTIFIER - 66)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fixed_size_buffer_declaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Constant_expressionContext constant_expression() {
			return GetRuleContext<Constant_expressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Fixed_size_buffer_declaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixed_size_buffer_declarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFixed_size_buffer_declarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFixed_size_buffer_declarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixed_size_buffer_declarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fixed_size_buffer_declaratorContext fixed_size_buffer_declarator() {
		Fixed_size_buffer_declaratorContext _localctx = new Fixed_size_buffer_declaratorContext(Context, State);
		EnterRule(_localctx, 700, RULE_fixed_size_buffer_declarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3552; identifier();
			State = 3553; Match(OPEN_BRACKET);
			State = 3554; constant_expression();
			State = 3555; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Local_variable_initializer_unsafeContext : ParserRuleContext {
		public Stackalloc_initializerContext stackalloc_initializer() {
			return GetRuleContext<Stackalloc_initializerContext>(0);
		}
		public Local_variable_initializer_unsafeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_local_variable_initializer_unsafe; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLocal_variable_initializer_unsafe(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLocal_variable_initializer_unsafe(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocal_variable_initializer_unsafe(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Local_variable_initializer_unsafeContext local_variable_initializer_unsafe() {
		Local_variable_initializer_unsafeContext _localctx = new Local_variable_initializer_unsafeContext(Context, State);
		EnterRule(_localctx, 702, RULE_local_variable_initializer_unsafe);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3557; stackalloc_initializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stackalloc_initializerContext : ParserRuleContext {
		public ITerminalNode STACKALLOC() { return GetToken(CSharp4Parser.STACKALLOC, 0); }
		public Unmanaged_typeContext unmanaged_type() {
			return GetRuleContext<Unmanaged_typeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public Stackalloc_initializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stackalloc_initializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStackalloc_initializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStackalloc_initializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStackalloc_initializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stackalloc_initializerContext stackalloc_initializer() {
		Stackalloc_initializerContext _localctx = new Stackalloc_initializerContext(Context, State);
		EnterRule(_localctx, 704, RULE_stackalloc_initializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3559; Match(STACKALLOC);
			State = 3560; unmanaged_type();
			State = 3561; Match(OPEN_BRACKET);
			State = 3562; expression(0);
			State = 3563; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class From_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(CSharp4Parser.FROM, 0); }
		public From_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_from_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterFrom_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitFrom_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFrom_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public From_contextual_keywordContext from_contextual_keyword() {
		From_contextual_keywordContext _localctx = new From_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 706, RULE_from_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3565; Match(FROM);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Let_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(CSharp4Parser.LET, 0); }
		public Let_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_let_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLet_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLet_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLet_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Let_contextual_keywordContext let_contextual_keyword() {
		Let_contextual_keywordContext _localctx = new Let_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 708, RULE_let_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3567; Match(LET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Where_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(CSharp4Parser.WHERE, 0); }
		public Where_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_where_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterWhere_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitWhere_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhere_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Where_contextual_keywordContext where_contextual_keyword() {
		Where_contextual_keywordContext _localctx = new Where_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 710, RULE_where_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3569; Match(WHERE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Join_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(CSharp4Parser.JOIN, 0); }
		public Join_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_join_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterJoin_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitJoin_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJoin_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Join_contextual_keywordContext join_contextual_keyword() {
		Join_contextual_keywordContext _localctx = new Join_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 712, RULE_join_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3571; Match(JOIN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class On_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ON() { return GetToken(CSharp4Parser.ON, 0); }
		public On_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_on_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOn_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOn_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOn_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public On_contextual_keywordContext on_contextual_keyword() {
		On_contextual_keywordContext _localctx = new On_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 714, RULE_on_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3573; Match(ON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Equals_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode EQUALS() { return GetToken(CSharp4Parser.EQUALS, 0); }
		public Equals_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equals_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEquals_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEquals_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equals_contextual_keywordContext equals_contextual_keyword() {
		Equals_contextual_keywordContext _localctx = new Equals_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 716, RULE_equals_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3575; Match(EQUALS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Into_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(CSharp4Parser.INTO, 0); }
		public Into_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_into_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInto_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInto_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInto_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Into_contextual_keywordContext into_contextual_keyword() {
		Into_contextual_keywordContext _localctx = new Into_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 718, RULE_into_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3577; Match(INTO);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Orderby_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(CSharp4Parser.ORDERBY, 0); }
		public Orderby_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderby_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOrderby_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOrderby_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrderby_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Orderby_contextual_keywordContext orderby_contextual_keyword() {
		Orderby_contextual_keywordContext _localctx = new Orderby_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 720, RULE_orderby_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3579; Match(ORDERBY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ascending_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ASCENDING() { return GetToken(CSharp4Parser.ASCENDING, 0); }
		public Ascending_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascending_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAscending_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAscending_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAscending_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Ascending_contextual_keywordContext ascending_contextual_keyword() {
		Ascending_contextual_keywordContext _localctx = new Ascending_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 722, RULE_ascending_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3581; Match(ASCENDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Descending_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode DESCENDING() { return GetToken(CSharp4Parser.DESCENDING, 0); }
		public Descending_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_descending_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDescending_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDescending_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescending_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Descending_contextual_keywordContext descending_contextual_keyword() {
		Descending_contextual_keywordContext _localctx = new Descending_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 724, RULE_descending_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3583; Match(DESCENDING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Select_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(CSharp4Parser.SELECT, 0); }
		public Select_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSelect_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSelect_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Select_contextual_keywordContext select_contextual_keyword() {
		Select_contextual_keywordContext _localctx = new Select_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 726, RULE_select_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3585; Match(SELECT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Group_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode GROUP() { return GetToken(CSharp4Parser.GROUP, 0); }
		public Group_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_group_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGroup_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGroup_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGroup_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Group_contextual_keywordContext group_contextual_keyword() {
		Group_contextual_keywordContext _localctx = new Group_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 728, RULE_group_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3587; Match(GROUP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class By_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode BY() { return GetToken(CSharp4Parser.BY, 0); }
		public By_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_by_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBy_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBy_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBy_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public By_contextual_keywordContext by_contextual_keyword() {
		By_contextual_keywordContext _localctx = new By_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 730, RULE_by_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3589; Match(BY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Partial_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode PARTIAL() { return GetToken(CSharp4Parser.PARTIAL, 0); }
		public Partial_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partial_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterPartial_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitPartial_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPartial_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Partial_contextual_keywordContext partial_contextual_keyword() {
		Partial_contextual_keywordContext _localctx = new Partial_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 732, RULE_partial_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3591; Match(PARTIAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Alias_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ALIAS() { return GetToken(CSharp4Parser.ALIAS, 0); }
		public Alias_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alias_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAlias_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAlias_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAlias_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Alias_contextual_keywordContext alias_contextual_keyword() {
		Alias_contextual_keywordContext _localctx = new Alias_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 734, RULE_alias_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3593; Match(ALIAS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Yield_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode YIELD() { return GetToken(CSharp4Parser.YIELD, 0); }
		public Yield_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yield_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterYield_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitYield_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitYield_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Yield_contextual_keywordContext yield_contextual_keyword() {
		Yield_contextual_keywordContext _localctx = new Yield_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 736, RULE_yield_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3595; Match(YIELD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(CSharp4Parser.GET, 0); }
		public Get_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterGet_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitGet_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_contextual_keywordContext get_contextual_keyword() {
		Get_contextual_keywordContext _localctx = new Get_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 738, RULE_get_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3597; Match(GET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(CSharp4Parser.SET, 0); }
		public Set_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterSet_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitSet_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_contextual_keywordContext set_contextual_keyword() {
		Set_contextual_keywordContext _localctx = new Set_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 740, RULE_set_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3599; Match(SET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Add_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CSharp4Parser.ADD, 0); }
		public Add_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterAdd_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitAdd_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_contextual_keywordContext add_contextual_keyword() {
		Add_contextual_keywordContext _localctx = new Add_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 742, RULE_add_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3601; Match(ADD);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Remove_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode REMOVE() { return GetToken(CSharp4Parser.REMOVE, 0); }
		public Remove_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_remove_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRemove_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRemove_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRemove_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Remove_contextual_keywordContext remove_contextual_keyword() {
		Remove_contextual_keywordContext _localctx = new Remove_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 744, RULE_remove_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3603; Match(REMOVE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Dynamic_contextual_keywordContext : ParserRuleContext {
		public ITerminalNode DYNAMIC() { return GetToken(CSharp4Parser.DYNAMIC, 0); }
		public Dynamic_contextual_keywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamic_contextual_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDynamic_contextual_keyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDynamic_contextual_keyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamic_contextual_keyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Dynamic_contextual_keywordContext dynamic_contextual_keyword() {
		Dynamic_contextual_keywordContext _localctx = new Dynamic_contextual_keywordContext(Context, State);
		EnterRule(_localctx, 746, RULE_dynamic_contextual_keyword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3605; Match(DYNAMIC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArglistContext : ParserRuleContext {
		public ITerminalNode ARGLIST() { return GetToken(CSharp4Parser.ARGLIST, 0); }
		public ArglistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arglist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterArglist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitArglist(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArglist(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArglistContext arglist() {
		ArglistContext _localctx = new ArglistContext(Context, State);
		EnterRule(_localctx, 748, RULE_arglist);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3607; Match(ARGLIST);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_arrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharp4Parser.ASSIGNMENT, 0); }
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public Right_arrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_arrow; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRight_arrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRight_arrow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_arrow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_arrowContext right_arrow() {
		Right_arrowContext _localctx = new Right_arrowContext(Context, State);
		EnterRule(_localctx, 750, RULE_right_arrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3609; _localctx.first = Match(ASSIGNMENT);
			State = 3610; _localctx.second = Match(GT);
			State = 3611;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode[] GT() { return GetTokens(CSharp4Parser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(CSharp4Parser.GT, i);
		}
		public Right_shiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRight_shift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRight_shift(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shiftContext right_shift() {
		Right_shiftContext _localctx = new Right_shiftContext(Context, State);
		EnterRule(_localctx, 752, RULE_right_shift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3613; _localctx.first = Match(GT);
			State = 3614; _localctx.second = Match(GT);
			State = 3615;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Right_shift_assignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode GT() { return GetToken(CSharp4Parser.GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(CSharp4Parser.OP_GE, 0); }
		public Right_shift_assignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_right_shift_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterRight_shift_assignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitRight_shift_assignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRight_shift_assignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Right_shift_assignmentContext right_shift_assignment() {
		Right_shift_assignmentContext _localctx = new Right_shift_assignmentContext(Context, State);
		EnterRule(_localctx, 754, RULE_right_shift_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3617; _localctx.first = Match(GT);
			State = 3618; _localctx.second = Match(OP_GE);
			State = 3619;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public Boolean_literalContext boolean_literal() {
			return GetRuleContext<Boolean_literalContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(CSharp4Parser.INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(CSharp4Parser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(CSharp4Parser.CHARACTER_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(CSharp4Parser.STRING_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(CSharp4Parser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 756, RULE_literal);
		try {
			State = 3627;
			switch (TokenStream.La(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3621; boolean_literal();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3622; Match(INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3623; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3624; Match(CHARACTER_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3625; Match(STRING_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 3626; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Boolean_literalContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(CSharp4Parser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharp4Parser.FALSE, 0); }
		public Boolean_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolean_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterBoolean_literal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitBoolean_literal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Boolean_literalContext boolean_literal() {
		Boolean_literalContext _localctx = new Boolean_literalContext(Context, State);
		EnterRule(_localctx, 758, RULE_boolean_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3629;
			_la = TokenStream.La(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABSTRACT() { return GetToken(CSharp4Parser.ABSTRACT, 0); }
		public ITerminalNode AS() { return GetToken(CSharp4Parser.AS, 0); }
		public ITerminalNode BASE() { return GetToken(CSharp4Parser.BASE, 0); }
		public ITerminalNode BOOL() { return GetToken(CSharp4Parser.BOOL, 0); }
		public ITerminalNode BREAK() { return GetToken(CSharp4Parser.BREAK, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharp4Parser.BYTE, 0); }
		public ITerminalNode CASE() { return GetToken(CSharp4Parser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(CSharp4Parser.CATCH, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharp4Parser.CHAR, 0); }
		public ITerminalNode CHECKED() { return GetToken(CSharp4Parser.CHECKED, 0); }
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public ITerminalNode CONST() { return GetToken(CSharp4Parser.CONST, 0); }
		public ITerminalNode CONTINUE() { return GetToken(CSharp4Parser.CONTINUE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharp4Parser.DECIMAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(CSharp4Parser.DEFAULT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public ITerminalNode DO() { return GetToken(CSharp4Parser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharp4Parser.DOUBLE, 0); }
		public ITerminalNode ELSE() { return GetToken(CSharp4Parser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(CSharp4Parser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharp4Parser.EXPLICIT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharp4Parser.EXTERN, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharp4Parser.FALSE, 0); }
		public ITerminalNode FINALLY() { return GetToken(CSharp4Parser.FINALLY, 0); }
		public ITerminalNode FIXED() { return GetToken(CSharp4Parser.FIXED, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharp4Parser.FLOAT, 0); }
		public ITerminalNode FOR() { return GetToken(CSharp4Parser.FOR, 0); }
		public ITerminalNode FOREACH() { return GetToken(CSharp4Parser.FOREACH, 0); }
		public ITerminalNode GOTO() { return GetToken(CSharp4Parser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(CSharp4Parser.IF, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharp4Parser.IMPLICIT, 0); }
		public ITerminalNode IN() { return GetToken(CSharp4Parser.IN, 0); }
		public ITerminalNode INT() { return GetToken(CSharp4Parser.INT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(CSharp4Parser.INTERFACE, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharp4Parser.INTERNAL, 0); }
		public ITerminalNode IS() { return GetToken(CSharp4Parser.IS, 0); }
		public ITerminalNode LOCK() { return GetToken(CSharp4Parser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(CSharp4Parser.LONG, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(CSharp4Parser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(CSharp4Parser.NEW, 0); }
		public ITerminalNode NULL() { return GetToken(CSharp4Parser.NULL, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharp4Parser.OBJECT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public ITerminalNode OUT() { return GetToken(CSharp4Parser.OUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharp4Parser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(CSharp4Parser.PARAMS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharp4Parser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharp4Parser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharp4Parser.PUBLIC, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharp4Parser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(CSharp4Parser.REF, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharp4Parser.RETURN, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharp4Parser.SBYTE, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharp4Parser.SEALED, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharp4Parser.SHORT, 0); }
		public ITerminalNode SIZEOF() { return GetToken(CSharp4Parser.SIZEOF, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(CSharp4Parser.STACKALLOC, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharp4Parser.STATIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharp4Parser.STRING, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public ITerminalNode SWITCH() { return GetToken(CSharp4Parser.SWITCH, 0); }
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(CSharp4Parser.THROW, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharp4Parser.TRUE, 0); }
		public ITerminalNode TRY() { return GetToken(CSharp4Parser.TRY, 0); }
		public ITerminalNode TYPEOF() { return GetToken(CSharp4Parser.TYPEOF, 0); }
		public ITerminalNode UINT() { return GetToken(CSharp4Parser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharp4Parser.ULONG, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(CSharp4Parser.UNCHECKED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharp4Parser.UNSAFE, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharp4Parser.USHORT, 0); }
		public ITerminalNode USING() { return GetToken(CSharp4Parser.USING, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharp4Parser.VIRTUAL, 0); }
		public ITerminalNode VOID() { return GetToken(CSharp4Parser.VOID, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharp4Parser.VOLATILE, 0); }
		public ITerminalNode WHILE() { return GetToken(CSharp4Parser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 760, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3631;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << AS) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CASE) | (1L << CATCH) | (1L << CHAR) | (1L << CHECKED) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << ELSE) | (1L << ENUM) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FALSE) | (1L << FINALLY) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GOTO) | (1L << IF) | (1L << IMPLICIT) | (1L << IN) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << IS) | (1L << LOCK) | (1L << LONG) | (1L << NAMESPACE) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARAMS - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (RETURN - 64)) | (1L << (SBYTE - 64)) | (1L << (SEALED - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STACKALLOC - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (STRUCT - 64)) | (1L << (SWITCH - 64)) | (1L << (THIS - 64)) | (1L << (THROW - 64)) | (1L << (TRUE - 64)) | (1L << (TRY - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (VOLATILE - 64)) | (1L << (WHILE - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Class_definitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CSharp4Parser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Class_bodyContext class_body() {
			return GetRuleContext<Class_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Class_baseContext class_base() {
			return GetRuleContext<Class_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Class_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_class_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterClass_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitClass_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClass_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Class_definitionContext class_definition() {
		Class_definitionContext _localctx = new Class_definitionContext(Context, State);
		EnterRule(_localctx, 762, RULE_class_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3633; Match(CLASS);
			State = 3634; identifier();
			State = 3636;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3635; type_parameter_list();
				}
			}

			State = 3639;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3638; class_base();
				}
			}

			State = 3642;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3641; type_parameter_constraints_clauses();
				}
			}

			State = 3644; class_body();
			State = 3646;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3645; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(CSharp4Parser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Struct_bodyContext struct_body() {
			return GetRuleContext<Struct_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Struct_interfacesContext struct_interfaces() {
			return GetRuleContext<Struct_interfacesContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(Context, State);
		EnterRule(_localctx, 764, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3648; Match(STRUCT);
			State = 3649; identifier();
			State = 3651;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3650; type_parameter_list();
				}
			}

			State = 3654;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3653; struct_interfaces();
				}
			}

			State = 3657;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3656; type_parameter_constraints_clauses();
				}
			}

			State = 3659; struct_body();
			State = 3661;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3660; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_definitionContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(CSharp4Parser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Interface_bodyContext interface_body() {
			return GetRuleContext<Interface_bodyContext>(0);
		}
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Interface_baseContext interface_base() {
			return GetRuleContext<Interface_baseContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Interface_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_definitionContext interface_definition() {
		Interface_definitionContext _localctx = new Interface_definitionContext(Context, State);
		EnterRule(_localctx, 766, RULE_interface_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3663; Match(INTERFACE);
			State = 3664; identifier();
			State = 3666;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3665; variant_type_parameter_list();
				}
			}

			State = 3669;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3668; interface_base();
				}
			}

			State = 3672;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3671; type_parameter_constraints_clauses();
				}
			}

			State = 3674; interface_body();
			State = 3676;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3675; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_definitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(CSharp4Parser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Enum_bodyContext enum_body() {
			return GetRuleContext<Enum_bodyContext>(0);
		}
		public Enum_baseContext enum_base() {
			return GetRuleContext<Enum_baseContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Enum_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEnum_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEnum_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnum_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Enum_definitionContext enum_definition() {
		Enum_definitionContext _localctx = new Enum_definitionContext(Context, State);
		EnterRule(_localctx, 768, RULE_enum_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3678; Match(ENUM);
			State = 3679; identifier();
			State = 3681;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3680; enum_base();
				}
			}

			State = 3683; enum_body();
			State = 3685;
			_la = TokenStream.La(1);
			if (_la==SEMICOLON) {
				{
				State = 3684; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Delegate_definitionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharp4Parser.DELEGATE, 0); }
		public Return_typeContext return_type() {
			return GetRuleContext<Return_typeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Variant_type_parameter_listContext variant_type_parameter_list() {
			return GetRuleContext<Variant_type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Delegate_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegate_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDelegate_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDelegate_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelegate_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Delegate_definitionContext delegate_definition() {
		Delegate_definitionContext _localctx = new Delegate_definitionContext(Context, State);
		EnterRule(_localctx, 770, RULE_delegate_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3687; Match(DELEGATE);
			State = 3688; return_type();
			State = 3689; identifier();
			State = 3691;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3690; variant_type_parameter_list();
				}
			}

			State = 3693; Match(OPEN_PARENS);
			State = 3695;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3694; formal_parameter_list();
				}
			}

			State = 3697; Match(CLOSE_PARENS);
			State = 3699;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3698; type_parameter_constraints_clauses();
				}
			}

			State = 3701; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Event_declaration2Context : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Event_accessor_declarationsContext event_accessor_declarations() {
			return GetRuleContext<Event_accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Event_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_event_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterEvent_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitEvent_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEvent_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Event_declaration2Context event_declaration2() {
		Event_declaration2Context _localctx = new Event_declaration2Context(Context, State);
		EnterRule(_localctx, 772, RULE_event_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3703; Match(EVENT);
			State = 3704; type();
			State = 3713;
			switch ( Interpreter.AdaptivePredict(TokenStream,394,Context) ) {
			case 1:
				{
				State = 3705; variable_declarators();
				State = 3706; Match(SEMICOLON);
				}
				break;
			case 2:
				{
				State = 3708; member_name();
				State = 3709; Match(OPEN_BRACE);
				State = 3710; event_accessor_declarations();
				State = 3711; Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declaration2Context : ParserRuleContext {
		public Variable_declaratorsContext variable_declarators() {
			return GetRuleContext<Variable_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Field_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterField_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitField_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Field_declaration2Context field_declaration2() {
		Field_declaration2Context _localctx = new Field_declaration2Context(Context, State);
		EnterRule(_localctx, 774, RULE_field_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3715; variable_declarators();
			State = 3716; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_declaration2Context : ParserRuleContext {
		public Member_nameContext member_name() {
			return GetRuleContext<Member_nameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Property_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterProperty_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitProperty_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_declaration2Context property_declaration2() {
		Property_declaration2Context _localctx = new Property_declaration2Context(Context, State);
		EnterRule(_localctx, 776, RULE_property_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3718; member_name();
			State = 3719; Match(OPEN_BRACE);
			State = 3720; accessor_declarations();
			State = 3721; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constant_declaration2Context : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharp4Parser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Constant_declaratorsContext constant_declarators() {
			return GetRuleContext<Constant_declaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Constant_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstant_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstant_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstant_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constant_declaration2Context constant_declaration2() {
		Constant_declaration2Context _localctx = new Constant_declaration2Context(Context, State);
		EnterRule(_localctx, 778, RULE_constant_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3723; Match(CONST);
			State = 3724; type();
			State = 3725; constant_declarators();
			State = 3726; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Indexer_declaration2Context : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Accessor_declarationsContext accessor_declarations() {
			return GetRuleContext<Accessor_declarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Indexer_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexer_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterIndexer_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitIndexer_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndexer_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Indexer_declaration2Context indexer_declaration2() {
		Indexer_declaration2Context _localctx = new Indexer_declaration2Context(Context, State);
		EnterRule(_localctx, 780, RULE_indexer_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3728; Match(THIS);
			State = 3729; Match(OPEN_BRACKET);
			State = 3730; formal_parameter_list();
			State = 3731; Match(CLOSE_BRACKET);
			State = 3732; Match(OPEN_BRACE);
			State = 3733; accessor_declarations();
			State = 3734; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Destructor_definitionContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(CSharp4Parser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Destructor_bodyContext destructor_body() {
			return GetRuleContext<Destructor_bodyContext>(0);
		}
		public Destructor_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor_definition; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterDestructor_definition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitDestructor_definition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Destructor_definitionContext destructor_definition() {
		Destructor_definitionContext _localctx = new Destructor_definitionContext(Context, State);
		EnterRule(_localctx, 782, RULE_destructor_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3736; Match(TILDE);
			State = 3737; identifier();
			State = 3738; Match(OPEN_PARENS);
			State = 3739; Match(CLOSE_PARENS);
			State = 3740; destructor_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_declaration2Context : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Constructor_initializerContext constructor_initializer() {
			return GetRuleContext<Constructor_initializerContext>(0);
		}
		public Constructor_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterConstructor_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitConstructor_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_declaration2Context constructor_declaration2() {
		Constructor_declaration2Context _localctx = new Constructor_declaration2Context(Context, State);
		EnterRule(_localctx, 784, RULE_constructor_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3742; identifier();
			State = 3743; Match(OPEN_PARENS);
			State = 3745;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3744; formal_parameter_list();
				}
			}

			State = 3747; Match(CLOSE_PARENS);
			State = 3749;
			_la = TokenStream.La(1);
			if (_la==COLON) {
				{
				State = 3748; constructor_initializer();
				}
			}

			State = 3751; body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_declaration2Context : ParserRuleContext {
		public Method_member_nameContext method_member_name() {
			return GetRuleContext<Method_member_nameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Method_bodyContext method_body() {
			return GetRuleContext<Method_bodyContext>(0);
		}
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Method_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_declaration2Context method_declaration2() {
		Method_declaration2Context _localctx = new Method_declaration2Context(Context, State);
		EnterRule(_localctx, 786, RULE_method_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3753; method_member_name();
			State = 3755;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3754; type_parameter_list();
				}
			}

			State = 3757; Match(OPEN_PARENS);
			State = 3759;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3758; formal_parameter_list();
				}
			}

			State = 3761; Match(CLOSE_PARENS);
			State = 3763;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3762; type_parameter_constraints_clauses();
				}
			}

			State = 3765; method_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_nameContext : ParserRuleContext {
		public Method_member_name2Context method_member_name2() {
			return GetRuleContext<Method_member_name2Context>(0);
		}
		public Method_member_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_member_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_member_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_member_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_nameContext method_member_name() {
		Method_member_nameContext _localctx = new Method_member_nameContext(Context, State);
		EnterRule(_localctx, 788, RULE_method_member_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3767; method_member_name2();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_member_name2Context : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(CSharp4Parser.DOUBLE_COLON, 0); }
		public Type_argument_list_optContext[] type_argument_list_opt() {
			return GetRuleContexts<Type_argument_list_optContext>();
		}
		public Type_argument_list_optContext type_argument_list_opt(int i) {
			return GetRuleContext<Type_argument_list_optContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(CSharp4Parser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharp4Parser.DOT, i);
		}
		public Method_member_name2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_member_name2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_member_name2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_member_name2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_member_name2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_member_name2Context method_member_name2() {
		Method_member_name2Context _localctx = new Method_member_name2Context(Context, State);
		EnterRule(_localctx, 790, RULE_method_member_name2);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3774;
			switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
			case 1:
				{
				State = 3769; identifier();
				}
				break;
			case 2:
				{
				State = 3770; identifier();
				State = 3771; Match(DOUBLE_COLON);
				State = 3772; identifier();
				}
				break;
			}
			State = 3782;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,401,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 3776; type_argument_list_opt();
					State = 3777; Match(DOT);
					State = 3778; identifier();
					}
					} 
				}
				State = 3784;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,401,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Operator_declaration2Context : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CSharp4Parser.OPERATOR, 0); }
		public Overloadable_operatorContext overloadable_operator() {
			return GetRuleContext<Overloadable_operatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Operator_bodyContext operator_body() {
			return GetRuleContext<Operator_bodyContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharp4Parser.COMMA, 0); }
		public Operator_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operator_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterOperator_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitOperator_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOperator_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Operator_declaration2Context operator_declaration2() {
		Operator_declaration2Context _localctx = new Operator_declaration2Context(Context, State);
		EnterRule(_localctx, 792, RULE_operator_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3785; Match(OPERATOR);
			State = 3786; overloadable_operator();
			State = 3787; Match(OPEN_PARENS);
			State = 3788; type();
			State = 3789; identifier();
			State = 3794;
			_la = TokenStream.La(1);
			if (_la==COMMA) {
				{
				State = 3790; Match(COMMA);
				State = 3791; type();
				State = 3792; identifier();
				}
			}

			State = 3796; Match(CLOSE_PARENS);
			State = 3797; operator_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_method_declaration2Context : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Type_parameter_listContext type_parameter_list() {
			return GetRuleContext<Type_parameter_listContext>(0);
		}
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public Type_parameter_constraints_clausesContext type_parameter_constraints_clauses() {
			return GetRuleContext<Type_parameter_constraints_clausesContext>(0);
		}
		public Interface_method_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_method_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_method_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_method_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_method_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_method_declaration2Context interface_method_declaration2() {
		Interface_method_declaration2Context _localctx = new Interface_method_declaration2Context(Context, State);
		EnterRule(_localctx, 794, RULE_interface_method_declaration2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3799; identifier();
			State = 3801;
			_la = TokenStream.La(1);
			if (_la==LT) {
				{
				State = 3800; type_parameter_list();
				}
			}

			State = 3803; Match(OPEN_PARENS);
			State = 3805;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARAMS - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (USHORT - 65)) | (1L << (VOID - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)))) != 0)) {
				{
				State = 3804; formal_parameter_list();
				}
			}

			State = 3807; Match(CLOSE_PARENS);
			State = 3809;
			_la = TokenStream.La(1);
			if (_la==WHERE) {
				{
				State = 3808; type_parameter_constraints_clauses();
				}
			}

			State = 3811; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_property_declaration2Context : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Interface_property_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_property_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_property_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_property_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_property_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_property_declaration2Context interface_property_declaration2() {
		Interface_property_declaration2Context _localctx = new Interface_property_declaration2Context(Context, State);
		EnterRule(_localctx, 796, RULE_interface_property_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3813; identifier();
			State = 3814; Match(OPEN_BRACE);
			State = 3815; interface_accessors();
			State = 3816; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_event_declaration2Context : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharp4Parser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharp4Parser.SEMICOLON, 0); }
		public Interface_event_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_event_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_event_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_event_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_event_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_event_declaration2Context interface_event_declaration2() {
		Interface_event_declaration2Context _localctx = new Interface_event_declaration2Context(Context, State);
		EnterRule(_localctx, 798, RULE_interface_event_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3818; Match(EVENT);
			State = 3819; type();
			State = 3820; identifier();
			State = 3821; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Interface_indexer_declaration2Context : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(CSharp4Parser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharp4Parser.OPEN_BRACKET, 0); }
		public Formal_parameter_listContext formal_parameter_list() {
			return GetRuleContext<Formal_parameter_listContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharp4Parser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharp4Parser.OPEN_BRACE, 0); }
		public Interface_accessorsContext interface_accessors() {
			return GetRuleContext<Interface_accessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharp4Parser.CLOSE_BRACE, 0); }
		public Interface_indexer_declaration2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interface_indexer_declaration2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterInterface_indexer_declaration2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitInterface_indexer_declaration2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterface_indexer_declaration2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Interface_indexer_declaration2Context interface_indexer_declaration2() {
		Interface_indexer_declaration2Context _localctx = new Interface_indexer_declaration2Context(Context, State);
		EnterRule(_localctx, 800, RULE_interface_indexer_declaration2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3823; Match(THIS);
			State = 3824; Match(OPEN_BRACKET);
			State = 3825; formal_parameter_list();
			State = 3826; Match(CLOSE_BRACKET);
			State = 3827; Match(OPEN_BRACE);
			State = 3828; interface_accessors();
			State = 3829; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Member_access2Context : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(CSharp4Parser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Member_access2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member_access2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMember_access2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMember_access2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember_access2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Member_access2Context member_access2() {
		Member_access2Context _localctx = new Member_access2Context(Context, State);
		EnterRule(_localctx, 802, RULE_member_access2);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3831; Match(DOT);
			State = 3832; identifier();
			State = 3833; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Scope_member_accessContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Type_argument_list_optContext type_argument_list_opt() {
			return GetRuleContext<Type_argument_list_optContext>(0);
		}
		public Scope_member_accessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope_member_access; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterScope_member_access(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitScope_member_access(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope_member_access(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Scope_member_accessContext scope_member_access() {
		Scope_member_accessContext _localctx = new Scope_member_accessContext(Context, State);
		EnterRule(_localctx, 804, RULE_scope_member_access);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3835; identifier();
			State = 3836; type_argument_list_opt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Method_invocation2Context : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Method_invocation2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method_invocation2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterMethod_invocation2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitMethod_invocation2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod_invocation2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Method_invocation2Context method_invocation2() {
		Method_invocation2Context _localctx = new Method_invocation2Context(Context, State);
		EnterRule(_localctx, 806, RULE_method_invocation2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3838; Match(OPEN_PARENS);
			State = 3840;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
				{
				State = 3839; argument_list();
				}
			}

			State = 3842; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_creation_expression2Context : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharp4Parser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharp4Parser.CLOSE_PARENS, 0); }
		public Argument_listContext argument_list() {
			return GetRuleContext<Argument_listContext>(0);
		}
		public Object_or_collection_initializerContext object_or_collection_initializer() {
			return GetRuleContext<Object_or_collection_initializerContext>(0);
		}
		public Object_creation_expression2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_creation_expression2; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.EnterObject_creation_expression2(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharp4Listener typedListener = listener as ICSharp4Listener;
			if (typedListener != null) typedListener.ExitObject_creation_expression2(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSharp4Visitor<TResult> typedVisitor = visitor as ICSharp4Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObject_creation_expression2(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Object_creation_expression2Context object_creation_expression2() {
		Object_creation_expression2Context _localctx = new Object_creation_expression2Context(Context, State);
		EnterRule(_localctx, 808, RULE_object_creation_expression2);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3844; Match(OPEN_PARENS);
			State = 3846;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NEW))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (ON - 64)) | (1L << (ORDERBY - 64)) | (1L << (OUT - 64)) | (1L << (PARTIAL - 64)) | (1L << (REF - 64)) | (1L << (REMOVE - 64)) | (1L << (SBYTE - 64)) | (1L << (SELECT - 64)) | (1L << (SET - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STRING - 64)) | (1L << (THIS - 64)) | (1L << (TRUE - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (USHORT - 64)) | (1L << (WHERE - 64)) | (1L << (YIELD - 64)) | (1L << (IDENTIFIER - 64)) | (1L << (INTEGER_LITERAL - 64)) | (1L << (REAL_LITERAL - 64)) | (1L << (CHARACTER_LITERAL - 64)) | (1L << (STRING_LITERAL - 64)) | (1L << (OPEN_PARENS - 64)) | (1L << (PLUS - 64)) | (1L << (MINUS - 64)) | (1L << (STAR - 64)))) != 0) || ((((_la - 129)) & ~0x3f) == 0 && ((1L << (_la - 129)) & ((1L << (AMP - 129)) | (1L << (BANG - 129)) | (1L << (TILDE - 129)) | (1L << (OP_INC - 129)) | (1L << (OP_DEC - 129)))) != 0)) {
				{
				State = 3845; argument_list();
				}
			}

			State = 3848; Match(CLOSE_PARENS);
			State = 3850;
			switch ( Interpreter.AdaptivePredict(TokenStream,408,Context) ) {
			case 1:
				{
				State = 3849; object_or_collection_initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 110: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 375: return right_arrow_sempred((Right_arrowContext)_localctx, predIndex);
		case 376: return right_shift_sempred((Right_shiftContext)_localctx, predIndex);
		case 377: return right_shift_assignment_sempred((Right_shift_assignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 14);
		case 1: return Precpred(Context, 13);
		case 2: return Precpred(Context, 12);
		case 3: return Precpred(Context, 11);
		case 4: return Precpred(Context, 10);
		case 5: return Precpred(Context, 9);
		case 6: return Precpred(Context, 8);
		case 7: return Precpred(Context, 7);
		case 8: return Precpred(Context, 6);
		case 9: return Precpred(Context, 5);
		case 10: return Precpred(Context, 4);
		case 11: return Precpred(Context, 3);
		}
		return true;
	}
	private bool right_arrow_sempred(Right_arrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_sempred(Right_shiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool right_shift_assignment_sempred(Right_shift_assignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\xA8\xF0F\x4\x2\t"+
		"\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t"+
		"\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x4-\t-\x4.\t.\x4/\t/\x4\x30\t\x30\x4\x31\t\x31\x4\x32"+
		"\t\x32\x4\x33\t\x33\x4\x34\t\x34\x4\x35\t\x35\x4\x36\t\x36\x4\x37\t\x37"+
		"\x4\x38\t\x38\x4\x39\t\x39\x4:\t:\x4;\t;\x4<\t<\x4=\t=\x4>\t>\x4?\t?\x4"+
		"@\t@\x4\x41\t\x41\x4\x42\t\x42\x4\x43\t\x43\x4\x44\t\x44\x4\x45\t\x45"+
		"\x4\x46\t\x46\x4G\tG\x4H\tH\x4I\tI\x4J\tJ\x4K\tK\x4L\tL\x4M\tM\x4N\tN"+
		"\x4O\tO\x4P\tP\x4Q\tQ\x4R\tR\x4S\tS\x4T\tT\x4U\tU\x4V\tV\x4W\tW\x4X\t"+
		"X\x4Y\tY\x4Z\tZ\x4[\t[\x4\\\t\\\x4]\t]\x4^\t^\x4_\t_\x4`\t`\x4\x61\t\x61"+
		"\x4\x62\t\x62\x4\x63\t\x63\x4\x64\t\x64\x4\x65\t\x65\x4\x66\t\x66\x4g"+
		"\tg\x4h\th\x4i\ti\x4j\tj\x4k\tk\x4l\tl\x4m\tm\x4n\tn\x4o\to\x4p\tp\x4"+
		"q\tq\x4r\tr\x4s\ts\x4t\tt\x4u\tu\x4v\tv\x4w\tw\x4x\tx\x4y\ty\x4z\tz\x4"+
		"{\t{\x4|\t|\x4}\t}\x4~\t~\x4\x7F\t\x7F\x4\x80\t\x80\x4\x81\t\x81\x4\x82"+
		"\t\x82\x4\x83\t\x83\x4\x84\t\x84\x4\x85\t\x85\x4\x86\t\x86\x4\x87\t\x87"+
		"\x4\x88\t\x88\x4\x89\t\x89\x4\x8A\t\x8A\x4\x8B\t\x8B\x4\x8C\t\x8C\x4\x8D"+
		"\t\x8D\x4\x8E\t\x8E\x4\x8F\t\x8F\x4\x90\t\x90\x4\x91\t\x91\x4\x92\t\x92"+
		"\x4\x93\t\x93\x4\x94\t\x94\x4\x95\t\x95\x4\x96\t\x96\x4\x97\t\x97\x4\x98"+
		"\t\x98\x4\x99\t\x99\x4\x9A\t\x9A\x4\x9B\t\x9B\x4\x9C\t\x9C\x4\x9D\t\x9D"+
		"\x4\x9E\t\x9E\x4\x9F\t\x9F\x4\xA0\t\xA0\x4\xA1\t\xA1\x4\xA2\t\xA2\x4\xA3"+
		"\t\xA3\x4\xA4\t\xA4\x4\xA5\t\xA5\x4\xA6\t\xA6\x4\xA7\t\xA7\x4\xA8\t\xA8"+
		"\x4\xA9\t\xA9\x4\xAA\t\xAA\x4\xAB\t\xAB\x4\xAC\t\xAC\x4\xAD\t\xAD\x4\xAE"+
		"\t\xAE\x4\xAF\t\xAF\x4\xB0\t\xB0\x4\xB1\t\xB1\x4\xB2\t\xB2\x4\xB3\t\xB3"+
		"\x4\xB4\t\xB4\x4\xB5\t\xB5\x4\xB6\t\xB6\x4\xB7\t\xB7\x4\xB8\t\xB8\x4\xB9"+
		"\t\xB9\x4\xBA\t\xBA\x4\xBB\t\xBB\x4\xBC\t\xBC\x4\xBD\t\xBD\x4\xBE\t\xBE"+
		"\x4\xBF\t\xBF\x4\xC0\t\xC0\x4\xC1\t\xC1\x4\xC2\t\xC2\x4\xC3\t\xC3\x4\xC4"+
		"\t\xC4\x4\xC5\t\xC5\x4\xC6\t\xC6\x4\xC7\t\xC7\x4\xC8\t\xC8\x4\xC9\t\xC9"+
		"\x4\xCA\t\xCA\x4\xCB\t\xCB\x4\xCC\t\xCC\x4\xCD\t\xCD\x4\xCE\t\xCE\x4\xCF"+
		"\t\xCF\x4\xD0\t\xD0\x4\xD1\t\xD1\x4\xD2\t\xD2\x4\xD3\t\xD3\x4\xD4\t\xD4"+
		"\x4\xD5\t\xD5\x4\xD6\t\xD6\x4\xD7\t\xD7\x4\xD8\t\xD8\x4\xD9\t\xD9\x4\xDA"+
		"\t\xDA\x4\xDB\t\xDB\x4\xDC\t\xDC\x4\xDD\t\xDD\x4\xDE\t\xDE\x4\xDF\t\xDF"+
		"\x4\xE0\t\xE0\x4\xE1\t\xE1\x4\xE2\t\xE2\x4\xE3\t\xE3\x4\xE4\t\xE4\x4\xE5"+
		"\t\xE5\x4\xE6\t\xE6\x4\xE7\t\xE7\x4\xE8\t\xE8\x4\xE9\t\xE9\x4\xEA\t\xEA"+
		"\x4\xEB\t\xEB\x4\xEC\t\xEC\x4\xED\t\xED\x4\xEE\t\xEE\x4\xEF\t\xEF\x4\xF0"+
		"\t\xF0\x4\xF1\t\xF1\x4\xF2\t\xF2\x4\xF3\t\xF3\x4\xF4\t\xF4\x4\xF5\t\xF5"+
		"\x4\xF6\t\xF6\x4\xF7\t\xF7\x4\xF8\t\xF8\x4\xF9\t\xF9\x4\xFA\t\xFA\x4\xFB"+
		"\t\xFB\x4\xFC\t\xFC\x4\xFD\t\xFD\x4\xFE\t\xFE\x4\xFF\t\xFF\x4\x100\t\x100"+
		"\x4\x101\t\x101\x4\x102\t\x102\x4\x103\t\x103\x4\x104\t\x104\x4\x105\t"+
		"\x105\x4\x106\t\x106\x4\x107\t\x107\x4\x108\t\x108\x4\x109\t\x109\x4\x10A"+
		"\t\x10A\x4\x10B\t\x10B\x4\x10C\t\x10C\x4\x10D\t\x10D\x4\x10E\t\x10E\x4"+
		"\x10F\t\x10F\x4\x110\t\x110\x4\x111\t\x111\x4\x112\t\x112\x4\x113\t\x113"+
		"\x4\x114\t\x114\x4\x115\t\x115\x4\x116\t\x116\x4\x117\t\x117\x4\x118\t"+
		"\x118\x4\x119\t\x119\x4\x11A\t\x11A\x4\x11B\t\x11B\x4\x11C\t\x11C\x4\x11D"+
		"\t\x11D\x4\x11E\t\x11E\x4\x11F\t\x11F\x4\x120\t\x120\x4\x121\t\x121\x4"+
		"\x122\t\x122\x4\x123\t\x123\x4\x124\t\x124\x4\x125\t\x125\x4\x126\t\x126"+
		"\x4\x127\t\x127\x4\x128\t\x128\x4\x129\t\x129\x4\x12A\t\x12A\x4\x12B\t"+
		"\x12B\x4\x12C\t\x12C\x4\x12D\t\x12D\x4\x12E\t\x12E\x4\x12F\t\x12F\x4\x130"+
		"\t\x130\x4\x131\t\x131\x4\x132\t\x132\x4\x133\t\x133\x4\x134\t\x134\x4"+
		"\x135\t\x135\x4\x136\t\x136\x4\x137\t\x137\x4\x138\t\x138\x4\x139\t\x139"+
		"\x4\x13A\t\x13A\x4\x13B\t\x13B\x4\x13C\t\x13C\x4\x13D\t\x13D\x4\x13E\t"+
		"\x13E\x4\x13F\t\x13F\x4\x140\t\x140\x4\x141\t\x141\x4\x142\t\x142\x4\x143"+
		"\t\x143\x4\x144\t\x144\x4\x145\t\x145\x4\x146\t\x146\x4\x147\t\x147\x4"+
		"\x148\t\x148\x4\x149\t\x149\x4\x14A\t\x14A\x4\x14B\t\x14B\x4\x14C\t\x14C"+
		"\x4\x14D\t\x14D\x4\x14E\t\x14E\x4\x14F\t\x14F\x4\x150\t\x150\x4\x151\t"+
		"\x151\x4\x152\t\x152\x4\x153\t\x153\x4\x154\t\x154\x4\x155\t\x155\x4\x156"+
		"\t\x156\x4\x157\t\x157\x4\x158\t\x158\x4\x159\t\x159\x4\x15A\t\x15A\x4"+
		"\x15B\t\x15B\x4\x15C\t\x15C\x4\x15D\t\x15D\x4\x15E\t\x15E\x4\x15F\t\x15F"+
		"\x4\x160\t\x160\x4\x161\t\x161\x4\x162\t\x162\x4\x163\t\x163\x4\x164\t"+
		"\x164\x4\x165\t\x165\x4\x166\t\x166\x4\x167\t\x167\x4\x168\t\x168\x4\x169"+
		"\t\x169\x4\x16A\t\x16A\x4\x16B\t\x16B\x4\x16C\t\x16C\x4\x16D\t\x16D\x4"+
		"\x16E\t\x16E\x4\x16F\t\x16F\x4\x170\t\x170\x4\x171\t\x171\x4\x172\t\x172"+
		"\x4\x173\t\x173\x4\x174\t\x174\x4\x175\t\x175\x4\x176\t\x176\x4\x177\t"+
		"\x177\x4\x178\t\x178\x4\x179\t\x179\x4\x17A\t\x17A\x4\x17B\t\x17B\x4\x17C"+
		"\t\x17C\x4\x17D\t\x17D\x4\x17E\t\x17E\x4\x17F\t\x17F\x4\x180\t\x180\x4"+
		"\x181\t\x181\x4\x182\t\x182\x4\x183\t\x183\x4\x184\t\x184\x4\x185\t\x185"+
		"\x4\x186\t\x186\x4\x187\t\x187\x4\x188\t\x188\x4\x189\t\x189\x4\x18A\t"+
		"\x18A\x4\x18B\t\x18B\x4\x18C\t\x18C\x4\x18D\t\x18D\x4\x18E\t\x18E\x4\x18F"+
		"\t\x18F\x4\x190\t\x190\x4\x191\t\x191\x4\x192\t\x192\x4\x193\t\x193\x4"+
		"\x194\t\x194\x4\x195\t\x195\x4\x196\t\x196\x3\x2\x3\x2\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x337\n\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\a\x5\x33D\n\x5\f\x5\xE\x5\x340\v\x5\x3\x6\x3\x6\x5\x6\x344\n\x6\x3"+
		"\a\x3\a\x3\a\x3\a\a\a\x34A\n\a\f\a\xE\a\x34D\v\a\x3\b\x3\b\x3\b\x3\b\x5"+
		"\b\x353\n\b\x3\t\x3\t\x5\t\x357\n\t\x3\n\x3\n\x3\n\x5\n\x35C\n\n\x3\v"+
		"\x3\v\x3\f\x3\f\x3\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\x368\n\xE\f\xE\xE"+
		"\xE\x36B\v\xE\x3\xF\x3\xF\a\xF\x36F\n\xF\f\xF\xE\xF\x372\v\xF\x3\xF\a"+
		"\xF\x375\n\xF\f\xF\xE\xF\x378\v\xF\x3\xF\a\xF\x37B\n\xF\f\xF\xE\xF\x37E"+
		"\v\xF\x3\xF\x3\xF\x3\xF\x3\xF\a\xF\x384\n\xF\f\xF\xE\xF\x387\v\xF\x3\xF"+
		"\a\xF\x38A\n\xF\f\xF\xE\xF\x38D\v\xF\x3\xF\x3\xF\x3\xF\a\xF\x392\n\xF"+
		"\f\xF\xE\xF\x395\v\xF\x3\xF\a\xF\x398\n\xF\f\xF\xE\xF\x39B\v\xF\x3\xF"+
		"\a\xF\x39E\n\xF\f\xF\xE\xF\x3A1\v\xF\x3\xF\x5\xF\x3A4\n\xF\x3\x10\x3\x10"+
		"\x3\x10\x3\x10\x5\x10\x3AA\n\x10\x3\x11\x3\x11\x3\x12\x3\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\a\x14\x3B7\n\x14\f\x14\xE\x14"+
		"\x3BA\v\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3\x17\x3\x17\x3\x18\x3\x18\x3"+
		"\x18\a\x18\x3C5\n\x18\f\x18\xE\x18\x3C8\v\x18\x3\x19\x5\x19\x3CB\n\x19"+
		"\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B"+
		"\x5\x1B\x3D7\n\x1B\x3\x1C\x3\x1C\a\x1C\x3DB\n\x1C\f\x1C\xE\x1C\x3DE\v"+
		"\x1C\x3\x1C\a\x1C\x3E1\n\x1C\f\x1C\xE\x1C\x3E4\v\x1C\x3\x1D\x3\x1D\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x5\x1D\x3EC\n\x1D\x3\x1D\a\x1D\x3EF\n\x1D\f"+
		"\x1D\xE\x1D\x3F2\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x403\n"+
		"\x1E\x3\x1E\x5\x1E\x406\n\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x40B\n\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x411\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x5\x1E\x419\n\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F\x3 \x3 \x3"+
		" \x3!\x3!\x3!\x3!\x3\"\x3\"\x3#\x3#\x3$\x3$\x3$\a$\x42D\n$\f$\xE$\x430"+
		"\v$\x3%\x3%\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x3&\x5&\x43E\n&\x3\'\x3"+
		"\'\x3\'\x3\'\x5\'\x444\n\'\x3\'\x3\'\x5\'\x448\n\'\x3\'\x5\'\x44B\n\'"+
		"\x3(\x3(\x5(\x44F\n(\x3)\x3)\x3)\x3)\x3)\x5)\x456\n)\x3)\x3)\x5)\x45A"+
		"\n)\x3*\x3*\x3*\a*\x45F\n*\f*\xE*\x462\v*\x3+\x3+\x3+\x3+\x3,\x3,\x5,"+
		"\x46A\n,\x3-\x3-\x3-\x5-\x46F\n-\x3-\x3-\x3.\x3.\x3.\a.\x476\n.\f.\xE"+
		".\x479\v.\x3/\x3/\x3/\x3/\x3/\x5/\x480\n/\x3\x30\x3\x30\x3\x30\x3\x30"+
		"\x3\x30\x3\x30\x3\x30\x3\x30\x3\x30\x5\x30\x48B\n\x30\x3\x30\x5\x30\x48E"+
		"\n\x30\x3\x30\x3\x30\x3\x30\x5\x30\x493\n\x30\x3\x31\x3\x31\x3\x31\x3"+
		"\x31\x3\x31\x3\x31\x3\x32\x3\x32\x3\x32\x3\x33\x3\x33\x3\x33\x3\x33\x3"+
		"\x33\x5\x33\x4A3\n\x33\x3\x33\x3\x33\x5\x33\x4A7\n\x33\x3\x34\x3\x34\x3"+
		"\x34\a\x34\x4AC\n\x34\f\x34\xE\x34\x4AF\v\x34\x3\x35\x3\x35\x3\x35\x3"+
		"\x35\x3\x35\x5\x35\x4B6\n\x35\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36\x3\x36"+
		"\x3\x36\x3\x36\x3\x36\x3\x36\x5\x36\x4C2\n\x36\x3\x37\x3\x37\x5\x37\x4C6"+
		"\n\x37\x3\x37\x3\x37\x3\x37\x5\x37\x4CB\n\x37\x5\x37\x4CD\n\x37\x3\x37"+
		"\x3\x37\x3\x37\x5\x37\x4D2\n\x37\a\x37\x4D4\n\x37\f\x37\xE\x37\x4D7\v"+
		"\x37\x3\x38\x3\x38\x5\x38\x4DB\n\x38\x3\x38\x3\x38\x3\x39\x3\x39\a\x39"+
		"\x4E1\n\x39\f\x39\xE\x39\x4E4\v\x39\x3:\x3:\x3:\x3:\x3:\x3;\x3;\x3;\x3"+
		";\x3;\x3<\x3<\x3<\x3<\x3<\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3=\x3="+
		"\x3=\x3=\x3=\x5=\x503\n=\x3>\x3>\x3>\x3>\x3>\x3?\x3?\x3?\x3?\x3?\x3?\x3"+
		"?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?"+
		"\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3"+
		"?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?"+
		"\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3?\x3"+
		"?\x5?\x557\n?\x3@\x3@\x3@\x3\x41\x3\x41\x3\x41\x3\x42\x3\x42\x3\x42\x3"+
		"\x42\x3\x42\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\x3\x43\a\x43\x56B"+
		"\n\x43\f\x43\xE\x43\x56E\v\x43\x3\x44\x3\x44\x3\x44\a\x44\x573\n\x44\f"+
		"\x44\xE\x44\x576\v\x44\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\x3\x45\a\x45"+
		"\x57E\n\x45\f\x45\xE\x45\x581\v\x45\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46"+
		"\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\x3\x46\a\x46\x590\n"+
		"\x46\f\x46\xE\x46\x593\v\x46\x3G\x3G\x3G\x3G\x3G\aG\x59A\nG\fG\xEG\x59D"+
		"\vG\x3G\x3G\x3G\x3H\x3H\x3I\x3I\x5I\x5A6\nI\x3J\x3J\x3K\x3K\x3K\x3K\x3"+
		"K\aK\x5AF\nK\fK\xEK\x5B2\vK\x3L\x3L\x3L\aL\x5B7\nL\fL\xEL\x5BA\vL\x3M"+
		"\x3M\x3M\aM\x5BF\nM\fM\xEM\x5C2\vM\x3N\x3N\x3N\aN\x5C7\nN\fN\xEN\x5CA"+
		"\vN\x3O\x3O\x3O\aO\x5CF\nO\fO\xEO\x5D2\vO\x3P\x3P\x3P\aP\x5D7\nP\fP\xE"+
		"P\x5DA\vP\x3Q\x3Q\x3Q\x5Q\x5DF\nQ\x3R\x3R\x3R\x3R\x3S\x3S\x5S\x5E7\nS"+
		"\x3S\x3S\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x3T\x5T\x5F6\nT\x3U\x3"+
		"U\x5U\x5FA\nU\x3U\x3U\x3V\x3V\x3V\aV\x601\nV\fV\xEV\x604\vV\x3W\x5W\x607"+
		"\nW\x3W\x3W\x3W\x3X\x3X\x3Y\x3Y\x5Y\x610\nY\x3Y\x3Y\x5Y\x614\nY\x3Z\x3"+
		"Z\x3Z\aZ\x619\nZ\fZ\xEZ\x61C\vZ\x3[\x3[\x3\\\x3\\\x5\\\x622\n\\\x3]\x3"+
		"]\x3]\x3^\x3^\x5^\x629\n^\x3^\x3^\x3^\x3^\x3_\x5_\x630\n_\x3_\x3_\x5_"+
		"\x634\n_\x3`\x3`\a`\x638\n`\f`\xE`\x63B\v`\x3\x61\x3\x61\x3\x61\x3\x61"+
		"\x3\x61\x5\x61\x642\n\x61\x3\x62\x3\x62\x3\x62\x3\x62\x3\x62\x3\x63\x3"+
		"\x63\x3\x63\x3\x64\x3\x64\x5\x64\x64E\n\x64\x3\x64\x3\x64\x3\x64\x3\x64"+
		"\x3\x64\x3\x64\x3\x64\x3\x64\x3\x65\x3\x65\x5\x65\x65A\n\x65\x3\x65\x3"+
		"\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x65\x3\x66\x3"+
		"\x66\x5\x66\x668\n\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66\x3\x66"+
		"\x3\x66\x3\x66\x3\x66\x5\x66\x674\n\x66\x3g\x3g\x3g\x3h\x3h\x3h\ah\x67C"+
		"\nh\fh\xEh\x67F\vh\x3i\x3i\x5i\x683\ni\x3j\x3j\x5j\x687\nj\x3k\x3k\x5"+
		"k\x68B\nk\x3l\x3l\x3l\x3m\x3m\x3m\x3m\x3m\x3n\x3n\x3n\x3n\x3o\x3o\x3o"+
		"\x3o\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x5p\x6A5\np\x3p\x3p\x3p\x3p\x3p\x3"+
		"p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p"+
		"\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\x3p\ap\x6CE"+
		"\np\fp\xEp\x6D1\vp\x3q\x3q\x5q\x6D5\nq\x3r\x3r\x3s\x3s\x3s\x5s\x6DC\n"+
		"s\x3t\x3t\x5t\x6E0\nt\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u\x3u"+
		"\x5u\x6EE\nu\x3v\x3v\x5v\x6F2\nv\x3v\x3v\x3w\x6w\x6F7\nw\rw\xEw\x6F8\x3"+
		"x\x3x\x3y\x3y\x3y\x3y\x3z\x3z\x3z\x3z\x3z\x3z\x5z\x707\nz\x3{\x3{\x3{"+
		"\x3|\x3|\x3}\x3}\x3}\a}\x711\n}\f}\xE}\x714\v}\x3~\x3~\x3~\x5~\x719\n"+
		"~\x3\x7F\x3\x7F\x3\x7F\x5\x7F\x71E\n\x7F\x3\x80\x3\x80\x3\x80\x3\x80\x3"+
		"\x81\x3\x81\x3\x81\x3\x82\x3\x82\x3\x83\x3\x83\x5\x83\x72B\n\x83\x3\x84"+
		"\x3\x84\x5\x84\x72F\n\x84\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3\x85\x3"+
		"\x85\x5\x85\x738\n\x85\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x86\x3\x87"+
		"\x3\x87\x5\x87\x742\n\x87\x3\x87\x3\x87\x3\x88\x3\x88\a\x88\x748\n\x88"+
		"\f\x88\xE\x88\x74B\v\x88\x3\x89\x3\x89\x3\x89\x3\x8A\x3\x8A\a\x8A\x752"+
		"\n\x8A\f\x8A\xE\x8A\x755\v\x8A\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B\x3\x8B"+
		"\x5\x8B\x75D\n\x8B\x3\x8C\x3\x8C\x3\x8C\x3\x8C\x5\x8C\x763\n\x8C\x3\x8D"+
		"\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8D\x3\x8E\x3\x8E\x3\x8E\x3\x8E\x3\x8E"+
		"\x3\x8E\x3\x8E\x3\x8E\x3\x8F\x3\x8F\x3\x8F\x5\x8F\x776\n\x8F\x3\x8F\x3"+
		"\x8F\x5\x8F\x77A\n\x8F\x3\x8F\x3\x8F\x5\x8F\x77E\n\x8F\x3\x8F\x3\x8F\x3"+
		"\x8F\x3\x90\x3\x90\x5\x90\x785\n\x90\x3\x91\x3\x91\x3\x92\x3\x92\x3\x93"+
		"\x3\x93\x3\x93\a\x93\x78E\n\x93\f\x93\xE\x93\x791\v\x93\x3\x94\x3\x94"+
		"\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x94\x3\x95\x3\x95\x3\x95"+
		"\x3\x95\x3\x95\x5\x95\x7A1\n\x95\x3\x96\x3\x96\x3\x96\x3\x97\x3\x97\x3"+
		"\x97\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3\x98\x3"+
		"\x98\x3\x98\x3\x98\x5\x98\x7B5\n\x98\x3\x99\x3\x99\x5\x99\x7B9\n\x99\x3"+
		"\x99\x3\x99\x3\x9A\x3\x9A\x5\x9A\x7BF\n\x9A\x3\x9A\x3\x9A\x3\x9B\x3\x9B"+
		"\x3\x9B\x5\x9B\x7C6\n\x9B\x3\x9B\x5\x9B\x7C9\n\x9B\x3\x9C\x3\x9C\x5\x9C"+
		"\x7CD\n\x9C\x3\x9C\x5\x9C\x7D0\n\x9C\x3\x9D\x3\x9D\a\x9D\x7D4\n\x9D\f"+
		"\x9D\xE\x9D\x7D7\v\x9D\x3\x9E\x3\x9E\x3\x9E\x3\x9E\x5\x9E\x7DD\n\x9E\x3"+
		"\x9E\x3\x9E\x3\x9E\x3\x9F\x3\x9F\x3\x9F\x3\xA0\x3\xA0\x3\xA0\x3\xA1\x3"+
		"\xA1\x3\xA1\x3\xA2\x3\xA2\x3\xA2\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3\xA3\x3"+
		"\xA3\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA4\x3\xA5\x3\xA5\x5\xA5\x7FC"+
		"\n\xA5\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6\x3\xA6"+
		"\x5\xA6\x807\n\xA6\x3\xA7\x5\xA7\x80A\n\xA7\x3\xA7\x5\xA7\x80D\n\xA7\x3"+
		"\xA7\x5\xA7\x810\n\xA7\x3\xA7\a\xA7\x813\n\xA7\f\xA7\xE\xA7\x816\v\xA7"+
		"\x3\xA7\x5\xA7\x819\n\xA7\x3\xA7\x3\xA7\x3\xA8\x3\xA8\x3\xA8\x3\xA8\x5"+
		"\xA8\x821\n\xA8\x3\xA9\x3\xA9\x3\xA9\a\xA9\x826\n\xA9\f\xA9\xE\xA9\x829"+
		"\v\xA9\x3\xAA\x3\xAA\x5\xAA\x82D\n\xAA\x3\xAA\x5\xAA\x830\n\xAA\x3\xAA"+
		"\x5\xAA\x833\n\xAA\x3\xAA\x3\xAA\x3\xAB\x6\xAB\x838\n\xAB\r\xAB\xE\xAB"+
		"\x839\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAC\x3\xAD\x6\xAD\x842\n\xAD\r\xAD"+
		"\xE\xAD\x843\x3\xAE\x3\xAE\x5\xAE\x848\n\xAE\x3\xAF\x3\xAF\x3\xAF\x3\xAF"+
		"\x3\xAF\x3\xAF\x3\xB0\x3\xB0\x3\xB0\x3\xB0\x3\xB1\x6\xB1\x855\n\xB1\r"+
		"\xB1\xE\xB1\x856\x3\xB2\x3\xB2\x5\xB2\x85B\n\xB2\x3\xB3\x5\xB3\x85E\n"+
		"\xB3\x3\xB3\x5\xB3\x861\n\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x3\xB3\x5\xB3"+
		"\x868\n\xB3\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB4\x3\xB5\x5\xB5\x870\n\xB5"+
		"\x3\xB5\x5\xB5\x873\n\xB5\x3\xB5\x5\xB5\x876\n\xB5\x3\xB5\x3\xB5\x3\xB5"+
		"\x5\xB5\x87B\n\xB5\x3\xB5\x5\xB5\x87E\n\xB5\x3\xB5\x5\xB5\x881\n\xB5\x3"+
		"\xB5\x3\xB5\x5\xB5\x885\n\xB5\x3\xB6\x3\xB6\a\xB6\x889\n\xB6\f\xB6\xE"+
		"\xB6\x88C\v\xB6\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7\x3\xB7"+
		"\x3\xB7\x5\xB7\x897\n\xB7\x3\xB8\x3\xB8\x3\xB8\x3\xB8\x3\xB9\x5\xB9\x89E"+
		"\n\xB9\x3\xB9\x3\xB9\x3\xB9\x5\xB9\x8A3\n\xB9\x3\xB9\a\xB9\x8A6\n\xB9"+
		"\f\xB9\xE\xB9\x8A9\v\xB9\x3\xBA\x3\xBA\x3\xBB\x3\xBB\x3\xBB\x3\xBB\a\xBB"+
		"\x8B1\n\xBB\f\xBB\xE\xBB\x8B4\v\xBB\x3\xBC\x3\xBC\x3\xBC\a\xBC\x8B9\n"+
		"\xBC\f\xBC\xE\xBC\x8BC\v\xBC\x3\xBD\x3\xBD\a\xBD\x8C0\n\xBD\f\xBD\xE\xBD"+
		"\x8C3\v\xBD\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBE\x3\xBF\x3\xBF\x3\xBF\x3"+
		"\xBF\x5\xBF\x8CE\n\xBF\x3\xBF\x3\xBF\x5\xBF\x8D2\n\xBF\x5\xBF\x8D4\n\xBF"+
		"\x3\xC0\x3\xC0\x3\xC0\x5\xC0\x8D9\n\xC0\x3\xC1\x3\xC1\x3\xC1\a\xC1\x8DE"+
		"\n\xC1\f\xC1\xE\xC1\x8E1\v\xC1\x3\xC2\x3\xC2\x3\xC2\x3\xC2\x3\xC3\x3\xC3"+
		"\x5\xC3\x8E9\n\xC3\x3\xC3\x3\xC3\x3\xC4\x6\xC4\x8EE\n\xC4\r\xC4\xE\xC4"+
		"\x8EF\x3\xC5\x5\xC5\x8F3\n\xC5\x3\xC5\x5\xC5\x8F6\n\xC5\x3\xC5\x3\xC5"+
		"\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x3\xC5\x5\xC5\x8FF\n\xC5\x3\xC5\x5\xC5\x902"+
		"\n\xC5\x3\xC6\x6\xC6\x905\n\xC6\r\xC6\xE\xC6\x906\x3\xC7\x3\xC7\x3\xC7"+
		"\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7\x3\xC7"+
		"\x3\xC7\x3\xC7\x5\xC7\x918\n\xC7\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3"+
		"\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x3\xC8\x5"+
		"\xC8\x929\n\xC8\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9\x3\xC9"+
		"\x3\xC9\x3\xC9\x5\xC9\x935\n\xC9\x3\xCA\x3\xCA\x3\xCA\a\xCA\x93A\n\xCA"+
		"\f\xCA\xE\xCA\x93D\v\xCA\x3\xCB\x3\xCB\x3\xCB\x3\xCB\x3\xCC\x3\xCC\x3"+
		"\xCC\a\xCC\x946\n\xCC\f\xCC\xE\xCC\x949\v\xCC\x3\xCD\x3\xCD\x3\xCD\x3"+
		"\xCD\x3\xCD\x5\xCD\x950\n\xCD\x3\xCE\x3\xCE\x5\xCE\x954\n\xCE\x3\xCF\x3"+
		"\xCF\x3\xCF\x3\xD0\x5\xD0\x95A\n\xD0\x3\xD0\x5\xD0\x95D\n\xD0\x3\xD0\x5"+
		"\xD0\x960\n\xD0\x3\xD0\x3\xD0\x3\xD0\x5\xD0\x965\n\xD0\x3\xD0\x3\xD0\x5"+
		"\xD0\x969\n\xD0\x3\xD0\x3\xD0\x5\xD0\x96D\n\xD0\x3\xD1\x6\xD1\x970\n\xD1"+
		"\r\xD1\xE\xD1\x971\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x3"+
		"\xD2\x3\xD2\x3\xD2\x3\xD2\x3\xD2\x5\xD2\x980\n\xD2\x3\xD3\x3\xD3\x5\xD3"+
		"\x984\n\xD3\x3\xD4\x3\xD4\x3\xD5\x3\xD5\x5\xD5\x98A\n\xD5\x3\xD6\x3\xD6"+
		"\x3\xD6\x3\xD6\x5\xD6\x990\n\xD6\x5\xD6\x992\n\xD6\x3\xD7\x3\xD7\x3\xD7"+
		"\a\xD7\x997\n\xD7\f\xD7\xE\xD7\x99A\v\xD7\x3\xD8\x5\xD8\x99D\n\xD8\x3"+
		"\xD8\x5\xD8\x9A0\n\xD8\x3\xD8\x3\xD8\x3\xD8\x5\xD8\x9A5\n\xD8\x3\xD8\x5"+
		"\xD8\x9A8\n\xD8\x3\xD9\x3\xD9\x3\xD9\x3\xDA\x3\xDA\x3\xDB\x5\xDB\x9B0"+
		"\n\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDB\x3\xDC\x5\xDC\x9B7\n\xDC\x3\xDC\x5"+
		"\xDC\x9BA\n\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDC\x3\xDD\x6\xDD"+
		"\x9C3\n\xDD\r\xDD\xE\xDD\x9C4\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE"+
		"\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x3\xDE\x5\xDE\x9D3\n\xDE\x3\xDF\x5"+
		"\xDF\x9D6\n\xDF\x3\xDF\x5\xDF\x9D9\n\xDF\x3\xDF\x3\xDF\x3\xDF\x5\xDF\x9DE"+
		"\n\xDF\x3\xDF\x3\xDF\x3\xDF\x5\xDF\x9E3\n\xDF\x5\xDF\x9E5\n\xDF\x3\xE0"+
		"\x5\xE0\x9E8\n\xE0\x3\xE0\x5\xE0\x9EB\n\xE0\x3\xE0\x3\xE0\x3\xE0\x3\xE1"+
		"\x5\xE1\x9F1\n\xE1\x3\xE1\x5\xE1\x9F4\n\xE1\x3\xE1\x3\xE1\x3\xE1\x3\xE2"+
		"\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x3\xE2\x5\xE2\xA00\n\xE2\x3\xE3\x3"+
		"\xE3\x5\xE3\xA04\n\xE3\x3\xE4\x5\xE4\xA07\n\xE4\x3\xE4\x5\xE4\xA0A\n\xE4"+
		"\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4\x3\xE4"+
		"\x5\xE4\xA16\n\xE4\x3\xE5\x3\xE5\a\xE5\xA1A\n\xE5\f\xE5\xE\xE5\xA1D\v"+
		"\xE5\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3\xE6\x3"+
		"\xE6\x3\xE6\x3\xE6\x5\xE6\xA2B\n\xE6\x3\xE7\x5\xE7\xA2E\n\xE7\x3\xE7\x3"+
		"\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x3\xE7\x5\xE7\xA38\n\xE7\x3\xE8"+
		"\x5\xE8\xA3B\n\xE8\x3\xE8\x3\xE8\x3\xE8\x3\xE9\x5\xE9\xA41\n\xE9\x3\xE9"+
		"\x3\xE9\x3\xE9\x3\xEA\x5\xEA\xA47\n\xEA\x3\xEA\x5\xEA\xA4A\n\xEA\x3\xEA"+
		"\x3\xEA\x3\xEA\x3\xEA\x3\xEA\x3\xEB\x3\xEB\a\xEB\xA53\n\xEB\f\xEB\xE\xEB"+
		"\xA56\v\xEB\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3\xEC\x3"+
		"\xEC\x3\xEC\x3\xEC\x5\xEC\xA63\n\xEC\x3\xED\x3\xED\x3\xED\x3\xED\x5\xED"+
		"\xA69\n\xED\x3\xED\x3\xED\x3\xED\x3\xED\x3\xED\x3\xEE\x5\xEE\xA71\n\xEE"+
		"\x3\xEE\x3\xEE\x3\xEE\x3\xEE\x3\xEF\x3\xEF\a\xEF\xA79\n\xEF\f\xEF\xE\xEF"+
		"\xA7C\v\xEF\x3\xF0\x3\xF0\x3\xF0\x3\xF0\x5\xF0\xA82\n\xF0\x3\xF1\x3\xF1"+
		"\x3\xF1\x5\xF1\xA87\n\xF1\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3\xF2\x3"+
		"\xF2\x3\xF2\x3\xF3\x3\xF3\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3"+
		"\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF4\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3"+
		"\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3\xF5\x3"+
		"\xF5\x5\xF5\xAAE\n\xF5\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6"+
		"\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6"+
		"\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x3\xF6\x5\xF6\xAC6\n\xF6\x3\xF7\x3\xF7\x3"+
		"\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3\xF7\x3"+
		"\xF7\x3\xF7\x3\xF7\x3\xF7\x5\xF7\xAD8\n\xF7\x3\xF8\x3\xF8\x5\xF8\xADC"+
		"\n\xF8\x3\xF9\x5\xF9\xADF\n\xF9\x3\xF9\x5\xF9\xAE2\n\xF9\x3\xF9\x3\xF9"+
		"\x3\xF9\x3\xFA\x6\xFA\xAE8\n\xFA\r\xFA\xE\xFA\xAE9\x3\xFB\x3\xFB\x3\xFB"+
		"\x3\xFB\x3\xFB\x3\xFB\x5\xFB\xAF2\n\xFB\x3\xFC\x3\xFC\x3\xFC\x5\xFC\xAF7"+
		"\n\xFC\x3\xFC\x3\xFC\x5\xFC\xAFB\n\xFC\x3\xFD\x3\xFD\x3\xFD\x3\xFD\x5"+
		"\xFD\xB01\n\xFD\x3\xFD\x3\xFD\x3\xFD\x3\xFD\x3\xFD\x5\xFD\xB08\n\xFD\x3"+
		"\xFD\x5\xFD\xB0B\n\xFD\x3\xFE\x3\xFE\x5\xFE\xB0F\n\xFE\x3\xFF\x5\xFF\xB12"+
		"\n\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\xFF\x3\x100\x3\x100\x3\x101"+
		"\x3\x101\x5\x101\xB1E\n\x101\x3\x102\x3\x102\x3\x103\x3\x103\x5\x103\xB24"+
		"\n\x103\x3\x104\x3\x104\x5\x104\xB28\n\x104\x3\x105\x5\x105\xB2B\n\x105"+
		"\x3\x105\x5\x105\xB2E\n\x105\x3\x105\x5\x105\xB31\n\x105\x3\x105\x3\x105"+
		"\x3\x105\x5\x105\xB36\n\x105\x3\x105\x5\x105\xB39\n\x105\x3\x105\x5\x105"+
		"\xB3C\n\x105\x3\x105\x3\x105\x5\x105\xB40\n\x105\x3\x106\x3\x106\a\x106"+
		"\xB44\n\x106\f\x106\xE\x106\xB47\v\x106\x3\x107\x3\x107\x3\x107\x3\x107"+
		"\x3\x107\x3\x107\x5\x107\xB4F\n\x107\x3\x108\x3\x108\x3\x108\x3\x109\x3"+
		"\x109\x5\x109\xB56\n\x109\x3\x109\x3\x109\x3\x10A\x3\x10A\a\x10A\xB5C"+
		"\n\x10A\f\x10A\xE\x10A\xB5F\v\x10A\x3\x10B\x5\x10B\xB62\n\x10B\x3\x10B"+
		"\x5\x10B\xB65\n\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x3\x10B\x5"+
		"\x10B\xB6D\n\x10B\x3\x10C\x3\x10C\a\x10C\xB71\n\x10C\f\x10C\xE\x10C\xB74"+
		"\v\x10C\x3\x10C\x6\x10C\xB77\n\x10C\r\x10C\xE\x10C\xB78\x3\x10D\x3\x10D"+
		"\x3\x10D\x3\x10D\a\x10D\xB7F\n\x10D\f\x10D\xE\x10D\xB82\v\x10D\x3\x10E"+
		"\x6\x10E\xB85\n\x10E\r\x10E\xE\x10E\xB86\x3\x10F\x3\x10F\x5\x10F\xB8B"+
		"\n\x10F\x3\x10F\x3\x10F\x3\x110\x3\x110\a\x110\xB91\n\x110\f\x110\xE\x110"+
		"\xB94\v\x110\x3\x111\x3\x111\x3\x111\x3\x111\x3\x111\x5\x111\xB9B\n\x111"+
		"\x3\x111\x3\x111\x5\x111\xB9F\n\x111\x3\x112\x3\x112\x3\x112\a\x112\xBA4"+
		"\n\x112\f\x112\xE\x112\xBA7\v\x112\x3\x113\x5\x113\xBAA\n\x113\x3\x113"+
		"\x5\x113\xBAD\n\x113\x3\x113\x5\x113\xBB0\n\x113\x3\x113\x3\x113\x3\x113"+
		"\x5\x113\xBB5\n\x113\x3\x113\x5\x113\xBB8\n\x113\x3\x113\x5\x113\xBBB"+
		"\n\x113\x3\x113\x3\x113\x5\x113\xBBF\n\x113\x3\x114\x3\x114\a\x114\xBC3"+
		"\n\x114\f\x114\xE\x114\xBC6\v\x114\x3\x115\x3\x115\x3\x115\x3\x115\x3"+
		"\x115\x3\x115\x5\x115\xBCE\n\x115\x3\x116\x3\x116\x3\x116\x3\x116\x3\x117"+
		"\x5\x117\xBD5\n\x117\x3\x117\x5\x117\xBD8\n\x117\x3\x117\x3\x117\x3\x117"+
		"\x5\x117\xBDD\n\x117\x3\x117\x5\x117\xBE0\n\x117\x3\x117\a\x117\xBE3\n"+
		"\x117\f\x117\xE\x117\xBE6\v\x117\x3\x118\x3\x118\x3\x119\x3\x119\x3\x119"+
		"\x3\x11A\x3\x11A\x5\x11A\xBEF\n\x11A\x3\x11A\x3\x11A\x3\x11B\x6\x11B\xBF4"+
		"\n\x11B\r\x11B\xE\x11B\xBF5\x3\x11C\x5\x11C\xBF9\n\x11C\x3\x11C\x5\x11C"+
		"\xBFC\n\x11C\x3\x11C\x3\x11C\x3\x11C\x5\x11C\xC01\n\x11C\x3\x11C\x3\x11C"+
		"\x5\x11C\xC05\n\x11C\x3\x11C\x3\x11C\x5\x11C\xC09\n\x11C\x3\x11C\x3\x11C"+
		"\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C"+
		"\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x5\x11C\xC1A\n\x11C\x3\x11C\x3\x11C\x3"+
		"\x11C\x5\x11C\xC1F\n\x11C\x3\x11C\x3\x11C\x5\x11C\xC23\n\x11C\x3\x11C"+
		"\x3\x11C\x5\x11C\xC27\n\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3\x11C\x3"+
		"\x11C\x3\x11C\x5\x11C\xC30\n\x11C\x3\x11D\x5\x11D\xC33\n\x11D\x3\x11D"+
		"\x5\x11D\xC36\n\x11D\x3\x11D\x3\x11D\x3\x11D\x5\x11D\xC3B\n\x11D\x3\x11D"+
		"\x3\x11D\x5\x11D\xC3F\n\x11D\x3\x11D\x3\x11D\x5\x11D\xC43\n\x11D\x3\x11D"+
		"\x3\x11D\x3\x11E\x5\x11E\xC48\n\x11E\x3\x11E\x5\x11E\xC4B\n\x11E\x3\x11E"+
		"\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11E\x3\x11F\x5\x11F\xC54\n\x11F\x3"+
		"\x11F\x3\x11F\x3\x11F\x5\x11F\xC59\n\x11F\x3\x11F\x3\x11F\x3\x11F\x5\x11F"+
		"\xC5E\n\x11F\x3\x11F\x3\x11F\x3\x11F\x5\x11F\xC63\n\x11F\x3\x11F\x3\x11F"+
		"\x3\x11F\x5\x11F\xC68\n\x11F\x5\x11F\xC6A\n\x11F\x3\x120\x5\x120\xC6D"+
		"\n\x120\x3\x120\x5\x120\xC70\n\x120\x3\x120\x3\x120\x3\x120\x3\x120\x3"+
		"\x120\x3\x121\x5\x121\xC78\n\x121\x3\x121\x5\x121\xC7B\n\x121\x3\x121"+
		"\x3\x121\x3\x121\x3\x121\x3\x121\x3\x121\x3\x121\x3\x121\x3\x121\x3\x122"+
		"\x5\x122\xC87\n\x122\x3\x122\x5\x122\xC8A\n\x122\x3\x122\x3\x122\x3\x122"+
		"\x5\x122\xC8F\n\x122\x3\x122\x3\x122\x5\x122\xC93\n\x122\x3\x123\x3\x123"+
		"\x3\x123\x3\x124\x3\x124\x3\x124\x3\x124\x3\x124\x5\x124\xC9D\n\x124\x3"+
		"\x124\x3\x124\x5\x124\xCA1\n\x124\x3\x125\x6\x125\xCA4\n\x125\r\x125\xE"+
		"\x125\xCA5\x3\x126\x3\x126\x3\x127\x3\x127\x3\x127\a\x127\xCAD\n\x127"+
		"\f\x127\xE\x127\xCB0\v\x127\x3\x128\x5\x128\xCB3\n\x128\x3\x128\x3\x128"+
		"\x3\x128\x5\x128\xCB8\n\x128\x3\x129\x5\x129\xCBB\n\x129\x3\x129\x5\x129"+
		"\xCBE\n\x129\x3\x129\x3\x129\x3\x129\x3\x129\x5\x129\xCC4\n\x129\x3\x129"+
		"\x3\x129\x5\x129\xCC8\n\x129\x3\x129\x3\x129\x5\x129\xCCC\n\x129\x3\x129"+
		"\x3\x129\x3\x12A\x3\x12A\a\x12A\xCD2\n\x12A\f\x12A\xE\x12A\xCD5\v\x12A"+
		"\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x3\x12B\x5\x12B\xCDD\n\x12B\x3"+
		"\x12C\x3\x12C\x3\x12D\x6\x12D\xCE2\n\x12D\r\x12D\xE\x12D\xCE3\x3\x12E"+
		"\x3\x12E\x3\x12E\x3\x12E\x5\x12E\xCEA\n\x12E\x3\x12E\x3\x12E\x3\x12F\x3"+
		"\x12F\x3\x12F\x3\x130\x3\x130\x5\x130\xCF3\n\x130\x3\x131\x3\x131\x3\x132"+
		"\x6\x132\xCF8\n\x132\r\x132\xE\x132\xCF9\x3\x133\x3\x133\x5\x133\xCFE"+
		"\n\x133\x3\x133\x3\x133\x5\x133\xD02\n\x133\x3\x133\x3\x133\x3\x134\x3"+
		"\x134\x3\x134\x3\x135\x3\x135\x5\x135\xD0B\n\x135\x3\x136\x3\x136\x3\x136"+
		"\a\x136\xD10\n\x136\f\x136\xE\x136\xD13\v\x136\x3\x137\x3\x137\x5\x137"+
		"\xD17\n\x137\x3\x138\x3\x138\x3\x139\x3\x139\x5\x139\xD1D\n\x139\x3\x139"+
		"\x3\x139\x3\x13A\x3\x13A\x3\x13A\a\x13A\xD24\n\x13A\f\x13A\xE\x13A\xD27"+
		"\v\x13A\x3\x13B\x3\x13B\x3\x13C\x3\x13C\x3\x13C\a\x13C\xD2E\n\x13C\f\x13C"+
		"\xE\x13C\xD31\v\x13C\x3\x13D\x3\x13D\x3\x13D\x3\x13D\x3\x13E\x3\x13E\x3"+
		"\x13F\x3\x13F\x3\x140\x3\x140\x3\x141\x3\x141\x3\x142\x3\x142\x3\x143"+
		"\x3\x143\x3\x144\x3\x144\x3\x145\x3\x145\x3\x146\x3\x146\x3\x147\x3\x147"+
		"\x3\x148\x3\x148\x3\x149\x3\x149\x3\x14A\x5\x14A\xD50\n\x14A\x3\x14A\x5"+
		"\x14A\xD53\n\x14A\x3\x14A\x5\x14A\xD56\n\x14A\x3\x14A\x3\x14A\x5\x14A"+
		"\xD5A\n\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14A\x3\x14B\x5"+
		"\x14B\xD63\n\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B"+
		"\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B"+
		"\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x3\x14B\x5\x14B\xD7A\n\x14B\x3\x14C\x3"+
		"\x14C\x5\x14C\xD7E\n\x14C\x3\x14D\x3\x14D\x3\x14D\x3\x14E\x3\x14E\x3\x14F"+
		"\x3\x14F\x3\x14F\a\x14F\xD88\n\x14F\f\x14F\xE\x14F\xD8B\v\x14F\x3\x14F"+
		"\x3\x14F\x3\x14F\x3\x14F\x3\x14F\a\x14F\xD92\n\x14F\f\x14F\xE\x14F\xD95"+
		"\v\x14F\x3\x14F\x3\x14F\x3\x14F\x3\x14F\x5\x14F\xD9B\n\x14F\x3\x150\x3"+
		"\x150\x3\x151\x3\x151\x3\x152\x3\x152\x5\x152\xDA3\n\x152\x3\x153\x3\x153"+
		"\x3\x153\x3\x154\x3\x154\x3\x154\x3\x155\x3\x155\x3\x155\x3\x155\x3\x155"+
		"\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x156\x3\x157\x3\x157"+
		"\x3\x157\a\x157\xDBA\n\x157\f\x157\xE\x157\xDBD\v\x157\x3\x158\x3\x158"+
		"\x3\x158\x3\x158\x3\x159\x3\x159\x3\x159\x5\x159\xDC6\n\x159\x3\x15A\x3"+
		"\x15A\x3\x15B\x5\x15B\xDCB\n\x15B\x3\x15B\x5\x15B\xDCE\n\x15B\x3\x15B"+
		"\x3\x15B\x3\x15B\x3\x15B\x3\x15B\x3\x15C\x6\x15C\xDD6\n\x15C\r\x15C\xE"+
		"\x15C\xDD7\x3\x15D\x3\x15D\x3\x15E\x3\x15E\x3\x15F\x6\x15F\xDDF\n\x15F"+
		"\r\x15F\xE\x15F\xDE0\x3\x160\x3\x160\x3\x160\x3\x160\x3\x160\x3\x161\x3"+
		"\x161\x3\x162\x3\x162\x3\x162\x3\x162\x3\x162\x3\x162\x3\x163\x3\x163"+
		"\x3\x164\x3\x164\x3\x165\x3\x165\x3\x166\x3\x166\x3\x167\x3\x167\x3\x168"+
		"\x3\x168\x3\x169\x3\x169\x3\x16A\x3\x16A\x3\x16B\x3\x16B\x3\x16C\x3\x16C"+
		"\x3\x16D\x3\x16D\x3\x16E\x3\x16E\x3\x16F\x3\x16F\x3\x170\x3\x170\x3\x171"+
		"\x3\x171\x3\x172\x3\x172\x3\x173\x3\x173\x3\x174\x3\x174\x3\x175\x3\x175"+
		"\x3\x176\x3\x176\x3\x177\x3\x177\x3\x178\x3\x178\x3\x179\x3\x179\x3\x179"+
		"\x3\x179\x3\x17A\x3\x17A\x3\x17A\x3\x17A\x3\x17B\x3\x17B\x3\x17B\x3\x17B"+
		"\x3\x17C\x3\x17C\x3\x17C\x3\x17C\x3\x17C\x3\x17C\x5\x17C\xE2E\n\x17C\x3"+
		"\x17D\x3\x17D\x3\x17E\x3\x17E\x3\x17F\x3\x17F\x3\x17F\x5\x17F\xE37\n\x17F"+
		"\x3\x17F\x5\x17F\xE3A\n\x17F\x3\x17F\x5\x17F\xE3D\n\x17F\x3\x17F\x3\x17F"+
		"\x5\x17F\xE41\n\x17F\x3\x180\x3\x180\x3\x180\x5\x180\xE46\n\x180\x3\x180"+
		"\x5\x180\xE49\n\x180\x3\x180\x5\x180\xE4C\n\x180\x3\x180\x3\x180\x5\x180"+
		"\xE50\n\x180\x3\x181\x3\x181\x3\x181\x5\x181\xE55\n\x181\x3\x181\x5\x181"+
		"\xE58\n\x181\x3\x181\x5\x181\xE5B\n\x181\x3\x181\x3\x181\x5\x181\xE5F"+
		"\n\x181\x3\x182\x3\x182\x3\x182\x5\x182\xE64\n\x182\x3\x182\x3\x182\x5"+
		"\x182\xE68\n\x182\x3\x183\x3\x183\x3\x183\x3\x183\x5\x183\xE6E\n\x183"+
		"\x3\x183\x3\x183\x5\x183\xE72\n\x183\x3\x183\x3\x183\x5\x183\xE76\n\x183"+
		"\x3\x183\x3\x183\x3\x184\x3\x184\x3\x184\x3\x184\x3\x184\x3\x184\x3\x184"+
		"\x3\x184\x3\x184\x3\x184\x5\x184\xE84\n\x184\x3\x185\x3\x185\x3\x185\x3"+
		"\x186\x3\x186\x3\x186\x3\x186\x3\x186\x3\x187\x3\x187\x3\x187\x3\x187"+
		"\x3\x187\x3\x188\x3\x188\x3\x188\x3\x188\x3\x188\x3\x188\x3\x188\x3\x188"+
		"\x3\x189\x3\x189\x3\x189\x3\x189\x3\x189\x3\x189\x3\x18A\x3\x18A\x3\x18A"+
		"\x5\x18A\xEA4\n\x18A\x3\x18A\x3\x18A\x5\x18A\xEA8\n\x18A\x3\x18A\x3\x18A"+
		"\x3\x18B\x3\x18B\x5\x18B\xEAE\n\x18B\x3\x18B\x3\x18B\x5\x18B\xEB2\n\x18B"+
		"\x3\x18B\x3\x18B\x5\x18B\xEB6\n\x18B\x3\x18B\x3\x18B\x3\x18C\x3\x18C\x3"+
		"\x18D\x3\x18D\x3\x18D\x3\x18D\x3\x18D\x5\x18D\xEC1\n\x18D\x3\x18D\x3\x18D"+
		"\x3\x18D\x3\x18D\a\x18D\xEC7\n\x18D\f\x18D\xE\x18D\xECA\v\x18D\x3\x18E"+
		"\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18E\x5\x18E"+
		"\xED5\n\x18E\x3\x18E\x3\x18E\x3\x18E\x3\x18F\x3\x18F\x5\x18F\xEDC\n\x18F"+
		"\x3\x18F\x3\x18F\x5\x18F\xEE0\n\x18F\x3\x18F\x3\x18F\x5\x18F\xEE4\n\x18F"+
		"\x3\x18F\x3\x18F\x3\x190\x3\x190\x3\x190\x3\x190\x3\x190\x3\x191\x3\x191"+
		"\x3\x191\x3\x191\x3\x191\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192\x3\x192"+
		"\x3\x192\x3\x192\x3\x193\x3\x193\x3\x193\x3\x193\x3\x194\x3\x194\x3\x194"+
		"\x3\x195\x3\x195\x5\x195\xF03\n\x195\x3\x195\x3\x195\x3\x196\x3\x196\x5"+
		"\x196\xF09\n\x196\x3\x196\x3\x196\x5\x196\xF0D\n\x196\x3\x196\x2\x3\xDE"+
		"\x197\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32"+
		"\x34\x36\x38:<>@\x42\x44\x46HJLNPRTVXZ\\^`\x62\x64\x66hjlnprtvxz|~\x80"+
		"\x82\x84\x86\x88\x8A\x8C\x8E\x90\x92\x94\x96\x98\x9A\x9C\x9E\xA0\xA2\xA4"+
		"\xA6\xA8\xAA\xAC\xAE\xB0\xB2\xB4\xB6\xB8\xBA\xBC\xBE\xC0\xC2\xC4\xC6\xC8"+
		"\xCA\xCC\xCE\xD0\xD2\xD4\xD6\xD8\xDA\xDC\xDE\xE0\xE2\xE4\xE6\xE8\xEA\xEC"+
		"\xEE\xF0\xF2\xF4\xF6\xF8\xFA\xFC\xFE\x100\x102\x104\x106\x108\x10A\x10C"+
		"\x10E\x110\x112\x114\x116\x118\x11A\x11C\x11E\x120\x122\x124\x126\x128"+
		"\x12A\x12C\x12E\x130\x132\x134\x136\x138\x13A\x13C\x13E\x140\x142\x144"+
		"\x146\x148\x14A\x14C\x14E\x150\x152\x154\x156\x158\x15A\x15C\x15E\x160"+
		"\x162\x164\x166\x168\x16A\x16C\x16E\x170\x172\x174\x176\x178\x17A\x17C"+
		"\x17E\x180\x182\x184\x186\x188\x18A\x18C\x18E\x190\x192\x194\x196\x198"+
		"\x19A\x19C\x19E\x1A0\x1A2\x1A4\x1A6\x1A8\x1AA\x1AC\x1AE\x1B0\x1B2\x1B4"+
		"\x1B6\x1B8\x1BA\x1BC\x1BE\x1C0\x1C2\x1C4\x1C6\x1C8\x1CA\x1CC\x1CE\x1D0"+
		"\x1D2\x1D4\x1D6\x1D8\x1DA\x1DC\x1DE\x1E0\x1E2\x1E4\x1E6\x1E8\x1EA\x1EC"+
		"\x1EE\x1F0\x1F2\x1F4\x1F6\x1F8\x1FA\x1FC\x1FE\x200\x202\x204\x206\x208"+
		"\x20A\x20C\x20E\x210\x212\x214\x216\x218\x21A\x21C\x21E\x220\x222\x224"+
		"\x226\x228\x22A\x22C\x22E\x230\x232\x234\x236\x238\x23A\x23C\x23E\x240"+
		"\x242\x244\x246\x248\x24A\x24C\x24E\x250\x252\x254\x256\x258\x25A\x25C"+
		"\x25E\x260\x262\x264\x266\x268\x26A\x26C\x26E\x270\x272\x274\x276\x278"+
		"\x27A\x27C\x27E\x280\x282\x284\x286\x288\x28A\x28C\x28E\x290\x292\x294"+
		"\x296\x298\x29A\x29C\x29E\x2A0\x2A2\x2A4\x2A6\x2A8\x2AA\x2AC\x2AE\x2B0"+
		"\x2B2\x2B4\x2B6\x2B8\x2BA\x2BC\x2BE\x2C0\x2C2\x2C4\x2C6\x2C8\x2CA\x2CC"+
		"\x2CE\x2D0\x2D2\x2D4\x2D6\x2D8\x2DA\x2DC\x2DE\x2E0\x2E2\x2E4\x2E6\x2E8"+
		"\x2EA\x2EC\x2EE\x2F0\x2F2\x2F4\x2F6\x2F8\x2FA\x2FC\x2FE\x300\x302\x304"+
		"\x306\x308\x30A\x30C\x30E\x310\x312\x314\x316\x318\x31A\x31C\x31E\x320"+
		"\x322\x324\x326\x328\x32A\x2\x18\x13\x2\f\xE\x10\x10\x14\x14  ##&&\x30"+
		"\x31\x33\x33::<=\x44\x44\x46\x46JJPPTUkkmn\n\x2\x15\x15\x18\x18\x37\x37"+
		"??RRVV\x62\x63\x66\x66\x4\x2\"\"--\x4\x2\x80\x80\x8B\x8B\x10\x2\x12\x12"+
		"\x15\x15\x18\x18\x1D\x1D\"\"--\x37\x37??\x43\x43RRVVZZ\x62\x63\x66\x66"+
		"\x3\x2~\x7F\x5\x2w}\x8A\x8B\x93\x94\x5\x2yy\x8B\x8B\x90\x91\x4\x2GGOO"+
		"\x6\x2\x88\x88\x97\x9E\xA0\xA0\xA2\xA2\x3\x2\x80\x82\x4\x2\x9F\x9F\xA1"+
		"\xA1\x4\x2\x89\x8A\x95\x96\x3\x2\x93\x94\x5\x2GGOO]]\a\x2**__~\x7F\x86"+
		"\x87\x8E\x8F\x4\x2\x36\x36GG\x5\x2\x39\x39\x41\x41KM\x4\x2))\x65\x65\x6"+
		"\x2\x39\x39\x41\x41KM\x65\x65\x4\x2**__\x13\x2\v\v\xF\xF\x11\x13\x15\x1F"+
		"!\"$%\'/\x32\x32\x34\x39;;>\x43\x45\x45GIKOQSVjll\x103A\x2\x32C\x3\x2"+
		"\x2\x2\x4\x32E\x3\x2\x2\x2\x6\x330\x3\x2\x2\x2\b\x336\x3\x2\x2\x2\n\x343"+
		"\x3\x2\x2\x2\f\x345\x3\x2\x2\x2\xE\x352\x3\x2\x2\x2\x10\x356\x3\x2\x2"+
		"\x2\x12\x35B\x3\x2\x2\x2\x14\x35D\x3\x2\x2\x2\x16\x35F\x3\x2\x2\x2\x18"+
		"\x361\x3\x2\x2\x2\x1A\x364\x3\x2\x2\x2\x1C\x3A3\x3\x2\x2\x2\x1E\x3A9\x3"+
		"\x2\x2\x2 \x3AB\x3\x2\x2\x2\"\x3AD\x3\x2\x2\x2$\x3AF\x3\x2\x2\x2&\x3B3"+
		"\x3\x2\x2\x2(\x3BB\x3\x2\x2\x2*\x3BD\x3\x2\x2\x2,\x3BF\x3\x2\x2\x2.\x3C1"+
		"\x3\x2\x2\x2\x30\x3CA\x3\x2\x2\x2\x32\x3CE\x3\x2\x2\x2\x34\x3D6\x3\x2"+
		"\x2\x2\x36\x3D8\x3\x2\x2\x2\x38\x3EB\x3\x2\x2\x2:\x418\x3\x2\x2\x2<\x41A"+
		"\x3\x2\x2\x2>\x41E\x3\x2\x2\x2@\x421\x3\x2\x2\x2\x42\x425\x3\x2\x2\x2"+
		"\x44\x427\x3\x2\x2\x2\x46\x429\x3\x2\x2\x2H\x431\x3\x2\x2\x2J\x43D\x3"+
		"\x2\x2\x2L\x43F\x3\x2\x2\x2N\x44E\x3\x2\x2\x2P\x459\x3\x2\x2\x2R\x45B"+
		"\x3\x2\x2\x2T\x463\x3\x2\x2\x2V\x469\x3\x2\x2\x2X\x46B\x3\x2\x2\x2Z\x472"+
		"\x3\x2\x2\x2\\\x47F\x3\x2\x2\x2^\x481\x3\x2\x2\x2`\x494\x3\x2\x2\x2\x62"+
		"\x49A\x3\x2\x2\x2\x64\x4A6\x3\x2\x2\x2\x66\x4A8\x3\x2\x2\x2h\x4B5\x3\x2"+
		"\x2\x2j\x4B7\x3\x2\x2\x2l\x4C3\x3\x2\x2\x2n\x4D8\x3\x2\x2\x2p\x4DE\x3"+
		"\x2\x2\x2r\x4E5\x3\x2\x2\x2t\x4EA\x3\x2\x2\x2v\x4EF\x3\x2\x2\x2x\x502"+
		"\x3\x2\x2\x2z\x504\x3\x2\x2\x2|\x556\x3\x2\x2\x2~\x558\x3\x2\x2\x2\x80"+
		"\x55B\x3\x2\x2\x2\x82\x55E\x3\x2\x2\x2\x84\x563\x3\x2\x2\x2\x86\x56F\x3"+
		"\x2\x2\x2\x88\x577\x3\x2\x2\x2\x8A\x582\x3\x2\x2\x2\x8C\x594\x3\x2\x2"+
		"\x2\x8E\x5A1\x3\x2\x2\x2\x90\x5A3\x3\x2\x2\x2\x92\x5A7\x3\x2\x2\x2\x94"+
		"\x5A9\x3\x2\x2\x2\x96\x5B3\x3\x2\x2\x2\x98\x5BB\x3\x2\x2\x2\x9A\x5C3\x3"+
		"\x2\x2\x2\x9C\x5CB\x3\x2\x2\x2\x9E\x5D3\x3\x2\x2\x2\xA0\x5DB\x3\x2\x2"+
		"\x2\xA2\x5E0\x3\x2\x2\x2\xA4\x5E4\x3\x2\x2\x2\xA6\x5F5\x3\x2\x2\x2\xA8"+
		"\x5F7\x3\x2\x2\x2\xAA\x5FD\x3\x2\x2\x2\xAC\x606\x3\x2\x2\x2\xAE\x60B\x3"+
		"\x2\x2\x2\xB0\x613\x3\x2\x2\x2\xB2\x615\x3\x2\x2\x2\xB4\x61D\x3\x2\x2"+
		"\x2\xB6\x621\x3\x2\x2\x2\xB8\x623\x3\x2\x2\x2\xBA\x626\x3\x2\x2\x2\xBC"+
		"\x62F\x3\x2\x2\x2\xBE\x635\x3\x2\x2\x2\xC0\x641\x3\x2\x2\x2\xC2\x643\x3"+
		"\x2\x2\x2\xC4\x648\x3\x2\x2\x2\xC6\x64B\x3\x2\x2\x2\xC8\x657\x3\x2\x2"+
		"\x2\xCA\x665\x3\x2\x2\x2\xCC\x675\x3\x2\x2\x2\xCE\x678\x3\x2\x2\x2\xD0"+
		"\x680\x3\x2\x2\x2\xD2\x686\x3\x2\x2\x2\xD4\x68A\x3\x2\x2\x2\xD6\x68C\x3"+
		"\x2\x2\x2\xD8\x68F\x3\x2\x2\x2\xDA\x694\x3\x2\x2\x2\xDC\x698\x3\x2\x2"+
		"\x2\xDE\x6A4\x3\x2\x2\x2\xE0\x6D4\x3\x2\x2\x2\xE2\x6D6\x3\x2\x2\x2\xE4"+
		"\x6DB\x3\x2\x2\x2\xE6\x6DF\x3\x2\x2\x2\xE8\x6ED\x3\x2\x2\x2\xEA\x6EF\x3"+
		"\x2\x2\x2\xEC\x6F6\x3\x2\x2\x2\xEE\x6FA\x3\x2\x2\x2\xF0\x6FC\x3\x2\x2"+
		"\x2\xF2\x706\x3\x2\x2\x2\xF4\x708\x3\x2\x2\x2\xF6\x70B\x3\x2\x2\x2\xF8"+
		"\x70D\x3\x2\x2\x2\xFA\x715\x3\x2\x2\x2\xFC\x71D\x3\x2\x2\x2\xFE\x71F\x3"+
		"\x2\x2\x2\x100\x723\x3\x2\x2\x2\x102\x726\x3\x2\x2\x2\x104\x72A\x3\x2"+
		"\x2\x2\x106\x72E\x3\x2\x2\x2\x108\x730\x3\x2\x2\x2\x10A\x739\x3\x2\x2"+
		"\x2\x10C\x73F\x3\x2\x2\x2\x10E\x745\x3\x2\x2\x2\x110\x74C\x3\x2\x2\x2"+
		"\x112\x74F\x3\x2\x2\x2\x114\x75C\x3\x2\x2\x2\x116\x762\x3\x2\x2\x2\x118"+
		"\x764\x3\x2\x2\x2\x11A\x76A\x3\x2\x2\x2\x11C\x772\x3\x2\x2\x2\x11E\x784"+
		"\x3\x2\x2\x2\x120\x786\x3\x2\x2\x2\x122\x788\x3\x2\x2\x2\x124\x78A\x3"+
		"\x2\x2\x2\x126\x792\x3\x2\x2\x2\x128\x7A0\x3\x2\x2\x2\x12A\x7A2\x3\x2"+
		"\x2\x2\x12C\x7A5\x3\x2\x2\x2\x12E\x7B4\x3\x2\x2\x2\x130\x7B6\x3\x2\x2"+
		"\x2\x132\x7BC\x3\x2\x2\x2\x134\x7C2\x3\x2\x2\x2\x136\x7CF\x3\x2\x2\x2"+
		"\x138\x7D1\x3\x2\x2\x2\x13A\x7D8\x3\x2\x2\x2\x13C\x7E1\x3\x2\x2\x2\x13E"+
		"\x7E4\x3\x2\x2\x2\x140\x7E7\x3\x2\x2\x2\x142\x7EA\x3\x2\x2\x2\x144\x7ED"+
		"\x3\x2\x2\x2\x146\x7F3\x3\x2\x2\x2\x148\x7FB\x3\x2\x2\x2\x14A\x806\x3"+
		"\x2\x2\x2\x14C\x809\x3\x2\x2\x2\x14E\x81C\x3\x2\x2\x2\x150\x822\x3\x2"+
		"\x2\x2\x152\x82A\x3\x2\x2\x2\x154\x837\x3\x2\x2\x2\x156\x83B\x3\x2\x2"+
		"\x2\x158\x841\x3\x2\x2\x2\x15A\x847\x3\x2\x2\x2\x15C\x849\x3\x2\x2\x2"+
		"\x15E\x84F\x3\x2\x2\x2\x160\x854\x3\x2\x2\x2\x162\x85A\x3\x2\x2\x2\x164"+
		"\x85D\x3\x2\x2\x2\x166\x869\x3\x2\x2\x2\x168\x86F\x3\x2\x2\x2\x16A\x886"+
		"\x3\x2\x2\x2\x16C\x896\x3\x2\x2\x2\x16E\x898\x3\x2\x2\x2\x170\x89D\x3"+
		"\x2\x2\x2\x172\x8AA\x3\x2\x2\x2\x174\x8AC\x3\x2\x2\x2\x176\x8B5\x3\x2"+
		"\x2\x2\x178\x8BD\x3\x2\x2\x2\x17A\x8C4\x3\x2\x2\x2\x17C\x8D3\x3\x2\x2"+
		"\x2\x17E\x8D8\x3\x2\x2\x2\x180\x8DA\x3\x2\x2\x2\x182\x8E2\x3\x2\x2\x2"+
		"\x184\x8E6\x3\x2\x2\x2\x186\x8ED\x3\x2\x2\x2\x188\x901\x3\x2\x2\x2\x18A"+
		"\x904\x3\x2\x2\x2\x18C\x917\x3\x2\x2\x2\x18E\x928\x3\x2\x2\x2\x190\x92A"+
		"\x3\x2\x2\x2\x192\x936\x3\x2\x2\x2\x194\x93E\x3\x2\x2\x2\x196\x942\x3"+
		"\x2\x2\x2\x198\x94F\x3\x2\x2\x2\x19A\x953\x3\x2\x2\x2\x19C\x955\x3\x2"+
		"\x2\x2\x19E\x959\x3\x2\x2\x2\x1A0\x96F\x3\x2\x2\x2\x1A2\x97F\x3\x2\x2"+
		"\x2\x1A4\x983\x3\x2\x2\x2\x1A6\x985\x3\x2\x2\x2\x1A8\x989\x3\x2\x2\x2"+
		"\x1AA\x991\x3\x2\x2\x2\x1AC\x993\x3\x2\x2\x2\x1AE\x9A7\x3\x2\x2\x2\x1B0"+
		"\x9A9\x3\x2\x2\x2\x1B2\x9AC\x3\x2\x2\x2\x1B4\x9AF\x3\x2\x2\x2\x1B6\x9B6"+
		"\x3\x2\x2\x2\x1B8\x9C2\x3\x2\x2\x2\x1BA\x9D2\x3\x2\x2\x2\x1BC\x9D5\x3"+
		"\x2\x2\x2\x1BE\x9E7\x3\x2\x2\x2\x1C0\x9F0\x3\x2\x2\x2\x1C2\x9FF\x3\x2"+
		"\x2\x2\x1C4\xA03\x3\x2\x2\x2\x1C6\xA06\x3\x2\x2\x2\x1C8\xA17\x3\x2\x2"+
		"\x2\x1CA\xA2A\x3\x2\x2\x2\x1CC\xA2D\x3\x2\x2\x2\x1CE\xA3A\x3\x2\x2\x2"+
		"\x1D0\xA40\x3\x2\x2\x2\x1D2\xA46\x3\x2\x2\x2\x1D4\xA50\x3\x2\x2\x2\x1D6"+
		"\xA62\x3\x2\x2\x2\x1D8\xA64\x3\x2\x2\x2\x1DA\xA70\x3\x2\x2\x2\x1DC\xA76"+
		"\x3\x2\x2\x2\x1DE\xA81\x3\x2\x2\x2\x1E0\xA86\x3\x2\x2\x2\x1E2\xA88\x3"+
		"\x2\x2\x2\x1E4\xA90\x3\x2\x2\x2\x1E6\xA92\x3\x2\x2\x2\x1E8\xAAD\x3\x2"+
		"\x2\x2\x1EA\xAC5\x3\x2\x2\x2\x1EC\xAD7\x3\x2\x2\x2\x1EE\xADB\x3\x2\x2"+
		"\x2\x1F0\xADE\x3\x2\x2\x2\x1F2\xAE7\x3\x2\x2\x2\x1F4\xAF1\x3\x2\x2\x2"+
		"\x1F6\xAF3\x3\x2\x2\x2\x1F8\xB0A\x3\x2\x2\x2\x1FA\xB0E\x3\x2\x2\x2\x1FC"+
		"\xB11\x3\x2\x2\x2\x1FE\xB19\x3\x2\x2\x2\x200\xB1D\x3\x2\x2\x2\x202\xB1F"+
		"\x3\x2\x2\x2\x204\xB23\x3\x2\x2\x2\x206\xB27\x3\x2\x2\x2\x208\xB2A\x3"+
		"\x2\x2\x2\x20A\xB41\x3\x2\x2\x2\x20C\xB4E\x3\x2\x2\x2\x20E\xB50\x3\x2"+
		"\x2\x2\x210\xB53\x3\x2\x2\x2\x212\xB59\x3\x2\x2\x2\x214\xB61\x3\x2\x2"+
		"\x2\x216\xB6E\x3\x2\x2\x2\x218\xB7A\x3\x2\x2\x2\x21A\xB84\x3\x2\x2\x2"+
		"\x21C\xB88\x3\x2\x2\x2\x21E\xB8E\x3\x2\x2\x2\x220\xB9E\x3\x2\x2\x2\x222"+
		"\xBA0\x3\x2\x2\x2\x224\xBA9\x3\x2\x2\x2\x226\xBC0\x3\x2\x2\x2\x228\xBCD"+
		"\x3\x2\x2\x2\x22A\xBCF\x3\x2\x2\x2\x22C\xBD4\x3\x2\x2\x2\x22E\xBE7\x3"+
		"\x2\x2\x2\x230\xBE9\x3\x2\x2\x2\x232\xBEC\x3\x2\x2\x2\x234\xBF3\x3\x2"+
		"\x2\x2\x236\xBF8\x3\x2\x2\x2\x238\xC32\x3\x2\x2\x2\x23A\xC47\x3\x2\x2"+
		"\x2\x23C\xC53\x3\x2\x2\x2\x23E\xC6C\x3\x2\x2\x2\x240\xC77\x3\x2\x2\x2"+
		"\x242\xC86\x3\x2\x2\x2\x244\xC94\x3\x2\x2\x2\x246\xCA0\x3\x2\x2\x2\x248"+
		"\xCA3\x3\x2\x2\x2\x24A\xCA7\x3\x2\x2\x2\x24C\xCA9\x3\x2\x2\x2\x24E\xCB2"+
		"\x3\x2\x2\x2\x250\xCBA\x3\x2\x2\x2\x252\xCCF\x3\x2\x2\x2\x254\xCDC\x3"+
		"\x2\x2\x2\x256\xCDE\x3\x2\x2\x2\x258\xCE1\x3\x2\x2\x2\x25A\xCE5\x3\x2"+
		"\x2\x2\x25C\xCED\x3\x2\x2\x2\x25E\xCF2\x3\x2\x2\x2\x260\xCF4\x3\x2\x2"+
		"\x2\x262\xCF7\x3\x2\x2\x2\x264\xCFB\x3\x2\x2\x2\x266\xD05\x3\x2\x2\x2"+
		"\x268\xD0A\x3\x2\x2\x2\x26A\xD0C\x3\x2\x2\x2\x26C\xD14\x3\x2\x2\x2\x26E"+
		"\xD18\x3\x2\x2\x2\x270\xD1A\x3\x2\x2\x2\x272\xD20\x3\x2\x2\x2\x274\xD28"+
		"\x3\x2\x2\x2\x276\xD2A\x3\x2\x2\x2\x278\xD32\x3\x2\x2\x2\x27A\xD36\x3"+
		"\x2\x2\x2\x27C\xD38\x3\x2\x2\x2\x27E\xD3A\x3\x2\x2\x2\x280\xD3C\x3\x2"+
		"\x2\x2\x282\xD3E\x3\x2\x2\x2\x284\xD40\x3\x2\x2\x2\x286\xD42\x3\x2\x2"+
		"\x2\x288\xD44\x3\x2\x2\x2\x28A\xD46\x3\x2\x2\x2\x28C\xD48\x3\x2\x2\x2"+
		"\x28E\xD4A\x3\x2\x2\x2\x290\xD4C\x3\x2\x2\x2\x292\xD4F\x3\x2\x2\x2\x294"+
		"\xD79\x3\x2\x2\x2\x296\xD7D\x3\x2\x2\x2\x298\xD7F\x3\x2\x2\x2\x29A\xD82"+
		"\x3\x2\x2\x2\x29C\xD9A\x3\x2\x2\x2\x29E\xD9C\x3\x2\x2\x2\x2A0\xD9E\x3"+
		"\x2\x2\x2\x2A2\xDA2\x3\x2\x2\x2\x2A4\xDA4\x3\x2\x2\x2\x2A6\xDA7\x3\x2"+
		"\x2\x2\x2A8\xDAA\x3\x2\x2\x2\x2AA\xDAF\x3\x2\x2\x2\x2AC\xDB6\x3\x2\x2"+
		"\x2\x2AE\xDBE\x3\x2\x2\x2\x2B0\xDC5\x3\x2\x2\x2\x2B2\xDC7\x3\x2\x2\x2"+
		"\x2B4\xDCA\x3\x2\x2\x2\x2B6\xDD5\x3\x2\x2\x2\x2B8\xDD9\x3\x2\x2\x2\x2BA"+
		"\xDDB\x3\x2\x2\x2\x2BC\xDDE\x3\x2\x2\x2\x2BE\xDE2\x3\x2\x2\x2\x2C0\xDE7"+
		"\x3\x2\x2\x2\x2C2\xDE9\x3\x2\x2\x2\x2C4\xDEF\x3\x2\x2\x2\x2C6\xDF1\x3"+
		"\x2\x2\x2\x2C8\xDF3\x3\x2\x2\x2\x2CA\xDF5\x3\x2\x2\x2\x2CC\xDF7\x3\x2"+
		"\x2\x2\x2CE\xDF9\x3\x2\x2\x2\x2D0\xDFB\x3\x2\x2\x2\x2D2\xDFD\x3\x2\x2"+
		"\x2\x2D4\xDFF\x3\x2\x2\x2\x2D6\xE01\x3\x2\x2\x2\x2D8\xE03\x3\x2\x2\x2"+
		"\x2DA\xE05\x3\x2\x2\x2\x2DC\xE07\x3\x2\x2\x2\x2DE\xE09\x3\x2\x2\x2\x2E0"+
		"\xE0B\x3\x2\x2\x2\x2E2\xE0D\x3\x2\x2\x2\x2E4\xE0F\x3\x2\x2\x2\x2E6\xE11"+
		"\x3\x2\x2\x2\x2E8\xE13\x3\x2\x2\x2\x2EA\xE15\x3\x2\x2\x2\x2EC\xE17\x3"+
		"\x2\x2\x2\x2EE\xE19\x3\x2\x2\x2\x2F0\xE1B\x3\x2\x2\x2\x2F2\xE1F\x3\x2"+
		"\x2\x2\x2F4\xE23\x3\x2\x2\x2\x2F6\xE2D\x3\x2\x2\x2\x2F8\xE2F\x3\x2\x2"+
		"\x2\x2FA\xE31\x3\x2\x2\x2\x2FC\xE33\x3\x2\x2\x2\x2FE\xE42\x3\x2\x2\x2"+
		"\x300\xE51\x3\x2\x2\x2\x302\xE60\x3\x2\x2\x2\x304\xE69\x3\x2\x2\x2\x306"+
		"\xE79\x3\x2\x2\x2\x308\xE85\x3\x2\x2\x2\x30A\xE88\x3\x2\x2\x2\x30C\xE8D"+
		"\x3\x2\x2\x2\x30E\xE92\x3\x2\x2\x2\x310\xE9A\x3\x2\x2\x2\x312\xEA0\x3"+
		"\x2\x2\x2\x314\xEAB\x3\x2\x2\x2\x316\xEB9\x3\x2\x2\x2\x318\xEC0\x3\x2"+
		"\x2\x2\x31A\xECB\x3\x2\x2\x2\x31C\xED9\x3\x2\x2\x2\x31E\xEE7\x3\x2\x2"+
		"\x2\x320\xEEC\x3\x2\x2\x2\x322\xEF1\x3\x2\x2\x2\x324\xEF9\x3\x2\x2\x2"+
		"\x326\xEFD\x3\x2\x2\x2\x328\xF00\x3\x2\x2\x2\x32A\xF06\x3\x2\x2\x2\x32C"+
		"\x32D\x5\b\x5\x2\x32D\x3\x3\x2\x2\x2\x32E\x32F\x5\b\x5\x2\x32F\x5\x3\x2"+
		"\x2\x2\x330\x331\t\x2\x2\x2\x331\a\x3\x2\x2\x2\x332\x333\x5\x6\x4\x2\x333"+
		"\x334\x5\n\x6\x2\x334\x337\x3\x2\x2\x2\x335\x337\x5\x166\xB4\x2\x336\x332"+
		"\x3\x2\x2\x2\x336\x335\x3\x2\x2\x2\x337\x33E\x3\x2\x2\x2\x338\x339\az"+
		"\x2\x2\x339\x33A\x5\x6\x4\x2\x33A\x33B\x5\n\x6\x2\x33B\x33D\x3\x2\x2\x2"+
		"\x33C\x338\x3\x2\x2\x2\x33D\x340\x3\x2\x2\x2\x33E\x33C\x3\x2\x2\x2\x33E"+
		"\x33F\x3\x2\x2\x2\x33F\t\x3\x2\x2\x2\x340\x33E\x3\x2\x2\x2\x341\x344\x5"+
		"$\x13\x2\x342\x344\x3\x2\x2\x2\x343\x341\x3\x2\x2\x2\x343\x342\x3\x2\x2"+
		"\x2\x344\v\x3\x2\x2\x2\x345\x34B\x5\xE\b\x2\x346\x34A\a\x8B\x2\x2\x347"+
		"\x34A\x5\x21C\x10F\x2\x348\x34A\a\x80\x2\x2\x349\x346\x3\x2\x2\x2\x349"+
		"\x347\x3\x2\x2\x2\x349\x348\x3\x2\x2\x2\x34A\x34D\x3\x2\x2\x2\x34B\x349"+
		"\x3\x2\x2\x2\x34B\x34C\x3\x2\x2\x2\x34C\r\x3\x2\x2\x2\x34D\x34B\x3\x2"+
		"\x2\x2\x34E\x353\x5\x10\t\x2\x34F\x353\x5\x1E\x10\x2\x350\x351\ai\x2\x2"+
		"\x351\x353\a\x80\x2\x2\x352\x34E\x3\x2\x2\x2\x352\x34F\x3\x2\x2\x2\x352"+
		"\x350\x3\x2\x2\x2\x353\xF\x3\x2\x2\x2\x354\x357\x5\x12\n\x2\x355\x357"+
		"\a\x12\x2\x2\x356\x354\x3\x2\x2\x2\x356\x355\x3\x2\x2\x2\x357\x11\x3\x2"+
		"\x2\x2\x358\x35C\x5\x14\v\x2\x359\x35C\x5\x16\f\x2\x35A\x35C\a\x1D\x2"+
		"\x2\x35B\x358\x3\x2\x2\x2\x35B\x359\x3\x2\x2\x2\x35B\x35A\x3\x2\x2\x2"+
		"\x35C\x13\x3\x2\x2\x2\x35D\x35E\t\x3\x2\x2\x35E\x15\x3\x2\x2\x2\x35F\x360"+
		"\t\x4\x2\x2\x360\x17\x3\x2\x2\x2\x361\x362\x5\x1A\xE\x2\x362\x363\a\x8B"+
		"\x2\x2\x363\x19\x3\x2\x2\x2\x364\x369\x5\xE\b\x2\x365\x368\x5\x21C\x10F"+
		"\x2\x366\x368\a\x80\x2\x2\x367\x365\x3\x2\x2\x2\x367\x366\x3\x2\x2\x2"+
		"\x368\x36B\x3\x2\x2\x2\x369\x367\x3\x2\x2\x2\x369\x36A\x3\x2\x2\x2\x36A"+
		"\x1B\x3\x2\x2\x2\x36B\x369\x3\x2\x2\x2\x36C\x376\x5\x10\t\x2\x36D\x36F"+
		"\t\x5\x2\x2\x36E\x36D\x3\x2\x2\x2\x36F\x372\x3\x2\x2\x2\x370\x36E\x3\x2"+
		"\x2\x2\x370\x371\x3\x2\x2\x2\x371\x373\x3\x2\x2\x2\x372\x370\x3\x2\x2"+
		"\x2\x373\x375\x5\x21C\x10F\x2\x374\x370\x3\x2\x2\x2\x375\x378\x3\x2\x2"+
		"\x2\x376\x374\x3\x2\x2\x2\x376\x377\x3\x2\x2\x2\x377\x37C\x3\x2\x2\x2"+
		"\x378\x376\x3\x2\x2\x2\x379\x37B\t\x5\x2\x2\x37A\x379\x3\x2\x2\x2\x37B"+
		"\x37E\x3\x2\x2\x2\x37C\x37A\x3\x2\x2\x2\x37C\x37D\x3\x2\x2\x2\x37D\x37F"+
		"\x3\x2\x2\x2\x37E\x37C\x3\x2\x2\x2\x37F\x380\x5\x21C\x10F\x2\x380\x3A4"+
		"\x3\x2\x2\x2\x381\x38B\x5\x1E\x10\x2\x382\x384\t\x5\x2\x2\x383\x382\x3"+
		"\x2\x2\x2\x384\x387\x3\x2\x2\x2\x385\x383\x3\x2\x2\x2\x385\x386\x3\x2"+
		"\x2\x2\x386\x388\x3\x2\x2\x2\x387\x385\x3\x2\x2\x2\x388\x38A\x5\x21C\x10F"+
		"\x2\x389\x385\x3\x2\x2\x2\x38A\x38D\x3\x2\x2\x2\x38B\x389\x3\x2\x2\x2"+
		"\x38B\x38C\x3\x2\x2\x2\x38C\x3A4\x3\x2\x2\x2\x38D\x38B\x3\x2\x2\x2\x38E"+
		"\x38F\ai\x2\x2\x38F\x399\a\x80\x2\x2\x390\x392\t\x5\x2\x2\x391\x390\x3"+
		"\x2\x2\x2\x392\x395\x3\x2\x2\x2\x393\x391\x3\x2\x2\x2\x393\x394\x3\x2"+
		"\x2\x2\x394\x396\x3\x2\x2\x2\x395\x393\x3\x2\x2\x2\x396\x398\x5\x21C\x10F"+
		"\x2\x397\x393\x3\x2\x2\x2\x398\x39B\x3\x2\x2\x2\x399\x397\x3\x2\x2\x2"+
		"\x399\x39A\x3\x2\x2\x2\x39A\x39F\x3\x2\x2\x2\x39B\x399\x3\x2\x2\x2\x39C"+
		"\x39E\t\x5\x2\x2\x39D\x39C\x3\x2\x2\x2\x39E\x3A1\x3\x2\x2\x2\x39F\x39D"+
		"\x3\x2\x2\x2\x39F\x3A0\x3\x2\x2\x2\x3A0\x3A2\x3\x2\x2\x2\x3A1\x39F\x3"+
		"\x2\x2\x2\x3A2\x3A4\x5\x21C\x10F\x2\x3A3\x36C\x3\x2\x2\x2\x3A3\x381\x3"+
		"\x2\x2\x2\x3A3\x38E\x3\x2\x2\x2\x3A4\x1D\x3\x2\x2\x2\x3A5\x3AA\x5\x4\x3"+
		"\x2\x3A6\x3AA\a\x43\x2\x2\x3A7\x3AA\x5\x2EC\x177\x2\x3A8\x3AA\aZ\x2\x2"+
		"\x3A9\x3A5\x3\x2\x2\x2\x3A9\x3A6\x3\x2\x2\x2\x3A9\x3A7\x3\x2\x2\x2\x3A9"+
		"\x3A8\x3\x2\x2\x2\x3AA\x1F\x3\x2\x2\x2\x3AB\x3AC\x5\x4\x3\x2\x3AC!\x3"+
		"\x2\x2\x2\x3AD\x3AE\x5\x4\x3\x2\x3AE#\x3\x2\x2\x2\x3AF\x3B0\a\x89\x2\x2"+
		"\x3B0\x3B1\x5&\x14\x2\x3B1\x3B2\a\x8A\x2\x2\x3B2%\x3\x2\x2\x2\x3B3\x3B8"+
		"\x5(\x15\x2\x3B4\x3B5\a{\x2\x2\x3B5\x3B7\x5(\x15\x2\x3B6\x3B4\x3\x2\x2"+
		"\x2\x3B7\x3BA\x3\x2\x2\x2\x3B8\x3B6\x3\x2\x2\x2\x3B8\x3B9\x3\x2\x2\x2"+
		"\x3B9\'\x3\x2\x2\x2\x3BA\x3B8\x3\x2\x2\x2\x3BB\x3BC\x5\f\a\x2\x3BC)\x3"+
		"\x2\x2\x2\x3BD\x3BE\ai\x2\x2\x3BE+\x3\x2\x2\x2\x3BF\x3C0\x5\xDEp\x2\x3C0"+
		"-\x3\x2\x2\x2\x3C1\x3C6\x5\x30\x19\x2\x3C2\x3C3\a{\x2\x2\x3C3\x3C5\x5"+
		"\x30\x19\x2\x3C4\x3C2\x3\x2\x2\x2\x3C5\x3C8\x3\x2\x2\x2\x3C6\x3C4\x3\x2"+
		"\x2\x2\x3C6\x3C7\x3\x2\x2\x2\x3C7/\x3\x2\x2\x2\x3C8\x3C6\x3\x2\x2\x2\x3C9"+
		"\x3CB\x5\x32\x1A\x2\x3CA\x3C9\x3\x2\x2\x2\x3CA\x3CB\x3\x2\x2\x2\x3CB\x3CC"+
		"\x3\x2\x2\x2\x3CC\x3CD\x5\x34\x1B\x2\x3CD\x31\x3\x2\x2\x2\x3CE\x3CF\x5"+
		"\x6\x4\x2\x3CF\x3D0\a|\x2\x2\x3D0\x33\x3\x2\x2\x2\x3D1\x3D7\x5\xDEp\x2"+
		"\x3D2\x3D3\aO\x2\x2\x3D3\x3D7\x5,\x17\x2\x3D4\x3D5\aG\x2\x2\x3D5\x3D7"+
		"\x5,\x17\x2\x3D6\x3D1\x3\x2\x2\x2\x3D6\x3D2\x3\x2\x2\x2\x3D6\x3D4\x3\x2"+
		"\x2\x2\x3D7\x35\x3\x2\x2\x2\x3D8\x3DC\x5:\x1E\x2\x3D9\x3DB\x5<\x1F\x2"+
		"\x3DA\x3D9\x3\x2\x2\x2\x3DB\x3DE\x3\x2\x2\x2\x3DC\x3DA\x3\x2\x2\x2\x3DC"+
		"\x3DD\x3\x2\x2\x2\x3DD\x3E2\x3\x2\x2\x2\x3DE\x3DC\x3\x2\x2\x2\x3DF\x3E1"+
		"\x5\x38\x1D\x2\x3E0\x3DF\x3\x2\x2\x2\x3E1\x3E4\x3\x2\x2\x2\x3E2\x3E0\x3"+
		"\x2\x2\x2\x3E2\x3E3\x3\x2\x2\x2\x3E3\x37\x3\x2\x2\x2\x3E4\x3E2\x3\x2\x2"+
		"\x2\x3E5\x3EC\x5\x324\x193\x2\x3E6\x3EC\x5\x328\x195\x2\x3E7\x3EC\a\x8E"+
		"\x2\x2\x3E8\x3EC\a\x8F\x2\x2\x3E9\x3EA\a\x92\x2\x2\x3EA\x3EC\x5\x6\x4"+
		"\x2\x3EB\x3E5\x3\x2\x2\x2\x3EB\x3E6\x3\x2\x2\x2\x3EB\x3E7\x3\x2\x2\x2"+
		"\x3EB\x3E8\x3\x2\x2\x2\x3EB\x3E9\x3\x2\x2\x2\x3EC\x3F0\x3\x2\x2\x2\x3ED"+
		"\x3EF\x5<\x1F\x2\x3EE\x3ED\x3\x2\x2\x2\x3EF\x3F2\x3\x2\x2\x2\x3F0\x3EE"+
		"\x3\x2\x2\x2\x3F0\x3F1\x3\x2\x2\x2\x3F1\x39\x3\x2\x2\x2\x3F2\x3F0\x3\x2"+
		"\x2\x2\x3F3\x419\x5\x2F6\x17C\x2\x3F4\x419\x5> \x2\x3F5\x419\x5@!\x2\x3F6"+
		"\x419\x5\x44#\x2\x3F7\x419\x5\x166\xB4\x2\x3F8\x419\x5H%\x2\x3F9\x419"+
		"\x5J&\x2\x3FA\x410\a\x41\x2\x2\x3FB\x40A\x5\f\a\x2\x3FC\x40B\x5\x32A\x196"+
		"\x2\x3FD\x40B\x5N(\x2\x3FE\x3FF\av\x2\x2\x3FF\x400\x5\x46$\x2\x400\x402"+
		"\aw\x2\x2\x401\x403\x5\x21A\x10E\x2\x402\x401\x3\x2\x2\x2\x402\x403\x3"+
		"\x2\x2\x2\x403\x405\x3\x2\x2\x2\x404\x406\x5\x220\x111\x2\x405\x404\x3"+
		"\x2\x2\x2\x405\x406\x3\x2\x2\x2\x406\x40B\x3\x2\x2\x2\x407\x408\x5\x21A"+
		"\x10E\x2\x408\x409\x5\x220\x111\x2\x409\x40B\x3\x2\x2\x2\x40A\x3FC\x3"+
		"\x2\x2\x2\x40A\x3FD\x3\x2\x2\x2\x40A\x3FE\x3\x2\x2\x2\x40A\x407\x3\x2"+
		"\x2\x2\x40B\x411\x3\x2\x2\x2\x40C\x411\x5\x64\x33\x2\x40D\x40E\x5\x21C"+
		"\x10F\x2\x40E\x40F\x5\x220\x111\x2\x40F\x411\x3\x2\x2\x2\x410\x3FB\x3"+
		"\x2\x2\x2\x410\x40C\x3\x2\x2\x2\x410\x40D\x3\x2\x2\x2\x411\x419\x3\x2"+
		"\x2\x2\x412\x419\x5j\x36\x2\x413\x419\x5r:\x2\x414\x419\x5t;\x2\x415\x419"+
		"\x5v<\x2\x416\x419\x5\xA4S\x2\x417\x419\x5\x2A8\x155\x2\x418\x3F3\x3\x2"+
		"\x2\x2\x418\x3F4\x3\x2\x2\x2\x418\x3F5\x3\x2\x2\x2\x418\x3F6\x3\x2\x2"+
		"\x2\x418\x3F7\x3\x2\x2\x2\x418\x3F8\x3\x2\x2\x2\x418\x3F9\x3\x2\x2\x2"+
		"\x418\x3FA\x3\x2\x2\x2\x418\x412\x3\x2\x2\x2\x418\x413\x3\x2\x2\x2\x418"+
		"\x414\x3\x2\x2\x2\x418\x415\x3\x2\x2\x2\x418\x416\x3\x2\x2\x2\x418\x417"+
		"\x3\x2\x2\x2\x419;\x3\x2\x2\x2\x41A\x41B\av\x2\x2\x41B\x41C\x5\x46$\x2"+
		"\x41C\x41D\aw\x2\x2\x41D=\x3\x2\x2\x2\x41E\x41F\x5\x6\x4\x2\x41F\x420"+
		"\x5\n\x6\x2\x420?\x3\x2\x2\x2\x421\x422\ax\x2\x2\x422\x423\x5\xDEp\x2"+
		"\x423\x424\ay\x2\x2\x424\x41\x3\x2\x2\x2\x425\x426\x5\x36\x1C\x2\x426"+
		"\x43\x3\x2\x2\x2\x427\x428\t\x6\x2\x2\x428\x45\x3\x2\x2\x2\x429\x42E\x5"+
		"\xDEp\x2\x42A\x42B\a{\x2\x2\x42B\x42D\x5\xDEp\x2\x42C\x42A\x3\x2\x2\x2"+
		"\x42D\x430\x3\x2\x2\x2\x42E\x42C\x3\x2\x2\x2\x42E\x42F\x3\x2\x2\x2\x42F"+
		"G\x3\x2\x2\x2\x430\x42E\x3\x2\x2\x2\x431\x432\a]\x2\x2\x432I\x3\x2\x2"+
		"\x2\x433\x434\a\x11\x2\x2\x434\x435\az\x2\x2\x435\x436\x5\x6\x4\x2\x436"+
		"\x437\x5\n\x6\x2\x437\x43E\x3\x2\x2\x2\x438\x439\a\x11\x2\x2\x439\x43A"+
		"\av\x2\x2\x43A\x43B\x5\x46$\x2\x43B\x43C\aw\x2\x2\x43C\x43E\x3\x2\x2\x2"+
		"\x43D\x433\x3\x2\x2\x2\x43D\x438\x3\x2\x2\x2\x43EK\x3\x2\x2\x2\x43F\x440"+
		"\a\x41\x2\x2\x440\x44A\x5\f\a\x2\x441\x443\ax\x2\x2\x442\x444\x5.\x18"+
		"\x2\x443\x442\x3\x2\x2\x2\x443\x444\x3\x2\x2\x2\x444\x445\x3\x2\x2\x2"+
		"\x445\x447\ay\x2\x2\x446\x448\x5N(\x2\x447\x446\x3\x2\x2\x2\x447\x448"+
		"\x3\x2\x2\x2\x448\x44B\x3\x2\x2\x2\x449\x44B\x5N(\x2\x44A\x441\x3\x2\x2"+
		"\x2\x44A\x449\x3\x2\x2\x2\x44BM\x3\x2\x2\x2\x44C\x44F\x5P)\x2\x44D\x44F"+
		"\x5X-\x2\x44E\x44C\x3\x2\x2\x2\x44E\x44D\x3\x2\x2\x2\x44FO\x3\x2\x2\x2"+
		"\x450\x451\at\x2\x2\x451\x45A\au\x2\x2\x452\x453\at\x2\x2\x453\x455\x5"+
		"R*\x2\x454\x456\a{\x2\x2\x455\x454\x3\x2\x2\x2\x455\x456\x3\x2\x2\x2\x456"+
		"\x457\x3\x2\x2\x2\x457\x458\au\x2\x2\x458\x45A\x3\x2\x2\x2\x459\x450\x3"+
		"\x2\x2\x2\x459\x452\x3\x2\x2\x2\x45AQ\x3\x2\x2\x2\x45B\x460\x5T+\x2\x45C"+
		"\x45D\a{\x2\x2\x45D\x45F\x5T+\x2\x45E\x45C\x3\x2\x2\x2\x45F\x462\x3\x2"+
		"\x2\x2\x460\x45E\x3\x2\x2\x2\x460\x461\x3\x2\x2\x2\x461S\x3\x2\x2\x2\x462"+
		"\x460\x3\x2\x2\x2\x463\x464\x5\x6\x4\x2\x464\x465\a\x88\x2\x2\x465\x466"+
		"\x5V,\x2\x466U\x3\x2\x2\x2\x467\x46A\x5\xDEp\x2\x468\x46A\x5N(\x2\x469"+
		"\x467\x3\x2\x2\x2\x469\x468\x3\x2\x2\x2\x46AW\x3\x2\x2\x2\x46B\x46C\a"+
		"t\x2\x2\x46C\x46E\x5Z.\x2\x46D\x46F\a{\x2\x2\x46E\x46D\x3\x2\x2\x2\x46E"+
		"\x46F\x3\x2\x2\x2\x46F\x470\x3\x2\x2\x2\x470\x471\au\x2\x2\x471Y\x3\x2"+
		"\x2\x2\x472\x477\x5\\/\x2\x473\x474\a{\x2\x2\x474\x476\x5\\/\x2\x475\x473"+
		"\x3\x2\x2\x2\x476\x479\x3\x2\x2\x2\x477\x475\x3\x2\x2\x2\x477\x478\x3"+
		"\x2\x2\x2\x478[\x3\x2\x2\x2\x479\x477\x3\x2\x2\x2\x47A\x480\x5\xE0q\x2"+
		"\x47B\x47C\at\x2\x2\x47C\x47D\x5\x46$\x2\x47D\x47E\au\x2\x2\x47E\x480"+
		"\x3\x2\x2\x2\x47F\x47A\x3\x2\x2\x2\x47F\x47B\x3\x2\x2\x2\x480]\x3\x2\x2"+
		"\x2\x481\x492\a\x41\x2\x2\x482\x483\x5\x216\x10C\x2\x483\x484\x5\x220"+
		"\x111\x2\x484\x493\x3\x2\x2\x2\x485\x486\x5\x218\x10D\x2\x486\x487\av"+
		"\x2\x2\x487\x488\x5\x46$\x2\x488\x48A\aw\x2\x2\x489\x48B\x5\x21A\x10E"+
		"\x2\x48A\x489\x3\x2\x2\x2\x48A\x48B\x3\x2\x2\x2\x48B\x48D\x3\x2\x2\x2"+
		"\x48C\x48E\x5\x220\x111\x2\x48D\x48C\x3\x2\x2\x2\x48D\x48E\x3\x2\x2\x2"+
		"\x48E\x493\x3\x2\x2\x2\x48F\x490\x5\x21C\x10F\x2\x490\x491\x5\x220\x111"+
		"\x2\x491\x493\x3\x2\x2\x2\x492\x482\x3\x2\x2\x2\x492\x485\x3\x2\x2\x2"+
		"\x492\x48F\x3\x2\x2\x2\x493_\x3\x2\x2\x2\x494\x495\a\x41\x2\x2\x495\x496"+
		"\x5\"\x12\x2\x496\x497\ax\x2\x2\x497\x498\x5\xDEp\x2\x498\x499\ay\x2\x2"+
		"\x499\x61\x3\x2\x2\x2\x49A\x49B\a\x41\x2\x2\x49B\x49C\x5\x64\x33\x2\x49C"+
		"\x63\x3\x2\x2\x2\x49D\x49E\at\x2\x2\x49E\x4A7\au\x2\x2\x49F\x4A0\at\x2"+
		"\x2\x4A0\x4A2\x5\x66\x34\x2\x4A1\x4A3\a{\x2\x2\x4A2\x4A1\x3\x2\x2\x2\x4A2"+
		"\x4A3\x3\x2\x2\x2\x4A3\x4A4\x3\x2\x2\x2\x4A4\x4A5\au\x2\x2\x4A5\x4A7\x3"+
		"\x2\x2\x2\x4A6\x49D\x3\x2\x2\x2\x4A6\x49F\x3\x2\x2\x2\x4A7\x65\x3\x2\x2"+
		"\x2\x4A8\x4AD\x5h\x35\x2\x4A9\x4AA\a{\x2\x2\x4AA\x4AC\x5h\x35\x2\x4AB"+
		"\x4A9\x3\x2\x2\x2\x4AC\x4AF\x3\x2\x2\x2\x4AD\x4AB\x3\x2\x2\x2\x4AD\x4AE"+
		"\x3\x2\x2\x2\x4AEg\x3\x2\x2\x2\x4AF\x4AD\x3\x2\x2\x2\x4B0\x4B6\x5\x36"+
		"\x1C\x2\x4B1\x4B2\x5\x6\x4\x2\x4B2\x4B3\a\x88\x2\x2\x4B3\x4B4\x5\xDEp"+
		"\x2\x4B4\x4B6\x3\x2\x2\x2\x4B5\x4B0\x3\x2\x2\x2\x4B5\x4B1\x3\x2\x2\x2"+
		"\x4B6i\x3\x2\x2\x2\x4B7\x4B8\a\x61\x2\x2\x4B8\x4C1\ax\x2\x2\x4B9\x4BA"+
		"\x5l\x37\x2\x4BA\x4BB\ay\x2\x2\x4BB\x4C2\x3\x2\x2\x2\x4BC\x4BD\x5\f\a"+
		"\x2\x4BD\x4BE\ay\x2\x2\x4BE\x4C2\x3\x2\x2\x2\x4BF\x4C0\ai\x2\x2\x4C0\x4C2"+
		"\ay\x2\x2\x4C1\x4B9\x3\x2\x2\x2\x4C1\x4BC\x3\x2\x2\x2\x4C1\x4BF\x3\x2"+
		"\x2\x2\x4C2k\x3\x2\x2\x2\x4C3\x4CC\x5\x6\x4\x2\x4C4\x4C6\x5n\x38\x2\x4C5"+
		"\x4C4\x3\x2\x2\x2\x4C5\x4C6\x3\x2\x2\x2\x4C6\x4CD\x3\x2\x2\x2\x4C7\x4C8"+
		"\a\x8C\x2\x2\x4C8\x4CA\x5\x6\x4\x2\x4C9\x4CB\x5n\x38\x2\x4CA\x4C9\x3\x2"+
		"\x2\x2\x4CA\x4CB\x3\x2\x2\x2\x4CB\x4CD\x3\x2\x2\x2\x4CC\x4C5\x3\x2\x2"+
		"\x2\x4CC\x4C7\x3\x2\x2\x2\x4CD\x4D5\x3\x2\x2\x2\x4CE\x4CF\az\x2\x2\x4CF"+
		"\x4D1\x5\x6\x4\x2\x4D0\x4D2\x5n\x38\x2\x4D1\x4D0\x3\x2\x2\x2\x4D1\x4D2"+
		"\x3\x2\x2\x2\x4D2\x4D4\x3\x2\x2\x2\x4D3\x4CE\x3\x2\x2\x2\x4D4\x4D7\x3"+
		"\x2\x2\x2\x4D5\x4D3\x3\x2\x2\x2\x4D5\x4D6\x3\x2\x2\x2\x4D6m\x3\x2\x2\x2"+
		"\x4D7\x4D5\x3\x2\x2\x2\x4D8\x4DA\a\x89\x2\x2\x4D9\x4DB\x5p\x39\x2\x4DA"+
		"\x4D9\x3\x2\x2\x2\x4DA\x4DB\x3\x2\x2\x2\x4DB\x4DC\x3\x2\x2\x2\x4DC\x4DD"+
		"\a\x8A\x2\x2\x4DDo\x3\x2\x2\x2\x4DE\x4E2\a{\x2\x2\x4DF\x4E1\a{\x2\x2\x4E0"+
		"\x4DF\x3\x2\x2\x2\x4E1\x4E4\x3\x2\x2\x2\x4E2\x4E0\x3\x2\x2\x2\x4E2\x4E3"+
		"\x3\x2\x2\x2\x4E3q\x3\x2\x2\x2\x4E4\x4E2\x3\x2\x2\x2\x4E5\x4E6\a\x19\x2"+
		"\x2\x4E6\x4E7\ax\x2\x2\x4E7\x4E8\x5\xDEp\x2\x4E8\x4E9\ay\x2\x2\x4E9s\x3"+
		"\x2\x2\x2\x4EA\x4EB\a\x64\x2\x2\x4EB\x4EC\ax\x2\x2\x4EC\x4ED\x5\xDEp\x2"+
		"\x4ED\x4EE\ay\x2\x2\x4EEu\x3\x2\x2\x2\x4EF\x4F0\a\x1E\x2\x2\x4F0\x4F1"+
		"\ax\x2\x2\x4F1\x4F2\x5\f\a\x2\x4F2\x4F3\ay\x2\x2\x4F3w\x3\x2\x2\x2\x4F4"+
		"\x503\x5\x82\x42\x2\x4F5\x503\x5^\x30\x2\x4F6\x503\x5\x36\x1C\x2\x4F7"+
		"\x4F8\a~\x2\x2\x4F8\x503\x5x=\x2\x4F9\x4FA\a\x7F\x2\x2\x4FA\x503\x5x="+
		"\x2\x4FB\x4FC\a\x86\x2\x2\x4FC\x503\x5x=\x2\x4FD\x4FE\a\x87\x2\x2\x4FE"+
		"\x503\x5x=\x2\x4FF\x503\x5~@\x2\x500\x503\x5\x80\x41\x2\x501\x503\x5\x2A2"+
		"\x152\x2\x502\x4F4\x3\x2\x2\x2\x502\x4F5\x3\x2\x2\x2\x502\x4F6\x3\x2\x2"+
		"\x2\x502\x4F7\x3\x2\x2\x2\x502\x4F9\x3\x2\x2\x2\x502\x4FB\x3\x2\x2\x2"+
		"\x502\x4FD\x3\x2\x2\x2\x502\x4FF\x3\x2\x2\x2\x502\x500\x3\x2\x2\x2\x502"+
		"\x501\x3\x2\x2\x2\x503y\x3\x2\x2\x2\x504\x505\ax\x2\x2\x505\x506\x5\f"+
		"\a\x2\x506\x507\ay\x2\x2\x507\x508\x5|?\x2\x508{\x3\x2\x2\x2\x509\x557"+
		"\a\x87\x2\x2\x50A\x557\a\x86\x2\x2\x50B\x557\ax\x2\x2\x50C\x557\x5\x6"+
		"\x4\x2\x50D\x557\x5\x2F6\x17C\x2\x50E\x557\a\v\x2\x2\x50F\x557\a\x11\x2"+
		"\x2\x510\x557\a\x12\x2\x2\x511\x557\a\x13\x2\x2\x512\x557\a\x15\x2\x2"+
		"\x513\x557\a\x16\x2\x2\x514\x557\a\x17\x2\x2\x515\x557\a\x18\x2\x2\x516"+
		"\x557\a\x19\x2\x2\x517\x557\a\x1A\x2\x2\x518\x557\a\x1B\x2\x2\x519\x557"+
		"\a\x1C\x2\x2\x51A\x557\a\x1D\x2\x2\x51B\x557\a\x1E\x2\x2\x51C\x557\a\x1F"+
		"\x2\x2\x51D\x557\a!\x2\x2\x51E\x557\a\"\x2\x2\x51F\x557\a$\x2\x2\x520"+
		"\x557\a%\x2\x2\x521\x557\a\'\x2\x2\x522\x557\a(\x2\x2\x523\x557\a)\x2"+
		"\x2\x524\x557\a+\x2\x2\x525\x557\a,\x2\x2\x526\x557\a-\x2\x2\x527\x557"+
		"\a.\x2\x2\x528\x557\a/\x2\x2\x529\x557\a\x32\x2\x2\x52A\x557\a\x34\x2"+
		"\x2\x52B\x557\a\x35\x2\x2\x52C\x557\a\x36\x2\x2\x52D\x557\a\x37\x2\x2"+
		"\x52E\x557\a\x38\x2\x2\x52F\x557\a\x39\x2\x2\x530\x557\a>\x2\x2\x531\x557"+
		"\a?\x2\x2\x532\x557\a@\x2\x2\x533\x557\a\x41\x2\x2\x534\x557\a\x43\x2"+
		"\x2\x535\x557\a\x45\x2\x2\x536\x557\aG\x2\x2\x537\x557\aH\x2\x2\x538\x557"+
		"\aI\x2\x2\x539\x557\aK\x2\x2\x53A\x557\aL\x2\x2\x53B\x557\aM\x2\x2\x53C"+
		"\x557\aN\x2\x2\x53D\x557\aO\x2\x2\x53E\x557\aQ\x2\x2\x53F\x557\aR\x2\x2"+
		"\x540\x557\aS\x2\x2\x541\x557\aV\x2\x2\x542\x557\aW\x2\x2\x543\x557\a"+
		"X\x2\x2\x544\x557\aY\x2\x2\x545\x557\aZ\x2\x2\x546\x557\a[\x2\x2\x547"+
		"\x557\a\\\x2\x2\x548\x557\a]\x2\x2\x549\x557\a^\x2\x2\x54A\x557\a`\x2"+
		"\x2\x54B\x557\a\x61\x2\x2\x54C\x557\a\x62\x2\x2\x54D\x557\a\x63\x2\x2"+
		"\x54E\x557\a\x64\x2\x2\x54F\x557\a\x65\x2\x2\x550\x557\a\x66\x2\x2\x551"+
		"\x557\ag\x2\x2\x552\x557\ah\x2\x2\x553\x557\ai\x2\x2\x554\x557\aj\x2\x2"+
		"\x555\x557\al\x2\x2\x556\x509\x3\x2\x2\x2\x556\x50A\x3\x2\x2\x2\x556\x50B"+
		"\x3\x2\x2\x2\x556\x50C\x3\x2\x2\x2\x556\x50D\x3\x2\x2\x2\x556\x50E\x3"+
		"\x2\x2\x2\x556\x50F\x3\x2\x2\x2\x556\x510\x3\x2\x2\x2\x556\x511\x3\x2"+
		"\x2\x2\x556\x512\x3\x2\x2\x2\x556\x513\x3\x2\x2\x2\x556\x514\x3\x2\x2"+
		"\x2\x556\x515\x3\x2\x2\x2\x556\x516\x3\x2\x2\x2\x556\x517\x3\x2\x2\x2"+
		"\x556\x518\x3\x2\x2\x2\x556\x519\x3\x2\x2\x2\x556\x51A\x3\x2\x2\x2\x556"+
		"\x51B\x3\x2\x2\x2\x556\x51C\x3\x2\x2\x2\x556\x51D\x3\x2\x2\x2\x556\x51E"+
		"\x3\x2\x2\x2\x556\x51F\x3\x2\x2\x2\x556\x520\x3\x2\x2\x2\x556\x521\x3"+
		"\x2\x2\x2\x556\x522\x3\x2\x2\x2\x556\x523\x3\x2\x2\x2\x556\x524\x3\x2"+
		"\x2\x2\x556\x525\x3\x2\x2\x2\x556\x526\x3\x2\x2\x2\x556\x527\x3\x2\x2"+
		"\x2\x556\x528\x3\x2\x2\x2\x556\x529\x3\x2\x2\x2\x556\x52A\x3\x2\x2\x2"+
		"\x556\x52B\x3\x2\x2\x2\x556\x52C\x3\x2\x2\x2\x556\x52D\x3\x2\x2\x2\x556"+
		"\x52E\x3\x2\x2\x2\x556\x52F\x3\x2\x2\x2\x556\x530\x3\x2\x2\x2\x556\x531"+
		"\x3\x2\x2\x2\x556\x532\x3\x2\x2\x2\x556\x533\x3\x2\x2\x2\x556\x534\x3"+
		"\x2\x2\x2\x556\x535\x3\x2\x2\x2\x556\x536\x3\x2\x2\x2\x556\x537\x3\x2"+
		"\x2\x2\x556\x538\x3\x2\x2\x2\x556\x539\x3\x2\x2\x2\x556\x53A\x3\x2\x2"+
		"\x2\x556\x53B\x3\x2\x2\x2\x556\x53C\x3\x2\x2\x2\x556\x53D\x3\x2\x2\x2"+
		"\x556\x53E\x3\x2\x2\x2\x556\x53F\x3\x2\x2\x2\x556\x540\x3\x2\x2\x2\x556"+
		"\x541\x3\x2\x2\x2\x556\x542\x3\x2\x2\x2\x556\x543\x3\x2\x2\x2\x556\x544"+
		"\x3\x2\x2\x2\x556\x545\x3\x2\x2\x2\x556\x546\x3\x2\x2\x2\x556\x547\x3"+
		"\x2\x2\x2\x556\x548\x3\x2\x2\x2\x556\x549\x3\x2\x2\x2\x556\x54A\x3\x2"+
		"\x2\x2\x556\x54B\x3\x2\x2\x2\x556\x54C\x3\x2\x2\x2\x556\x54D\x3\x2\x2"+
		"\x2\x556\x54E\x3\x2\x2\x2\x556\x54F\x3\x2\x2\x2\x556\x550\x3\x2\x2\x2"+
		"\x556\x551\x3\x2\x2\x2\x556\x552\x3\x2\x2\x2\x556\x553\x3\x2\x2\x2\x556"+
		"\x554\x3\x2\x2\x2\x556\x555\x3\x2\x2\x2\x557}\x3\x2\x2\x2\x558\x559\a"+
		"\x8E\x2\x2\x559\x55A\x5x=\x2\x55A\x7F\x3\x2\x2\x2\x55B\x55C\a\x8F\x2\x2"+
		"\x55C\x55D\x5x=\x2\x55D\x81\x3\x2\x2\x2\x55E\x55F\ax\x2\x2\x55F\x560\x5"+
		"\f\a\x2\x560\x561\ay\x2\x2\x561\x562\x5x=\x2\x562\x83\x3\x2\x2\x2\x563"+
		"\x56C\x5x=\x2\x564\x565\a\x80\x2\x2\x565\x56B\x5x=\x2\x566\x567\a\x81"+
		"\x2\x2\x567\x56B\x5x=\x2\x568\x569\a\x82\x2\x2\x569\x56B\x5x=\x2\x56A"+
		"\x564\x3\x2\x2\x2\x56A\x566\x3\x2\x2\x2\x56A\x568\x3\x2\x2\x2\x56B\x56E"+
		"\x3\x2\x2\x2\x56C\x56A\x3\x2\x2\x2\x56C\x56D\x3\x2\x2\x2\x56D\x85\x3\x2"+
		"\x2\x2\x56E\x56C\x3\x2\x2\x2\x56F\x574\x5\x84\x43\x2\x570\x571\t\a\x2"+
		"\x2\x571\x573\x5\x84\x43\x2\x572\x570\x3\x2\x2\x2\x573\x576\x3\x2\x2\x2"+
		"\x574\x572\x3\x2\x2\x2\x574\x575\x3\x2\x2\x2\x575\x87\x3\x2\x2\x2\x576"+
		"\x574\x3\x2\x2\x2\x577\x57F\x5\x86\x44\x2\x578\x579\a\x9F\x2\x2\x579\x57E"+
		"\x5\x86\x44\x2\x57A\x57B\x5\x2F2\x17A\x2\x57B\x57C\x5\x86\x44\x2\x57C"+
		"\x57E\x3\x2\x2\x2\x57D\x578\x3\x2\x2\x2\x57D\x57A\x3\x2\x2\x2\x57E\x581"+
		"\x3\x2\x2\x2\x57F\x57D\x3\x2\x2\x2\x57F\x580\x3\x2\x2\x2\x580\x89\x3\x2"+
		"\x2\x2\x581\x57F\x3\x2\x2\x2\x582\x591\x5\x88\x45\x2\x583\x584\a\x89\x2"+
		"\x2\x584\x590\x5\x88\x45\x2\x585\x586\a\x8A\x2\x2\x586\x590\x5\x88\x45"+
		"\x2\x587\x588\a\x95\x2\x2\x588\x590\x5\x88\x45\x2\x589\x58A\a\x96\x2\x2"+
		"\x58A\x590\x5\x88\x45\x2\x58B\x58C\a;\x2\x2\x58C\x590\x5\x90I\x2\x58D"+
		"\x58E\a\xF\x2\x2\x58E\x590\x5\f\a\x2\x58F\x583\x3\x2\x2\x2\x58F\x585\x3"+
		"\x2\x2\x2\x58F\x587\x3\x2\x2\x2\x58F\x589\x3\x2\x2\x2\x58F\x58B\x3\x2"+
		"\x2\x2\x58F\x58D\x3\x2\x2\x2\x590\x593\x3\x2\x2\x2\x591\x58F\x3\x2\x2"+
		"\x2\x591\x592\x3\x2\x2\x2\x592\x8B\x3\x2\x2\x2\x593\x591\x3\x2\x2\x2\x594"+
		"\x595\x5\x6\x4\x2\x595\x596\a\x89\x2\x2\x596\x59B\x5\f\a\x2\x597\x598"+
		"\a{\x2\x2\x598\x59A\x5\f\a\x2\x599\x597\x3\x2\x2\x2\x59A\x59D\x3\x2\x2"+
		"\x2\x59B\x599\x3\x2\x2\x2\x59B\x59C\x3\x2\x2\x2\x59C\x59E\x3\x2\x2\x2"+
		"\x59D\x59B\x3\x2\x2\x2\x59E\x59F\a\x8A\x2\x2\x59F\x5A0\x5\x8EH\x2\x5A0"+
		"\x8D\x3\x2\x2\x2\x5A1\x5A2\t\b\x2\x2\x5A2\x8F\x3\x2\x2\x2\x5A3\x5A5\x5"+
		"\x1A\xE\x2\x5A4\x5A6\a\x8B\x2\x2\x5A5\x5A4\x3\x2\x2\x2\x5A5\x5A6\x3\x2"+
		"\x2\x2\x5A6\x91\x3\x2\x2\x2\x5A7\x5A8\t\t\x2\x2\x5A8\x93\x3\x2\x2\x2\x5A9"+
		"\x5B0\x5\x8A\x46\x2\x5AA\x5AB\a\x93\x2\x2\x5AB\x5AF\x5\x8A\x46\x2\x5AC"+
		"\x5AD\a\x94\x2\x2\x5AD\x5AF\x5\x8A\x46\x2\x5AE\x5AA\x3\x2\x2\x2\x5AE\x5AC"+
		"\x3\x2\x2\x2\x5AF\x5B2\x3\x2\x2\x2\x5B0\x5AE\x3\x2\x2\x2\x5B0\x5B1\x3"+
		"\x2\x2\x2\x5B1\x95\x3\x2\x2\x2\x5B2\x5B0\x3\x2\x2\x2\x5B3\x5B8\x5\x94"+
		"K\x2\x5B4\x5B5\a\x83\x2\x2\x5B5\x5B7\x5\x94K\x2\x5B6\x5B4\x3\x2\x2\x2"+
		"\x5B7\x5BA\x3\x2\x2\x2\x5B8\x5B6\x3\x2\x2\x2\x5B8\x5B9\x3\x2\x2\x2\x5B9"+
		"\x97\x3\x2\x2\x2\x5BA\x5B8\x3\x2\x2\x2\x5BB\x5C0\x5\x96L\x2\x5BC\x5BD"+
		"\a\x85\x2\x2\x5BD\x5BF\x5\x96L\x2\x5BE\x5BC\x3\x2\x2\x2\x5BF\x5C2\x3\x2"+
		"\x2\x2\x5C0\x5BE\x3\x2\x2\x2\x5C0\x5C1\x3\x2\x2\x2\x5C1\x99\x3\x2\x2\x2"+
		"\x5C2\x5C0\x3\x2\x2\x2\x5C3\x5C8\x5\x98M\x2\x5C4\x5C5\a\x84\x2\x2\x5C5"+
		"\x5C7\x5\x98M\x2\x5C6\x5C4\x3\x2\x2\x2\x5C7\x5CA\x3\x2\x2\x2\x5C8\x5C6"+
		"\x3\x2\x2\x2\x5C8\x5C9\x3\x2\x2\x2\x5C9\x9B\x3\x2\x2\x2\x5CA\x5C8\x3\x2"+
		"\x2\x2\x5CB\x5D0\x5\x9AN\x2\x5CC\x5CD\a\x90\x2\x2\x5CD\x5CF\x5\x9AN\x2"+
		"\x5CE\x5CC\x3\x2\x2\x2\x5CF\x5D2\x3\x2\x2\x2\x5D0\x5CE\x3\x2\x2\x2\x5D0"+
		"\x5D1\x3\x2\x2\x2\x5D1\x9D\x3\x2\x2\x2\x5D2\x5D0\x3\x2\x2\x2\x5D3\x5D8"+
		"\x5\x9CO\x2\x5D4\x5D5\a\x91\x2\x2\x5D5\x5D7\x5\x9CO\x2\x5D6\x5D4\x3\x2"+
		"\x2\x2\x5D7\x5DA\x3\x2\x2\x2\x5D8\x5D6\x3\x2\x2\x2\x5D8\x5D9\x3\x2\x2"+
		"\x2\x5D9\x9F\x3\x2\x2\x2\x5DA\x5D8\x3\x2\x2\x2\x5DB\x5DE\x5\x9EP\x2\x5DC"+
		"\x5DD\a\x8D\x2\x2\x5DD\x5DF\x5\xA0Q\x2\x5DE\x5DC\x3\x2\x2\x2\x5DE\x5DF"+
		"\x3\x2\x2\x2\x5DF\xA1\x3\x2\x2\x2\x5E0\x5E1\x5\xA6T\x2\x5E1\x5E2\x5\x2F0"+
		"\x179\x2\x5E2\x5E3\x5\xB6\\\x2\x5E3\xA3\x3\x2\x2\x2\x5E4\x5E6\a\x1F\x2"+
		"\x2\x5E5\x5E7\x5\xA8U\x2\x5E6\x5E5\x3\x2\x2\x2\x5E6\x5E7\x3\x2\x2\x2\x5E7"+
		"\x5E8\x3\x2\x2\x2\x5E8\x5E9\x5\xEAv\x2\x5E9\xA5\x3\x2\x2\x2\x5EA\x5EB"+
		"\ax\x2\x2\x5EB\x5F6\ay\x2\x2\x5EC\x5ED\ax\x2\x2\x5ED\x5EE\x5\xAAV\x2\x5EE"+
		"\x5EF\ay\x2\x2\x5EF\x5F6\x3\x2\x2\x2\x5F0\x5F1\ax\x2\x2\x5F1\x5F2\x5\xB2"+
		"Z\x2\x5F2\x5F3\ay\x2\x2\x5F3\x5F6\x3\x2\x2\x2\x5F4\x5F6\x5\xB4[\x2\x5F5"+
		"\x5EA\x3\x2\x2\x2\x5F5\x5EC\x3\x2\x2\x2\x5F5\x5F0\x3\x2\x2\x2\x5F5\x5F4"+
		"\x3\x2\x2\x2\x5F6\xA7\x3\x2\x2\x2\x5F7\x5F9\ax\x2\x2\x5F8\x5FA\x5\xAA"+
		"V\x2\x5F9\x5F8\x3\x2\x2\x2\x5F9\x5FA\x3\x2\x2\x2\x5FA\x5FB\x3\x2\x2\x2"+
		"\x5FB\x5FC\ay\x2\x2\x5FC\xA9\x3\x2\x2\x2\x5FD\x602\x5\xACW\x2\x5FE\x5FF"+
		"\a{\x2\x2\x5FF\x601\x5\xACW\x2\x600\x5FE\x3\x2\x2\x2\x601\x604\x3\x2\x2"+
		"\x2\x602\x600\x3\x2\x2\x2\x602\x603\x3\x2\x2\x2\x603\xAB\x3\x2\x2\x2\x604"+
		"\x602\x3\x2\x2\x2\x605\x607\x5\xAEX\x2\x606\x605\x3\x2\x2\x2\x606\x607"+
		"\x3\x2\x2\x2\x607\x608\x3\x2\x2\x2\x608\x609\x5\f\a\x2\x609\x60A\x5\x6"+
		"\x4\x2\x60A\xAD\x3\x2\x2\x2\x60B\x60C\t\n\x2\x2\x60C\xAF\x3\x2\x2\x2\x60D"+
		"\x60F\ax\x2\x2\x60E\x610\x5\xB2Z\x2\x60F\x60E\x3\x2\x2\x2\x60F\x610\x3"+
		"\x2\x2\x2\x610\x611\x3\x2\x2\x2\x611\x614\ay\x2\x2\x612\x614\x5\xB4[\x2"+
		"\x613\x60D\x3\x2\x2\x2\x613\x612\x3\x2\x2\x2\x614\xB1\x3\x2\x2\x2\x615"+
		"\x61A\x5\xB4[\x2\x616\x617\a{\x2\x2\x617\x619\x5\xB4[\x2\x618\x616\x3"+
		"\x2\x2\x2\x619\x61C\x3\x2\x2\x2\x61A\x618\x3\x2\x2\x2\x61A\x61B\x3\x2"+
		"\x2\x2\x61B\xB3\x3\x2\x2\x2\x61C\x61A\x3\x2\x2\x2\x61D\x61E\x5\x6\x4\x2"+
		"\x61E\xB5\x3\x2\x2\x2\x61F\x622\x5\xDEp\x2\x620\x622\x5\xEAv\x2\x621\x61F"+
		"\x3\x2\x2\x2\x621\x620\x3\x2\x2\x2\x622\xB7\x3\x2\x2\x2\x623\x624\x5\xBA"+
		"^\x2\x624\x625\x5\xBC_\x2\x625\xB9\x3\x2\x2\x2\x626\x628\x5\x2C4\x163"+
		"\x2\x627\x629\x5\f\a\x2\x628\x627\x3\x2\x2\x2\x628\x629\x3\x2\x2\x2\x629"+
		"\x62A\x3\x2\x2\x2\x62A\x62B\x5\x6\x4\x2\x62B\x62C\a\x36\x2\x2\x62C\x62D"+
		"\x5\xDEp\x2\x62D\xBB\x3\x2\x2\x2\x62E\x630\x5\xBE`\x2\x62F\x62E\x3\x2"+
		"\x2\x2\x62F\x630\x3\x2\x2\x2\x630\x631\x3\x2\x2\x2\x631\x633\x5\xD4k\x2"+
		"\x632\x634\x5\xDAn\x2\x633\x632\x3\x2\x2\x2\x633\x634\x3\x2\x2\x2\x634"+
		"\xBD\x3\x2\x2\x2\x635\x639\x5\xC0\x61\x2\x636\x638\x5\xC0\x61\x2\x637"+
		"\x636\x3\x2\x2\x2\x638\x63B\x3\x2\x2\x2\x639\x637\x3\x2\x2\x2\x639\x63A"+
		"\x3\x2\x2\x2\x63A\xBF\x3\x2\x2\x2\x63B\x639\x3\x2\x2\x2\x63C\x642\x5\xBA"+
		"^\x2\x63D\x642\x5\xC2\x62\x2\x63E\x642\x5\xC4\x63\x2\x63F\x642\x5\xCA"+
		"\x66\x2\x640\x642\x5\xCCg\x2\x641\x63C\x3\x2\x2\x2\x641\x63D\x3\x2\x2"+
		"\x2\x641\x63E\x3\x2\x2\x2\x641\x63F\x3\x2\x2\x2\x641\x640\x3\x2\x2\x2"+
		"\x642\xC1\x3\x2\x2\x2\x643\x644\x5\x2C6\x164\x2\x644\x645\x5\x6\x4\x2"+
		"\x645\x646\a\x88\x2\x2\x646\x647\x5\xDEp\x2\x647\xC3\x3\x2\x2\x2\x648"+
		"\x649\x5\x2C8\x165\x2\x649\x64A\x5\xDEp\x2\x64A\xC5\x3\x2\x2\x2\x64B\x64D"+
		"\x5\x2CA\x166\x2\x64C\x64E\x5\f\a\x2\x64D\x64C\x3\x2\x2\x2\x64D\x64E\x3"+
		"\x2\x2\x2\x64E\x64F\x3\x2\x2\x2\x64F\x650\x5\x6\x4\x2\x650\x651\a\x36"+
		"\x2\x2\x651\x652\x5\xDEp\x2\x652\x653\x5\x2CC\x167\x2\x653\x654\x5\xDE"+
		"p\x2\x654\x655\x5\x2CE\x168\x2\x655\x656\x5\xDEp\x2\x656\xC7\x3\x2\x2"+
		"\x2\x657\x659\x5\x2CA\x166\x2\x658\x65A\x5\f\a\x2\x659\x658\x3\x2\x2\x2"+
		"\x659\x65A\x3\x2\x2\x2\x65A\x65B\x3\x2\x2\x2\x65B\x65C\x5\x6\x4\x2\x65C"+
		"\x65D\a\x36\x2\x2\x65D\x65E\x5\xDEp\x2\x65E\x65F\x5\x2CC\x167\x2\x65F"+
		"\x660\x5\xDEp\x2\x660\x661\x5\x2CE\x168\x2\x661\x662\x5\xDEp\x2\x662\x663"+
		"\x5\x2D0\x169\x2\x663\x664\x5\x6\x4\x2\x664\xC9\x3\x2\x2\x2\x665\x667"+
		"\x5\x2CA\x166\x2\x666\x668\x5\f\a\x2\x667\x666\x3\x2\x2\x2\x667\x668\x3"+
		"\x2\x2\x2\x668\x669\x3\x2\x2\x2\x669\x66A\x5\x6\x4\x2\x66A\x66B\a\x36"+
		"\x2\x2\x66B\x66C\x5\xDEp\x2\x66C\x66D\x5\x2CC\x167\x2\x66D\x66E\x5\xDE"+
		"p\x2\x66E\x66F\x5\x2CE\x168\x2\x66F\x673\x5\xDEp\x2\x670\x671\x5\x2D0"+
		"\x169\x2\x671\x672\x5\x6\x4\x2\x672\x674\x3\x2\x2\x2\x673\x670\x3\x2\x2"+
		"\x2\x673\x674\x3\x2\x2\x2\x674\xCB\x3\x2\x2\x2\x675\x676\x5\x2D2\x16A"+
		"\x2\x676\x677\x5\xCEh\x2\x677\xCD\x3\x2\x2\x2\x678\x67D\x5\xD0i\x2\x679"+
		"\x67A\a{\x2\x2\x67A\x67C\x5\xD0i\x2\x67B\x679\x3\x2\x2\x2\x67C\x67F\x3"+
		"\x2\x2\x2\x67D\x67B\x3\x2\x2\x2\x67D\x67E\x3\x2\x2\x2\x67E\xCF\x3\x2\x2"+
		"\x2\x67F\x67D\x3\x2\x2\x2\x680\x682\x5\xDEp\x2\x681\x683\x5\xD2j\x2\x682"+
		"\x681\x3\x2\x2\x2\x682\x683\x3\x2\x2\x2\x683\xD1\x3\x2\x2\x2\x684\x687"+
		"\x5\x2D4\x16B\x2\x685\x687\x5\x2D6\x16C\x2\x686\x684\x3\x2\x2\x2\x686"+
		"\x685\x3\x2\x2\x2\x687\xD3\x3\x2\x2\x2\x688\x68B\x5\xD6l\x2\x689\x68B"+
		"\x5\xD8m\x2\x68A\x688\x3\x2\x2\x2\x68A\x689\x3\x2\x2\x2\x68B\xD5\x3\x2"+
		"\x2\x2\x68C\x68D\x5\x2D8\x16D\x2\x68D\x68E\x5\xDEp\x2\x68E\xD7\x3\x2\x2"+
		"\x2\x68F\x690\x5\x2DA\x16E\x2\x690\x691\x5\xDEp\x2\x691\x692\x5\x2DC\x16F"+
		"\x2\x692\x693\x5\xDEp\x2\x693\xD9\x3\x2\x2\x2\x694\x695\x5\x2D0\x169\x2"+
		"\x695\x696\x5\x6\x4\x2\x696\x697\x5\xBC_\x2\x697\xDB\x3\x2\x2\x2\x698"+
		"\x699\x5x=\x2\x699\x69A\t\v\x2\x2\x69A\x69B\x5\xDEp\x2\x69B\xDD\x3\x2"+
		"\x2\x2\x69C\x69D\bp\x1\x2\x69D\x69E\ax\x2\x2\x69E\x69F\x5\xDEp\x2\x69F"+
		"\x6A0\ay\x2\x2\x6A0\x6A5\x3\x2\x2\x2\x6A1\x6A5\x5\xE0q\x2\x6A2\x6A5\x5"+
		"\xDCo\x2\x6A3\x6A5\x5\xA2R\x2\x6A4\x69C\x3\x2\x2\x2\x6A4\x6A1\x3\x2\x2"+
		"\x2\x6A4\x6A2\x3\x2\x2\x2\x6A4\x6A3\x3\x2\x2\x2\x6A5\x6CF\x3\x2\x2\x2"+
		"\x6A6\x6A7\f\x10\x2\x2\x6A7\x6A8\t\f\x2\x2\x6A8\x6CE\x5\xDEp\x11\x6A9"+
		"\x6AA\f\xF\x2\x2\x6AA\x6AB\t\a\x2\x2\x6AB\x6CE\x5\xDEp\x10\x6AC\x6AD\f"+
		"\xE\x2\x2\x6AD\x6AE\t\r\x2\x2\x6AE\x6CE\x5\xDEp\xF\x6AF\x6B0\f\r\x2\x2"+
		"\x6B0\x6B1\t\xE\x2\x2\x6B1\x6CE\x5\xDEp\xE\x6B2\x6B3\f\f\x2\x2\x6B3\x6B4"+
		"\t\xF\x2\x2\x6B4\x6CE\x5\xDEp\r\x6B5\x6B6\f\v\x2\x2\x6B6\x6B7\a\x83\x2"+
		"\x2\x6B7\x6CE\x5\xDEp\f\x6B8\x6B9\f\n\x2\x2\x6B9\x6BA\a\x85\x2\x2\x6BA"+
		"\x6CE\x5\xDEp\v\x6BB\x6BC\f\t\x2\x2\x6BC\x6BD\a\x84\x2\x2\x6BD\x6CE\x5"+
		"\xDEp\n\x6BE\x6BF\f\b\x2\x2\x6BF\x6C0\a\x90\x2\x2\x6C0\x6CE\x5\xDEp\t"+
		"\x6C1\x6C2\f\a\x2\x2\x6C2\x6C3\a\x91\x2\x2\x6C3\x6CE\x5\xDEp\b\x6C4\x6C5"+
		"\f\x6\x2\x2\x6C5\x6C6\a\x8D\x2\x2\x6C6\x6CE\x5\xDEp\x6\x6C7\x6C8\f\x5"+
		"\x2\x2\x6C8\x6C9\a\x8B\x2\x2\x6C9\x6CA\x5\xDEp\x2\x6CA\x6CB\a|\x2\x2\x6CB"+
		"\x6CC\x5\xDEp\x5\x6CC\x6CE\x3\x2\x2\x2\x6CD\x6A6\x3\x2\x2\x2\x6CD\x6A9"+
		"\x3\x2\x2\x2\x6CD\x6AC\x3\x2\x2\x2\x6CD\x6AF\x3\x2\x2\x2\x6CD\x6B2\x3"+
		"\x2\x2\x2\x6CD\x6B5\x3\x2\x2\x2\x6CD\x6B8\x3\x2\x2\x2\x6CD\x6BB\x3\x2"+
		"\x2\x2\x6CD\x6BE\x3\x2\x2\x2\x6CD\x6C1\x3\x2\x2\x2\x6CD\x6C4\x3\x2\x2"+
		"\x2\x6CD\x6C7\x3\x2\x2\x2\x6CE\x6D1\x3\x2\x2\x2\x6CF\x6CD\x3\x2\x2\x2"+
		"\x6CF\x6D0\x3\x2\x2\x2\x6D0\xDF\x3\x2\x2\x2\x6D1\x6CF\x3\x2\x2\x2\x6D2"+
		"\x6D5\x5\xB8]\x2\x6D3\x6D5\x5x=\x2\x6D4\x6D2\x3\x2\x2\x2\x6D4\x6D3\x3"+
		"\x2\x2\x2\x6D5\xE1\x3\x2\x2\x2\x6D6\x6D7\x5\xDEp\x2\x6D7\xE3\x3\x2\x2"+
		"\x2\x6D8\x6DC\x5\xF0y\x2\x6D9\x6DC\x5\xF2z\x2\x6DA\x6DC\x5\xE6t\x2\x6DB"+
		"\x6D8\x3\x2\x2\x2\x6DB\x6D9\x3\x2\x2\x2\x6DB\x6DA\x3\x2\x2\x2\x6DC\xE5"+
		"\x3\x2\x2\x2\x6DD\x6E0\x5\xEAv\x2\x6DE\x6E0\x5\xE8u\x2\x6DF\x6DD\x3\x2"+
		"\x2\x2\x6DF\x6DE\x3\x2\x2\x2\x6E0\xE7\x3\x2\x2\x2\x6E1\x6EE\x5\xEEx\x2"+
		"\x6E2\x6EE\x5\x100\x81\x2\x6E3\x6EE\x5\x104\x83\x2\x6E4\x6EE\x5\x116\x8C"+
		"\x2\x6E5\x6EE\x5\x128\x95\x2\x6E6\x6EE\x5\x134\x9B\x2\x6E7\x6EE\x5\x140"+
		"\xA1\x2\x6E8\x6EE\x5\x142\xA2\x2\x6E9\x6EE\x5\x144\xA3\x2\x6EA\x6EE\x5"+
		"\x146\xA4\x2\x6EB\x6EE\x5\x14A\xA6\x2\x6EC\x6EE\x5\x296\x14C\x2\x6ED\x6E1"+
		"\x3\x2\x2\x2\x6ED\x6E2\x3\x2\x2\x2\x6ED\x6E3\x3\x2\x2\x2\x6ED\x6E4\x3"+
		"\x2\x2\x2\x6ED\x6E5\x3\x2\x2\x2\x6ED\x6E6\x3\x2\x2\x2\x6ED\x6E7\x3\x2"+
		"\x2\x2\x6ED\x6E8\x3\x2\x2\x2\x6ED\x6E9\x3\x2\x2\x2\x6ED\x6EA\x3\x2\x2"+
		"\x2\x6ED\x6EB\x3\x2\x2\x2\x6ED\x6EC\x3\x2\x2\x2\x6EE\xE9\x3\x2\x2\x2\x6EF"+
		"\x6F1\at\x2\x2\x6F0\x6F2\x5\xECw\x2\x6F1\x6F0\x3\x2\x2\x2\x6F1\x6F2\x3"+
		"\x2\x2\x2\x6F2\x6F3\x3\x2\x2\x2\x6F3\x6F4\au\x2\x2\x6F4\xEB\x3\x2\x2\x2"+
		"\x6F5\x6F7\x5\xE4s\x2\x6F6\x6F5\x3\x2\x2\x2\x6F7\x6F8\x3\x2\x2\x2\x6F8"+
		"\x6F6\x3\x2\x2\x2\x6F8\x6F9\x3\x2\x2\x2\x6F9\xED\x3\x2\x2\x2\x6FA\x6FB"+
		"\a}\x2\x2\x6FB\xEF\x3\x2\x2\x2\x6FC\x6FD\x5\x6\x4\x2\x6FD\x6FE\a|\x2\x2"+
		"\x6FE\x6FF\x5\xE4s\x2\x6FF\xF1\x3\x2\x2\x2\x700\x701\x5\xF4{\x2\x701\x702"+
		"\a}\x2\x2\x702\x707\x3\x2\x2\x2\x703\x704\x5\xFE\x80\x2\x704\x705\a}\x2"+
		"\x2\x705\x707\x3\x2\x2\x2\x706\x700\x3\x2\x2\x2\x706\x703\x3\x2\x2\x2"+
		"\x707\xF3\x3\x2\x2\x2\x708\x709\x5\xF6|\x2\x709\x70A\x5\xF8}\x2\x70A\xF5"+
		"\x3\x2\x2\x2\x70B\x70C\x5\f\a\x2\x70C\xF7\x3\x2\x2\x2\x70D\x712\x5\xFA"+
		"~\x2\x70E\x70F\a{\x2\x2\x70F\x711\x5\xFA~\x2\x710\x70E\x3\x2\x2\x2\x711"+
		"\x714\x3\x2\x2\x2\x712\x710\x3\x2\x2\x2\x712\x713\x3\x2\x2\x2\x713\xF9"+
		"\x3\x2\x2\x2\x714\x712\x3\x2\x2\x2\x715\x718\x5\x6\x4\x2\x716\x717\a\x88"+
		"\x2\x2\x717\x719\x5\xFC\x7F\x2\x718\x716\x3\x2\x2\x2\x718\x719\x3\x2\x2"+
		"\x2\x719\xFB\x3\x2\x2\x2\x71A\x71E\x5\xDEp\x2\x71B\x71E\x5\x220\x111\x2"+
		"\x71C\x71E\x5\x2C0\x161\x2\x71D\x71A\x3\x2\x2\x2\x71D\x71B\x3\x2\x2\x2"+
		"\x71D\x71C\x3\x2\x2\x2\x71E\xFD\x3\x2\x2\x2\x71F\x720\a\x1B\x2\x2\x720"+
		"\x721\x5\f\a\x2\x721\x722\x5\x192\xCA\x2\x722\xFF\x3\x2\x2\x2\x723\x724"+
		"\x5\x102\x82\x2\x724\x725\a}\x2\x2\x725\x101\x3\x2\x2\x2\x726\x727\x5"+
		"\xDEp\x2\x727\x103\x3\x2\x2\x2\x728\x72B\x5\x108\x85\x2\x729\x72B\x5\x10A"+
		"\x86\x2\x72A\x728\x3\x2\x2\x2\x72A\x729\x3\x2\x2\x2\x72B\x105\x3\x2\x2"+
		"\x2\x72C\x72F\x5\xEAv\x2\x72D\x72F\x5\xE8u\x2\x72E\x72C\x3\x2\x2\x2\x72E"+
		"\x72D\x3\x2\x2\x2\x72F\x107\x3\x2\x2\x2\x730\x731\a\x34\x2\x2\x731\x732"+
		"\ax\x2\x2\x732\x733\x5\xDEp\x2\x733\x734\ay\x2\x2\x734\x737\x5\x106\x84"+
		"\x2\x735\x736\a$\x2\x2\x736\x738\x5\x106\x84\x2\x737\x735\x3\x2\x2\x2"+
		"\x737\x738\x3\x2\x2\x2\x738\x109\x3\x2\x2\x2\x739\x73A\a\\\x2\x2\x73A"+
		"\x73B\ax\x2\x2\x73B\x73C\x5\xDEp\x2\x73C\x73D\ay\x2\x2\x73D\x73E\x5\x10C"+
		"\x87\x2\x73E\x10B\x3\x2\x2\x2\x73F\x741\at\x2\x2\x740\x742\x5\x10E\x88"+
		"\x2\x741\x740\x3\x2\x2\x2\x741\x742\x3\x2\x2\x2\x742\x743\x3\x2\x2\x2"+
		"\x743\x744\au\x2\x2\x744\x10D\x3\x2\x2\x2\x745\x749\x5\x110\x89\x2\x746"+
		"\x748\x5\x110\x89\x2\x747\x746\x3\x2\x2\x2\x748\x74B\x3\x2\x2\x2\x749"+
		"\x747\x3\x2\x2\x2\x749\x74A\x3\x2\x2\x2\x74A\x10F\x3\x2\x2\x2\x74B\x749"+
		"\x3\x2\x2\x2\x74C\x74D\x5\x112\x8A\x2\x74D\x74E\x5\xECw\x2\x74E\x111\x3"+
		"\x2\x2\x2\x74F\x753\x5\x114\x8B\x2\x750\x752\x5\x114\x8B\x2\x751\x750"+
		"\x3\x2\x2\x2\x752\x755\x3\x2\x2\x2\x753\x751\x3\x2\x2\x2\x753\x754\x3"+
		"\x2\x2\x2\x754\x113\x3\x2\x2\x2\x755\x753\x3\x2\x2\x2\x756\x757\a\x16"+
		"\x2\x2\x757\x758\x5\xE2r\x2\x758\x759\a\xA8\x2\x2\x759\x75D\x3\x2\x2\x2"+
		"\x75A\x75B\a\x1E\x2\x2\x75B\x75D\a|\x2\x2\x75C\x756\x3\x2\x2\x2\x75C\x75A"+
		"\x3\x2\x2\x2\x75D\x115\x3\x2\x2\x2\x75E\x763\x5\x118\x8D\x2\x75F\x763"+
		"\x5\x11A\x8E\x2\x760\x763\x5\x11C\x8F\x2\x761\x763\x5\x126\x94\x2\x762"+
		"\x75E\x3\x2\x2\x2\x762\x75F\x3\x2\x2\x2\x762\x760\x3\x2\x2\x2\x762\x761"+
		"\x3\x2\x2\x2\x763\x117\x3\x2\x2\x2\x764\x765\al\x2\x2\x765\x766\ax\x2"+
		"\x2\x766\x767\x5\xDEp\x2\x767\x768\ay\x2\x2\x768\x769\x5\xE6t\x2\x769"+
		"\x119\x3\x2\x2\x2\x76A\x76B\a!\x2\x2\x76B\x76C\x5\xE6t\x2\x76C\x76D\a"+
		"l\x2\x2\x76D\x76E\ax\x2\x2\x76E\x76F\x5\xDEp\x2\x76F\x770\ay\x2\x2\x770"+
		"\x771\a}\x2\x2\x771\x11B\x3\x2\x2\x2\x772\x773\a.\x2\x2\x773\x775\ax\x2"+
		"\x2\x774\x776\x5\x11E\x90\x2\x775\x774\x3\x2\x2\x2\x775\x776\x3\x2\x2"+
		"\x2\x776\x777\x3\x2\x2\x2\x777\x779\a}\x2\x2\x778\x77A\x5\x120\x91\x2"+
		"\x779\x778\x3\x2\x2\x2\x779\x77A\x3\x2\x2\x2\x77A\x77B\x3\x2\x2\x2\x77B"+
		"\x77D\a}\x2\x2\x77C\x77E\x5\x122\x92\x2\x77D\x77C\x3\x2\x2\x2\x77D\x77E"+
		"\x3\x2\x2\x2\x77E\x77F\x3\x2\x2\x2\x77F\x780\ay\x2\x2\x780\x781\x5\xE6"+
		"t\x2\x781\x11D\x3\x2\x2\x2\x782\x785\x5\xF4{\x2\x783\x785\x5\x124\x93"+
		"\x2\x784\x782\x3\x2\x2\x2\x784\x783\x3\x2\x2\x2\x785\x11F\x3\x2\x2\x2"+
		"\x786\x787\x5\xDEp\x2\x787\x121\x3\x2\x2\x2\x788\x789\x5\x124\x93\x2\x789"+
		"\x123\x3\x2\x2\x2\x78A\x78F\x5\x102\x82\x2\x78B\x78C\a{\x2\x2\x78C\x78E"+
		"\x5\x102\x82\x2\x78D\x78B\x3\x2\x2\x2\x78E\x791\x3\x2\x2\x2\x78F\x78D"+
		"\x3\x2\x2\x2\x78F\x790\x3\x2\x2\x2\x790\x125\x3\x2\x2\x2\x791\x78F\x3"+
		"\x2\x2\x2\x792\x793\a/\x2\x2\x793\x794\ax\x2\x2\x794\x795\x5\xF6|\x2\x795"+
		"\x796\x5\x6\x4\x2\x796\x797\a\x36\x2\x2\x797\x798\x5\xDEp\x2\x798\x799"+
		"\ay\x2\x2\x799\x79A\x5\xE6t\x2\x79A\x127\x3\x2\x2\x2\x79B\x7A1\x5\x12A"+
		"\x96\x2\x79C\x7A1\x5\x12C\x97\x2\x79D\x7A1\x5\x12E\x98\x2\x79E\x7A1\x5"+
		"\x130\x99\x2\x79F\x7A1\x5\x132\x9A\x2\x7A0\x79B\x3\x2\x2\x2\x7A0\x79C"+
		"\x3\x2\x2\x2\x7A0\x79D\x3\x2\x2\x2\x7A0\x79E\x3\x2\x2\x2\x7A0\x79F\x3"+
		"\x2\x2\x2\x7A1\x129\x3\x2\x2\x2\x7A2\x7A3\a\x13\x2\x2\x7A3\x7A4\a}\x2"+
		"\x2\x7A4\x12B\x3\x2\x2\x2\x7A5\x7A6\a\x1C\x2\x2\x7A6\x7A7\a}\x2\x2\x7A7"+
		"\x12D\x3\x2\x2\x2\x7A8\x7A9\a\x32\x2\x2\x7A9\x7AA\x5\x6\x4\x2\x7AA\x7AB"+
		"\a}\x2\x2\x7AB\x7B5\x3\x2\x2\x2\x7AC\x7AD\a\x32\x2\x2\x7AD\x7AE\a\x16"+
		"\x2\x2\x7AE\x7AF\x5\xE2r\x2\x7AF\x7B0\a}\x2\x2\x7B0\x7B5\x3\x2\x2\x2\x7B1"+
		"\x7B2\a\x32\x2\x2\x7B2\x7B3\a\x1E\x2\x2\x7B3\x7B5\a}\x2\x2\x7B4\x7A8\x3"+
		"\x2\x2\x2\x7B4\x7AC\x3\x2\x2\x2\x7B4\x7B1\x3\x2\x2\x2\x7B5\x12F\x3\x2"+
		"\x2\x2\x7B6\x7B8\aQ\x2\x2\x7B7\x7B9\x5\xDEp\x2\x7B8\x7B7\x3\x2\x2\x2\x7B8"+
		"\x7B9\x3\x2\x2\x2\x7B9\x7BA\x3\x2\x2\x2\x7BA\x7BB\a}\x2\x2\x7BB\x131\x3"+
		"\x2\x2\x2\x7BC\x7BE\a^\x2\x2\x7BD\x7BF\x5\xDEp\x2\x7BE\x7BD\x3\x2\x2\x2"+
		"\x7BE\x7BF\x3\x2\x2\x2\x7BF\x7C0\x3\x2\x2\x2\x7C0\x7C1\a}\x2\x2\x7C1\x133"+
		"\x3\x2\x2\x2\x7C2\x7C3\a`\x2\x2\x7C3\x7C5\x5\xEAv\x2\x7C4\x7C6\x5\x136"+
		"\x9C\x2\x7C5\x7C4\x3\x2\x2\x2\x7C5\x7C6\x3\x2\x2\x2\x7C6\x7C8\x3\x2\x2"+
		"\x2\x7C7\x7C9\x5\x13E\xA0\x2\x7C8\x7C7\x3\x2\x2\x2\x7C8\x7C9\x3\x2\x2"+
		"\x2\x7C9\x135\x3\x2\x2\x2\x7CA\x7CC\x5\x138\x9D\x2\x7CB\x7CD\x5\x13C\x9F"+
		"\x2\x7CC\x7CB\x3\x2\x2\x2\x7CC\x7CD\x3\x2\x2\x2\x7CD\x7D0\x3\x2\x2\x2"+
		"\x7CE\x7D0\x5\x13C\x9F\x2\x7CF\x7CA\x3\x2\x2\x2\x7CF\x7CE\x3\x2\x2\x2"+
		"\x7D0\x137\x3\x2\x2\x2\x7D1\x7D5\x5\x13A\x9E\x2\x7D2\x7D4\x5\x13A\x9E"+
		"\x2\x7D3\x7D2\x3\x2\x2\x2\x7D4\x7D7\x3\x2\x2\x2\x7D5\x7D3\x3\x2\x2\x2"+
		"\x7D5\x7D6\x3\x2\x2\x2\x7D6\x139\x3\x2\x2\x2\x7D7\x7D5\x3\x2\x2\x2\x7D8"+
		"\x7D9\a\x17\x2\x2\x7D9\x7DA\ax\x2\x2\x7DA\x7DC\x5\x1E\x10\x2\x7DB\x7DD"+
		"\x5\x6\x4\x2\x7DC\x7DB\x3\x2\x2\x2\x7DC\x7DD\x3\x2\x2\x2\x7DD\x7DE\x3"+
		"\x2\x2\x2\x7DE\x7DF\ay\x2\x2\x7DF\x7E0\x5\xEAv\x2\x7E0\x13B\x3\x2\x2\x2"+
		"\x7E1\x7E2\a\x17\x2\x2\x7E2\x7E3\x5\xEAv\x2\x7E3\x13D\x3\x2\x2\x2\x7E4"+
		"\x7E5\a+\x2\x2\x7E5\x7E6\x5\xEAv\x2\x7E6\x13F\x3\x2\x2\x2\x7E7\x7E8\a"+
		"\x19\x2\x2\x7E8\x7E9\x5\xEAv\x2\x7E9\x141\x3\x2\x2\x2\x7EA\x7EB\a\x64"+
		"\x2\x2\x7EB\x7EC\x5\xEAv\x2\x7EC\x143\x3\x2\x2\x2\x7ED\x7EE\a>\x2\x2\x7EE"+
		"\x7EF\ax\x2\x2\x7EF\x7F0\x5\xDEp\x2\x7F0\x7F1\ay\x2\x2\x7F1\x7F2\x5\xE6"+
		"t\x2\x7F2\x145\x3\x2\x2\x2\x7F3\x7F4\ag\x2\x2\x7F4\x7F5\ax\x2\x2\x7F5"+
		"\x7F6\x5\x148\xA5\x2\x7F6\x7F7\ay\x2\x2\x7F7\x7F8\x5\xE6t\x2\x7F8\x147"+
		"\x3\x2\x2\x2\x7F9\x7FC\x5\xF4{\x2\x7FA\x7FC\x5\xDEp\x2\x7FB\x7F9\x3\x2"+
		"\x2\x2\x7FB\x7FA\x3\x2\x2\x2\x7FC\x149\x3\x2\x2\x2\x7FD\x7FE\x5\x2E2\x172"+
		"\x2\x7FE\x7FF\aQ\x2\x2\x7FF\x800\x5\xDEp\x2\x800\x801\a}\x2\x2\x801\x807"+
		"\x3\x2\x2\x2\x802\x803\x5\x2E2\x172\x2\x803\x804\a\x13\x2\x2\x804\x805"+
		"\a}\x2\x2\x805\x807\x3\x2\x2\x2\x806\x7FD\x3\x2\x2\x2\x806\x802\x3\x2"+
		"\x2\x2\x807\x14B\x3\x2\x2\x2\x808\x80A\a\x4\x2\x2\x809\x808\x3\x2\x2\x2"+
		"\x809\x80A\x3\x2\x2\x2\x80A\x80C\x3\x2\x2\x2\x80B\x80D\x5\x154\xAB\x2"+
		"\x80C\x80B\x3\x2\x2\x2\x80C\x80D\x3\x2\x2\x2\x80D\x80F\x3\x2\x2\x2\x80E"+
		"\x810\x5\x158\xAD\x2\x80F\x80E\x3\x2\x2\x2\x80F\x810\x3\x2\x2\x2\x810"+
		"\x814\x3\x2\x2\x2\x811\x813\x5\x25A\x12E\x2\x812\x811\x3\x2\x2\x2\x813"+
		"\x816\x3\x2\x2\x2\x814\x812\x3\x2\x2\x2\x814\x815\x3\x2\x2\x2\x815\x818"+
		"\x3\x2\x2\x2\x816\x814\x3\x2\x2\x2\x817\x819\x5\x160\xB1\x2\x818\x817"+
		"\x3\x2\x2\x2\x818\x819\x3\x2\x2\x2\x819\x81A\x3\x2\x2\x2\x81A\x81B\a\x2"+
		"\x2\x3\x81B\x14D\x3\x2\x2\x2\x81C\x81D\a@\x2\x2\x81D\x81E\x5\x150\xA9"+
		"\x2\x81E\x820\x5\x152\xAA\x2\x81F\x821\a}\x2\x2\x820\x81F\x3\x2\x2\x2"+
		"\x820\x821\x3\x2\x2\x2\x821\x14F\x3\x2\x2\x2\x822\x827\x5\x6\x4\x2\x823"+
		"\x824\az\x2\x2\x824\x826\x5\x6\x4\x2\x825\x823\x3\x2\x2\x2\x826\x829\x3"+
		"\x2\x2\x2\x827\x825\x3\x2\x2\x2\x827\x828\x3\x2\x2\x2\x828\x151\x3\x2"+
		"\x2\x2\x829\x827\x3\x2\x2\x2\x82A\x82C\at\x2\x2\x82B\x82D\x5\x154\xAB"+
		"\x2\x82C\x82B\x3\x2\x2\x2\x82C\x82D\x3\x2\x2\x2\x82D\x82F\x3\x2\x2\x2"+
		"\x82E\x830\x5\x158\xAD\x2\x82F\x82E\x3\x2\x2\x2\x82F\x830\x3\x2\x2\x2"+
		"\x830\x832\x3\x2\x2\x2\x831\x833\x5\x160\xB1\x2\x832\x831\x3\x2\x2\x2"+
		"\x832\x833\x3\x2\x2\x2\x833\x834\x3\x2\x2\x2\x834\x835\au\x2\x2\x835\x153"+
		"\x3\x2\x2\x2\x836\x838\x5\x156\xAC\x2\x837\x836\x3\x2\x2\x2\x838\x839"+
		"\x3\x2\x2\x2\x839\x837\x3\x2\x2\x2\x839\x83A\x3\x2\x2\x2\x83A\x155\x3"+
		"\x2\x2\x2\x83B\x83C\a)\x2\x2\x83C\x83D\x5\x2E0\x171\x2\x83D\x83E\x5\x6"+
		"\x4\x2\x83E\x83F\a}\x2\x2\x83F\x157\x3\x2\x2\x2\x840\x842\x5\x15A\xAE"+
		"\x2\x841\x840\x3\x2\x2\x2\x842\x843\x3\x2\x2\x2\x843\x841\x3\x2\x2\x2"+
		"\x843\x844\x3\x2\x2\x2\x844\x159\x3\x2\x2\x2\x845\x848\x5\x15C\xAF\x2"+
		"\x846\x848\x5\x15E\xB0\x2\x847\x845\x3\x2\x2\x2\x847\x846\x3\x2\x2\x2"+
		"\x848\x15B\x3\x2\x2\x2\x849\x84A\ag\x2\x2\x84A\x84B\x5\x6\x4\x2\x84B\x84C"+
		"\a\x88\x2\x2\x84C\x84D\x5\b\x5\x2\x84D\x84E\a}\x2\x2\x84E\x15D\x3\x2\x2"+
		"\x2\x84F\x850\ag\x2\x2\x850\x851\x5\x2\x2\x2\x851\x852\a}\x2\x2\x852\x15F"+
		"\x3\x2\x2\x2\x853\x855\x5\x162\xB2\x2\x854\x853\x3\x2\x2\x2\x855\x856"+
		"\x3\x2\x2\x2\x856\x854\x3\x2\x2\x2\x856\x857\x3\x2\x2\x2\x857\x161\x3"+
		"\x2\x2\x2\x858\x85B\x5\x14E\xA8\x2\x859\x85B\x5\x164\xB3\x2\x85A\x858"+
		"\x3\x2\x2\x2\x85A\x859\x3\x2\x2\x2\x85B\x163\x3\x2\x2\x2\x85C\x85E\x5"+
		"\x260\x131\x2\x85D\x85C\x3\x2\x2\x2\x85D\x85E\x3\x2\x2\x2\x85E\x860\x3"+
		"\x2\x2\x2\x85F\x861\x5\x18A\xC6\x2\x860\x85F\x3\x2\x2\x2\x860\x861\x3"+
		"\x2\x2\x2\x861\x867\x3\x2\x2\x2\x862\x868\x5\x2FC\x17F\x2\x863\x868\x5"+
		"\x2FE\x180\x2\x864\x868\x5\x300\x181\x2\x865\x868\x5\x302\x182\x2\x866"+
		"\x868\x5\x304\x183\x2\x867\x862\x3\x2\x2\x2\x867\x863\x3\x2\x2\x2\x867"+
		"\x864\x3\x2\x2\x2\x867\x865\x3\x2\x2\x2\x867\x866\x3\x2\x2\x2\x868\x165"+
		"\x3\x2\x2\x2\x869\x86A\x5\x6\x4\x2\x86A\x86B\a\x8C\x2\x2\x86B\x86C\x5"+
		"\x6\x4\x2\x86C\x86D\x5\n\x6\x2\x86D\x167\x3\x2\x2\x2\x86E\x870\x5\x260"+
		"\x131\x2\x86F\x86E\x3\x2\x2\x2\x86F\x870\x3\x2\x2\x2\x870\x872\x3\x2\x2"+
		"\x2\x871\x873\x5\x16A\xB6\x2\x872\x871\x3\x2\x2\x2\x872\x873\x3\x2\x2"+
		"\x2\x873\x875\x3\x2\x2\x2\x874\x876\x5\x2DE\x170\x2\x875\x874\x3\x2\x2"+
		"\x2\x875\x876\x3\x2\x2\x2\x876\x877\x3\x2\x2\x2\x877\x878\a\x1A\x2\x2"+
		"\x878\x87A\x5\x6\x4\x2\x879\x87B\x5\x16E\xB8\x2\x87A\x879\x3\x2\x2\x2"+
		"\x87A\x87B\x3\x2\x2\x2\x87B\x87D\x3\x2\x2\x2\x87C\x87E\x5\x174\xBB\x2"+
		"\x87D\x87C\x3\x2\x2\x2\x87D\x87E\x3\x2\x2\x2\x87E\x880\x3\x2\x2\x2\x87F"+
		"\x881\x5\x178\xBD\x2\x880\x87F\x3\x2\x2\x2\x880\x881\x3\x2\x2\x2\x881"+
		"\x882\x3\x2\x2\x2\x882\x884\x5\x184\xC3\x2\x883\x885\a}\x2\x2\x884\x883"+
		"\x3\x2\x2\x2\x884\x885\x3\x2\x2\x2\x885\x169\x3\x2\x2\x2\x886\x88A\x5"+
		"\x16C\xB7\x2\x887\x889\x5\x16C\xB7\x2\x888\x887\x3\x2\x2\x2\x889\x88C"+
		"\x3\x2\x2\x2\x88A\x888\x3\x2\x2\x2\x88A\x88B\x3\x2\x2\x2\x88B\x16B\x3"+
		"\x2\x2\x2\x88C\x88A\x3\x2\x2\x2\x88D\x897\a\x41\x2\x2\x88E\x897\aM\x2"+
		"\x2\x88F\x897\aL\x2\x2\x890\x897\a\x39\x2\x2\x891\x897\aK\x2\x2\x892\x897"+
		"\a\v\x2\x2\x893\x897\aS\x2\x2\x894\x897\aY\x2\x2\x895\x897\x5\x27C\x13F"+
		"\x2\x896\x88D\x3\x2\x2\x2\x896\x88E\x3\x2\x2\x2\x896\x88F\x3\x2\x2\x2"+
		"\x896\x890\x3\x2\x2\x2\x896\x891\x3\x2\x2\x2\x896\x892\x3\x2\x2\x2\x896"+
		"\x893\x3\x2\x2\x2\x896\x894\x3\x2\x2\x2\x896\x895\x3\x2\x2\x2\x897\x16D"+
		"\x3\x2\x2\x2\x898\x899\a\x89\x2\x2\x899\x89A\x5\x170\xB9\x2\x89A\x89B"+
		"\a\x8A\x2\x2\x89B\x16F\x3\x2\x2\x2\x89C\x89E\x5\x260\x131\x2\x89D\x89C"+
		"\x3\x2\x2\x2\x89D\x89E\x3\x2\x2\x2\x89E\x89F\x3\x2\x2\x2\x89F\x8A7\x5"+
		"\x172\xBA\x2\x8A0\x8A2\a{\x2\x2\x8A1\x8A3\x5\x260\x131\x2\x8A2\x8A1\x3"+
		"\x2\x2\x2\x8A2\x8A3\x3\x2\x2\x2\x8A3\x8A4\x3\x2\x2\x2\x8A4\x8A6\x5\x172"+
		"\xBA\x2\x8A5\x8A0\x3\x2\x2\x2\x8A6\x8A9\x3\x2\x2\x2\x8A7\x8A5\x3\x2\x2"+
		"\x2\x8A7\x8A8\x3\x2\x2\x2\x8A8\x171\x3\x2\x2\x2\x8A9\x8A7\x3\x2\x2\x2"+
		"\x8AA\x8AB\x5\x6\x4\x2\x8AB\x173\x3\x2\x2\x2\x8AC\x8AD\a|\x2\x2\x8AD\x8B2"+
		"\x5\x1E\x10\x2\x8AE\x8AF\a{\x2\x2\x8AF\x8B1\x5 \x11\x2\x8B0\x8AE\x3\x2"+
		"\x2\x2\x8B1\x8B4\x3\x2\x2\x2\x8B2\x8B0\x3\x2\x2\x2\x8B2\x8B3\x3\x2\x2"+
		"\x2\x8B3\x175\x3\x2\x2\x2\x8B4\x8B2\x3\x2\x2\x2\x8B5\x8BA\x5 \x11\x2\x8B6"+
		"\x8B7\a{\x2\x2\x8B7\x8B9\x5 \x11\x2\x8B8\x8B6\x3\x2\x2\x2\x8B9\x8BC\x3"+
		"\x2\x2\x2\x8BA\x8B8\x3\x2\x2\x2\x8BA\x8BB\x3\x2\x2\x2\x8BB\x177\x3\x2"+
		"\x2\x2\x8BC\x8BA\x3\x2\x2\x2\x8BD\x8C1\x5\x17A\xBE\x2\x8BE\x8C0\x5\x17A"+
		"\xBE\x2\x8BF\x8BE\x3\x2\x2\x2\x8C0\x8C3\x3\x2\x2\x2\x8C1\x8BF\x3\x2\x2"+
		"\x2\x8C1\x8C2\x3\x2\x2\x2\x8C2\x179\x3\x2\x2\x2\x8C3\x8C1\x3\x2\x2\x2"+
		"\x8C4\x8C5\x5\x2C8\x165\x2\x8C5\x8C6\x5\x172\xBA\x2\x8C6\x8C7\a|\x2\x2"+
		"\x8C7\x8C8\x5\x17C\xBF\x2\x8C8\x17B\x3\x2\x2\x2\x8C9\x8D4\x5\x182\xC2"+
		"\x2\x8CA\x8CD\x5\x17E\xC0\x2\x8CB\x8CC\a{\x2\x2\x8CC\x8CE\x5\x180\xC1"+
		"\x2\x8CD\x8CB\x3\x2\x2\x2\x8CD\x8CE\x3\x2\x2\x2\x8CE\x8D1\x3\x2\x2\x2"+
		"\x8CF\x8D0\a{\x2\x2\x8D0\x8D2\x5\x182\xC2\x2\x8D1\x8CF\x3\x2\x2\x2\x8D1"+
		"\x8D2\x3\x2\x2\x2\x8D2\x8D4\x3\x2\x2\x2\x8D3\x8C9\x3\x2\x2\x2\x8D3\x8CA"+
		"\x3\x2\x2\x2\x8D4\x17D\x3\x2\x2\x2\x8D5\x8D9\x5\x1E\x10\x2\x8D6\x8D9\a"+
		"\x1A\x2\x2\x8D7\x8D9\a[\x2\x2\x8D8\x8D5\x3\x2\x2\x2\x8D8\x8D6\x3\x2\x2"+
		"\x2\x8D8\x8D7\x3\x2\x2\x2\x8D9\x17F\x3\x2\x2\x2\x8DA\x8DF\x5 \x11\x2\x8DB"+
		"\x8DC\a{\x2\x2\x8DC\x8DE\x5 \x11\x2\x8DD\x8DB\x3\x2\x2\x2\x8DE\x8E1\x3"+
		"\x2\x2\x2\x8DF\x8DD\x3\x2\x2\x2\x8DF\x8E0\x3\x2\x2\x2\x8E0\x181\x3\x2"+
		"\x2\x2\x8E1\x8DF\x3\x2\x2\x2\x8E2\x8E3\a\x41\x2\x2\x8E3\x8E4\ax\x2\x2"+
		"\x8E4\x8E5\ay\x2\x2\x8E5\x183\x3\x2\x2\x2\x8E6\x8E8\at\x2\x2\x8E7\x8E9"+
		"\x5\x186\xC4\x2\x8E8\x8E7\x3\x2\x2\x2\x8E8\x8E9\x3\x2\x2\x2\x8E9\x8EA"+
		"\x3\x2\x2\x2\x8EA\x8EB\au\x2\x2\x8EB\x185\x3\x2\x2\x2\x8EC\x8EE\x5\x188"+
		"\xC5\x2\x8ED\x8EC\x3\x2\x2\x2\x8EE\x8EF\x3\x2\x2\x2\x8EF\x8ED\x3\x2\x2"+
		"\x2\x8EF\x8F0\x3\x2\x2\x2\x8F0\x187\x3\x2\x2\x2\x8F1\x8F3\x5\x260\x131"+
		"\x2\x8F2\x8F1\x3\x2\x2\x2\x8F2\x8F3\x3\x2\x2\x2\x8F3\x8F5\x3\x2\x2\x2"+
		"\x8F4\x8F6\x5\x18A\xC6\x2\x8F5\x8F4\x3\x2\x2\x2\x8F5\x8F6\x3\x2\x2\x2"+
		"\x8F6\x8FE\x3\x2\x2\x2\x8F7\x8FF\x5\x18E\xC8\x2\x8F8\x8F9\a\x87\x2\x2"+
		"\x8F9\x8FA\x5\x6\x4\x2\x8FA\x8FB\ax\x2\x2\x8FB\x8FC\ay\x2\x2\x8FC\x8FD"+
		"\x5\x204\x103\x2\x8FD\x8FF\x3\x2\x2\x2\x8FE\x8F7\x3\x2\x2\x2\x8FE\x8F8"+
		"\x3\x2\x2\x2\x8FF\x902\x3\x2\x2\x2\x900\x902\a\x3\x2\x2\x901\x8F2\x3\x2"+
		"\x2\x2\x901\x900\x3\x2\x2\x2\x902\x189\x3\x2\x2\x2\x903\x905\x5\x18C\xC7"+
		"\x2\x904\x903\x3\x2\x2\x2\x905\x906\x3\x2\x2\x2\x906\x904\x3\x2\x2\x2"+
		"\x906\x907\x3\x2\x2\x2\x907\x18B\x3\x2\x2\x2\x908\x918\a\x41\x2\x2\x909"+
		"\x918\aM\x2\x2\x90A\x918\aL\x2\x2\x90B\x918\a\x39\x2\x2\x90C\x918\aK\x2"+
		"\x2\x90D\x918\aN\x2\x2\x90E\x918\aj\x2\x2\x90F\x918\ah\x2\x2\x910\x918"+
		"\aS\x2\x2\x911\x918\aH\x2\x2\x912\x918\a\v\x2\x2\x913\x918\aY\x2\x2\x914"+
		"\x918\a\x65\x2\x2\x915\x918\a)\x2\x2\x916\x918\x5\x2DE\x170\x2\x917\x908"+
		"\x3\x2\x2\x2\x917\x909\x3\x2\x2\x2\x917\x90A\x3\x2\x2\x2\x917\x90B\x3"+
		"\x2\x2\x2\x917\x90C\x3\x2\x2\x2\x917\x90D\x3\x2\x2\x2\x917\x90E\x3\x2"+
		"\x2\x2\x917\x90F\x3\x2\x2\x2\x917\x910\x3\x2\x2\x2\x917\x911\x3\x2\x2"+
		"\x2\x917\x912\x3\x2\x2\x2\x917\x913\x3\x2\x2\x2\x917\x914\x3\x2\x2\x2"+
		"\x917\x915\x3\x2\x2\x2\x917\x916\x3\x2\x2\x2\x918\x18D\x3\x2\x2\x2\x919"+
		"\x929\x5\x30C\x187\x2\x91A\x929\x5\x190\xC9\x2\x91B\x929\x5\x306\x184"+
		"\x2\x91C\x91D\x5\x1EC\xF7\x2\x91D\x91E\x5\x1EE\xF8\x2\x91E\x929\x3\x2"+
		"\x2\x2\x91F\x929\x5\x312\x18A\x2\x920\x921\x5*\x16\x2\x921\x922\x5\x314"+
		"\x18B\x2\x922\x929\x3\x2\x2\x2\x923\x929\x5\x2FC\x17F\x2\x924\x929\x5"+
		"\x2FE\x180\x2\x925\x929\x5\x300\x181\x2\x926\x929\x5\x302\x182\x2\x927"+
		"\x929\x5\x304\x183\x2\x928\x919\x3\x2\x2\x2\x928\x91A\x3\x2\x2\x2\x928"+
		"\x91B\x3\x2\x2\x2\x928\x91C\x3\x2\x2\x2\x928\x91F\x3\x2\x2\x2\x928\x920"+
		"\x3\x2\x2\x2\x928\x923\x3\x2\x2\x2\x928\x924\x3\x2\x2\x2\x928\x925\x3"+
		"\x2\x2\x2\x928\x926\x3\x2\x2\x2\x928\x927\x3\x2\x2\x2\x929\x18F\x3\x2"+
		"\x2\x2\x92A\x934\x5\f\a\x2\x92B\x92C\x5 \x11\x2\x92C\x92D\az\x2\x2\x92D"+
		"\x92E\x5\x30E\x188\x2\x92E\x935\x3\x2\x2\x2\x92F\x935\x5\x314\x18B\x2"+
		"\x930\x935\x5\x30A\x186\x2\x931\x935\x5\x30E\x188\x2\x932\x935\x5\x31A"+
		"\x18E\x2\x933\x935\x5\x308\x185\x2\x934\x92B\x3\x2\x2\x2\x934\x92F\x3"+
		"\x2\x2\x2\x934\x930\x3\x2\x2\x2\x934\x931\x3\x2\x2\x2\x934\x932\x3\x2"+
		"\x2\x2\x934\x933\x3\x2\x2\x2\x935\x191\x3\x2\x2\x2\x936\x93B\x5\x194\xCB"+
		"\x2\x937\x938\a{\x2\x2\x938\x93A\x5\x194\xCB\x2\x939\x937\x3\x2\x2\x2"+
		"\x93A\x93D\x3\x2\x2\x2\x93B\x939\x3\x2\x2\x2\x93B\x93C\x3\x2\x2\x2\x93C"+
		"\x193\x3\x2\x2\x2\x93D\x93B\x3\x2\x2\x2\x93E\x93F\x5\x6\x4\x2\x93F\x940"+
		"\a\x88\x2\x2\x940\x941\x5\xE2r\x2\x941\x195\x3\x2\x2\x2\x942\x947\x5\x198"+
		"\xCD\x2\x943\x944\a{\x2\x2\x944\x946\x5\x198\xCD\x2\x945\x943\x3\x2\x2"+
		"\x2\x946\x949\x3\x2\x2\x2\x947\x945\x3\x2\x2\x2\x947\x948\x3\x2\x2\x2"+
		"\x948\x197\x3\x2\x2\x2\x949\x947\x3\x2\x2\x2\x94A\x950\x5\x6\x4\x2\x94B"+
		"\x94C\x5\x6\x4\x2\x94C\x94D\a\x88\x2\x2\x94D\x94E\x5\x19A\xCE\x2\x94E"+
		"\x950\x3\x2\x2\x2\x94F\x94A\x3\x2\x2\x2\x94F\x94B\x3\x2\x2\x2\x950\x199"+
		"\x3\x2\x2\x2\x951\x954\x5\xDEp\x2\x952\x954\x5\x220\x111\x2\x953\x951"+
		"\x3\x2\x2\x2\x953\x952\x3\x2\x2\x2\x954\x19B\x3\x2\x2\x2\x955\x956\x5"+
		"\x19E\xD0\x2\x956\x957\x5\x1A8\xD5\x2\x957\x19D\x3\x2\x2\x2\x958\x95A"+
		"\x5\x260\x131\x2\x959\x958\x3\x2\x2\x2\x959\x95A\x3\x2\x2\x2\x95A\x95C"+
		"\x3\x2\x2\x2\x95B\x95D\x5\x1A0\xD1\x2\x95C\x95B\x3\x2\x2\x2\x95C\x95D"+
		"\x3\x2\x2\x2\x95D\x95F\x3\x2\x2\x2\x95E\x960\x5\x2DE\x170\x2\x95F\x95E"+
		"\x3\x2\x2\x2\x95F\x960\x3\x2\x2\x2\x960\x961\x3\x2\x2\x2\x961\x962\x5"+
		"\x1A4\xD3\x2\x962\x964\x5\x1A6\xD4\x2\x963\x965\x5\x16E\xB8\x2\x964\x963"+
		"\x3\x2\x2\x2\x964\x965\x3\x2\x2\x2\x965\x966\x3\x2\x2\x2\x966\x968\ax"+
		"\x2\x2\x967\x969\x5\x1AA\xD6\x2\x968\x967\x3\x2\x2\x2\x968\x969\x3\x2"+
		"\x2\x2\x969\x96A\x3\x2\x2\x2\x96A\x96C\ay\x2\x2\x96B\x96D\x5\x178\xBD"+
		"\x2\x96C\x96B\x3\x2\x2\x2\x96C\x96D\x3\x2\x2\x2\x96D\x19F\x3\x2\x2\x2"+
		"\x96E\x970\x5\x1A2\xD2\x2\x96F\x96E\x3\x2\x2\x2\x970\x971\x3\x2\x2\x2"+
		"\x971\x96F\x3\x2\x2\x2\x971\x972\x3\x2\x2\x2\x972\x1A1\x3\x2\x2\x2\x973"+
		"\x980\a\x41\x2\x2\x974\x980\aM\x2\x2\x975\x980\aL\x2\x2\x976\x980\a\x39"+
		"\x2\x2\x977\x980\aK\x2\x2\x978\x980\aY\x2\x2\x979\x980\ah\x2\x2\x97A\x980"+
		"\aS\x2\x2\x97B\x980\aH\x2\x2\x97C\x980\a\v\x2\x2\x97D\x980\a)\x2\x2\x97E"+
		"\x980\x5\x286\x144\x2\x97F\x973\x3\x2\x2\x2\x97F\x974\x3\x2\x2\x2\x97F"+
		"\x975\x3\x2\x2\x2\x97F\x976\x3\x2\x2\x2\x97F\x977\x3\x2\x2\x2\x97F\x978"+
		"\x3\x2\x2\x2\x97F\x979\x3\x2\x2\x2\x97F\x97A\x3\x2\x2\x2\x97F\x97B\x3"+
		"\x2\x2\x2\x97F\x97C\x3\x2\x2\x2\x97F\x97D\x3\x2\x2\x2\x97F\x97E\x3\x2"+
		"\x2\x2\x980\x1A3\x3\x2\x2\x2\x981\x984\x5\f\a\x2\x982\x984\ai\x2\x2\x983"+
		"\x981\x3\x2\x2\x2\x983\x982\x3\x2\x2\x2\x984\x1A5\x3\x2\x2\x2\x985\x986"+
		"\x5 \x11\x2\x986\x1A7\x3\x2\x2\x2\x987\x98A\x5\xEAv\x2\x988\x98A\a}\x2"+
		"\x2\x989\x987\x3\x2\x2\x2\x989\x988\x3\x2\x2\x2\x98A\x1A9\x3\x2\x2\x2"+
		"\x98B\x992\x5\x1B4\xDB\x2\x98C\x98F\x5\x1AC\xD7\x2\x98D\x98E\a{\x2\x2"+
		"\x98E\x990\x5\x1B4\xDB\x2\x98F\x98D\x3\x2\x2\x2\x98F\x990\x3\x2\x2\x2"+
		"\x990\x992\x3\x2\x2\x2\x991\x98B\x3\x2\x2\x2\x991\x98C\x3\x2\x2\x2\x992"+
		"\x1AB\x3\x2\x2\x2\x993\x998\x5\x1AE\xD8\x2\x994\x995\a{\x2\x2\x995\x997"+
		"\x5\x1AE\xD8\x2\x996\x994\x3\x2\x2\x2\x997\x99A\x3\x2\x2\x2\x998\x996"+
		"\x3\x2\x2\x2\x998\x999\x3\x2\x2\x2\x999\x1AD\x3\x2\x2\x2\x99A\x998\x3"+
		"\x2\x2\x2\x99B\x99D\x5\x260\x131\x2\x99C\x99B\x3\x2\x2\x2\x99C\x99D\x3"+
		"\x2\x2\x2\x99D\x99F\x3\x2\x2\x2\x99E\x9A0\x5\x1B2\xDA\x2\x99F\x99E\x3"+
		"\x2\x2\x2\x99F\x9A0\x3\x2\x2\x2\x9A0\x9A1\x3\x2\x2\x2\x9A1\x9A2\x5\f\a"+
		"\x2\x9A2\x9A4\x5\x6\x4\x2\x9A3\x9A5\x5\x1B0\xD9\x2\x9A4\x9A3\x3\x2\x2"+
		"\x2\x9A4\x9A5\x3\x2\x2\x2\x9A5\x9A8\x3\x2\x2\x2\x9A6\x9A8\x5\x2EE\x178"+
		"\x2\x9A7\x99C\x3\x2\x2\x2\x9A7\x9A6\x3\x2\x2\x2\x9A8\x1AF\x3\x2\x2\x2"+
		"\x9A9\x9AA\a\x88\x2\x2\x9AA\x9AB\x5\xDEp\x2\x9AB\x1B1\x3\x2\x2\x2\x9AC"+
		"\x9AD\t\x10\x2\x2\x9AD\x1B3\x3\x2\x2\x2\x9AE\x9B0\x5\x260\x131\x2\x9AF"+
		"\x9AE\x3\x2\x2\x2\x9AF\x9B0\x3\x2\x2\x2\x9B0\x9B1\x3\x2\x2\x2\x9B1\x9B2"+
		"\aI\x2\x2\x9B2\x9B3\x5\x216\x10C\x2\x9B3\x9B4\x5\x6\x4\x2\x9B4\x1B5\x3"+
		"\x2\x2\x2\x9B5\x9B7\x5\x260\x131\x2\x9B6\x9B5\x3\x2\x2\x2\x9B6\x9B7\x3"+
		"\x2\x2\x2\x9B7\x9B9\x3\x2\x2\x2\x9B8\x9BA\x5\x1B8\xDD\x2\x9B9\x9B8\x3"+
		"\x2\x2\x2\x9B9\x9BA\x3\x2\x2\x2\x9BA\x9BB\x3\x2\x2\x2\x9BB\x9BC\x5\f\a"+
		"\x2\x9BC\x9BD\x5\x1A6\xD4\x2\x9BD\x9BE\at\x2\x2\x9BE\x9BF\x5\x1BC\xDF"+
		"\x2\x9BF\x9C0\au\x2\x2\x9C0\x1B7\x3\x2\x2\x2\x9C1\x9C3\x5\x1BA\xDE\x2"+
		"\x9C2\x9C1\x3\x2\x2\x2\x9C3\x9C4\x3\x2\x2\x2\x9C4\x9C2\x3\x2\x2\x2\x9C4"+
		"\x9C5\x3\x2\x2\x2\x9C5\x1B9\x3\x2\x2\x2\x9C6\x9D3\a\x41\x2\x2\x9C7\x9D3"+
		"\aM\x2\x2\x9C8\x9D3\aL\x2\x2\x9C9\x9D3\a\x39\x2\x2\x9CA\x9D3\aK\x2\x2"+
		"\x9CB\x9D3\aY\x2\x2\x9CC\x9D3\ah\x2\x2\x9CD\x9D3\aS\x2\x2\x9CE\x9D3\a"+
		"H\x2\x2\x9CF\x9D3\a\v\x2\x2\x9D0\x9D3\a)\x2\x2\x9D1\x9D3\x5\x288\x145"+
		"\x2\x9D2\x9C6\x3\x2\x2\x2\x9D2\x9C7\x3\x2\x2\x2\x9D2\x9C8\x3\x2\x2\x2"+
		"\x9D2\x9C9\x3\x2\x2\x2\x9D2\x9CA\x3\x2\x2\x2\x9D2\x9CB\x3\x2\x2\x2\x9D2"+
		"\x9CC\x3\x2\x2\x2\x9D2\x9CD\x3\x2\x2\x2\x9D2\x9CE\x3\x2\x2\x2\x9D2\x9CF"+
		"\x3\x2\x2\x2\x9D2\x9D0\x3\x2\x2\x2\x9D2\x9D1\x3\x2\x2\x2\x9D3\x1BB\x3"+
		"\x2\x2\x2\x9D4\x9D6\x5\x260\x131\x2\x9D5\x9D4\x3\x2\x2\x2\x9D5\x9D6\x3"+
		"\x2\x2\x2\x9D6\x9D8\x3\x2\x2\x2\x9D7\x9D9\x5\x1C2\xE2\x2\x9D8\x9D7\x3"+
		"\x2\x2\x2\x9D8\x9D9\x3\x2\x2\x2\x9D9\x9E4\x3\x2\x2\x2\x9DA\x9DB\x5\x2E4"+
		"\x173\x2\x9DB\x9DD\x5\x1C4\xE3\x2\x9DC\x9DE\x5\x1C0\xE1\x2\x9DD\x9DC\x3"+
		"\x2\x2\x2\x9DD\x9DE\x3\x2\x2\x2\x9DE\x9E5\x3\x2\x2\x2\x9DF\x9E0\x5\x2E6"+
		"\x174\x2\x9E0\x9E2\x5\x1C4\xE3\x2\x9E1\x9E3\x5\x1BE\xE0\x2\x9E2\x9E1\x3"+
		"\x2\x2\x2\x9E2\x9E3\x3\x2\x2\x2\x9E3\x9E5\x3\x2\x2\x2\x9E4\x9DA\x3\x2"+
		"\x2\x2\x9E4\x9DF\x3\x2\x2\x2\x9E5\x1BD\x3\x2\x2\x2\x9E6\x9E8\x5\x260\x131"+
		"\x2\x9E7\x9E6\x3\x2\x2\x2\x9E7\x9E8\x3\x2\x2\x2\x9E8\x9EA\x3\x2\x2\x2"+
		"\x9E9\x9EB\x5\x1C2\xE2\x2\x9EA\x9E9\x3\x2\x2\x2\x9EA\x9EB\x3\x2\x2\x2"+
		"\x9EB\x9EC\x3\x2\x2\x2\x9EC\x9ED\x5\x2E4\x173\x2\x9ED\x9EE\x5\x1C4\xE3"+
		"\x2\x9EE\x1BF\x3\x2\x2\x2\x9EF\x9F1\x5\x260\x131\x2\x9F0\x9EF\x3\x2\x2"+
		"\x2\x9F0\x9F1\x3\x2\x2\x2\x9F1\x9F3\x3\x2\x2\x2\x9F2\x9F4\x5\x1C2\xE2"+
		"\x2\x9F3\x9F2\x3\x2\x2\x2\x9F3\x9F4\x3\x2\x2\x2\x9F4\x9F5\x3\x2\x2\x2"+
		"\x9F5\x9F6\x5\x2E6\x174\x2\x9F6\x9F7\x5\x1C4\xE3\x2\x9F7\x1C1\x3\x2\x2"+
		"\x2\x9F8\xA00\aL\x2\x2\x9F9\xA00\a\x39\x2\x2\x9FA\xA00\aK\x2\x2\x9FB\x9FC"+
		"\aL\x2\x2\x9FC\xA00\a\x39\x2\x2\x9FD\x9FE\a\x39\x2\x2\x9FE\xA00\aL\x2"+
		"\x2\x9FF\x9F8\x3\x2\x2\x2\x9FF\x9F9\x3\x2\x2\x2\x9FF\x9FA\x3\x2\x2\x2"+
		"\x9FF\x9FB\x3\x2\x2\x2\x9FF\x9FD\x3\x2\x2\x2\xA00\x1C3\x3\x2\x2\x2\xA01"+
		"\xA04\x5\xEAv\x2\xA02\xA04\a}\x2\x2\xA03\xA01\x3\x2\x2\x2\xA03\xA02\x3"+
		"\x2\x2\x2\xA04\x1C5\x3\x2\x2\x2\xA05\xA07\x5\x260\x131\x2\xA06\xA05\x3"+
		"\x2\x2\x2\xA06\xA07\x3\x2\x2\x2\xA07\xA09\x3\x2\x2\x2\xA08\xA0A\x5\x1C8"+
		"\xE5\x2\xA09\xA08\x3\x2\x2\x2\xA09\xA0A\x3\x2\x2\x2\xA0A\xA0B\x3\x2\x2"+
		"\x2\xA0B\xA0C\a\'\x2\x2\xA0C\xA15\x5\f\a\x2\xA0D\xA0E\x5\x196\xCC\x2\xA0E"+
		"\xA0F\a}\x2\x2\xA0F\xA16\x3\x2\x2\x2\xA10\xA11\x5\x1A6\xD4\x2\xA11\xA12"+
		"\at\x2\x2\xA12\xA13\x5\x1CC\xE7\x2\xA13\xA14\au\x2\x2\xA14\xA16\x3\x2"+
		"\x2\x2\xA15\xA0D\x3\x2\x2\x2\xA15\xA10\x3\x2\x2\x2\xA16\x1C7\x3\x2\x2"+
		"\x2\xA17\xA1B\x5\x1CA\xE6\x2\xA18\xA1A\x5\x1CA\xE6\x2\xA19\xA18\x3\x2"+
		"\x2\x2\xA1A\xA1D\x3\x2\x2\x2\xA1B\xA19\x3\x2\x2\x2\xA1B\xA1C\x3\x2\x2"+
		"\x2\xA1C\x1C9\x3\x2\x2\x2\xA1D\xA1B\x3\x2\x2\x2\xA1E\xA2B\a\x41\x2\x2"+
		"\xA1F\xA2B\aM\x2\x2\xA20\xA2B\aL\x2\x2\xA21\xA2B\a\x39\x2\x2\xA22\xA2B"+
		"\aK\x2\x2\xA23\xA2B\aY\x2\x2\xA24\xA2B\ah\x2\x2\xA25\xA2B\aS\x2\x2\xA26"+
		"\xA2B\aH\x2\x2\xA27\xA2B\a\v\x2\x2\xA28\xA2B\a)\x2\x2\xA29\xA2B\x5\x28A"+
		"\x146\x2\xA2A\xA1E\x3\x2\x2\x2\xA2A\xA1F\x3\x2\x2\x2\xA2A\xA20\x3\x2\x2"+
		"\x2\xA2A\xA21\x3\x2\x2\x2\xA2A\xA22\x3\x2\x2\x2\xA2A\xA23\x3\x2\x2\x2"+
		"\xA2A\xA24\x3\x2\x2\x2\xA2A\xA25\x3\x2\x2\x2\xA2A\xA26\x3\x2\x2\x2\xA2A"+
		"\xA27\x3\x2\x2\x2\xA2A\xA28\x3\x2\x2\x2\xA2A\xA29\x3\x2\x2\x2\xA2B\x1CB"+
		"\x3\x2\x2\x2\xA2C\xA2E\x5\x260\x131\x2\xA2D\xA2C\x3\x2\x2\x2\xA2D\xA2E"+
		"\x3\x2\x2\x2\xA2E\xA37\x3\x2\x2\x2\xA2F\xA30\x5\x2E8\x175\x2\xA30\xA31"+
		"\x5\xEAv\x2\xA31\xA32\x5\x1D0\xE9\x2\xA32\xA38\x3\x2\x2\x2\xA33\xA34\x5"+
		"\x2EA\x176\x2\xA34\xA35\x5\xEAv\x2\xA35\xA36\x5\x1CE\xE8\x2\xA36\xA38"+
		"\x3\x2\x2\x2\xA37\xA2F\x3\x2\x2\x2\xA37\xA33\x3\x2\x2\x2\xA38\x1CD\x3"+
		"\x2\x2\x2\xA39\xA3B\x5\x260\x131\x2\xA3A\xA39\x3\x2\x2\x2\xA3A\xA3B\x3"+
		"\x2\x2\x2\xA3B\xA3C\x3\x2\x2\x2\xA3C\xA3D\x5\x2E8\x175\x2\xA3D\xA3E\x5"+
		"\xEAv\x2\xA3E\x1CF\x3\x2\x2\x2\xA3F\xA41\x5\x260\x131\x2\xA40\xA3F\x3"+
		"\x2\x2\x2\xA40\xA41\x3\x2\x2\x2\xA41\xA42\x3\x2\x2\x2\xA42\xA43\x5\x2EA"+
		"\x176\x2\xA43\xA44\x5\xEAv\x2\xA44\x1D1\x3\x2\x2\x2\xA45\xA47\x5\x260"+
		"\x131\x2\xA46\xA45\x3\x2\x2\x2\xA46\xA47\x3\x2\x2\x2\xA47\xA49\x3\x2\x2"+
		"\x2\xA48\xA4A\x5\x1D4\xEB\x2\xA49\xA48\x3\x2\x2\x2\xA49\xA4A\x3\x2\x2"+
		"\x2\xA4A\xA4B\x3\x2\x2\x2\xA4B\xA4C\x5\x1D8\xED\x2\xA4C\xA4D\at\x2\x2"+
		"\xA4D\xA4E\x5\x1BC\xDF\x2\xA4E\xA4F\au\x2\x2\xA4F\x1D3\x3\x2\x2\x2\xA50"+
		"\xA54\x5\x1D6\xEC\x2\xA51\xA53\x5\x1D6\xEC\x2\xA52\xA51\x3\x2\x2\x2\xA53"+
		"\xA56\x3\x2\x2\x2\xA54\xA52\x3\x2\x2\x2\xA54\xA55\x3\x2\x2\x2\xA55\x1D5"+
		"\x3\x2\x2\x2\xA56\xA54\x3\x2\x2\x2\xA57\xA63\a\x41\x2\x2\xA58\xA63\aM"+
		"\x2\x2\xA59\xA63\aL\x2\x2\xA5A\xA63\a\x39\x2\x2\xA5B\xA63\aK\x2\x2\xA5C"+
		"\xA63\ah\x2\x2\xA5D\xA63\aS\x2\x2\xA5E\xA63\aH\x2\x2\xA5F\xA63\a\v\x2"+
		"\x2\xA60\xA63\a)\x2\x2\xA61\xA63\x5\x28C\x147\x2\xA62\xA57\x3\x2\x2\x2"+
		"\xA62\xA58\x3\x2\x2\x2\xA62\xA59\x3\x2\x2\x2\xA62\xA5A\x3\x2\x2\x2\xA62"+
		"\xA5B\x3\x2\x2\x2\xA62\xA5C\x3\x2\x2\x2\xA62\xA5D\x3\x2\x2\x2\xA62\xA5E"+
		"\x3\x2\x2\x2\xA62\xA5F\x3\x2\x2\x2\xA62\xA60\x3\x2\x2\x2\xA62\xA61\x3"+
		"\x2\x2\x2\xA63\x1D7\x3\x2\x2\x2\xA64\xA68\x5\f\a\x2\xA65\xA66\x5 \x11"+
		"\x2\xA66\xA67\az\x2\x2\xA67\xA69\x3\x2\x2\x2\xA68\xA65\x3\x2\x2\x2\xA68"+
		"\xA69\x3\x2\x2\x2\xA69\xA6A\x3\x2\x2\x2\xA6A\xA6B\a]\x2\x2\xA6B\xA6C\a"+
		"v\x2\x2\xA6C\xA6D\x5\x1AA\xD6\x2\xA6D\xA6E\aw\x2\x2\xA6E\x1D9\x3\x2\x2"+
		"\x2\xA6F\xA71\x5\x260\x131\x2\xA70\xA6F\x3\x2\x2\x2\xA70\xA71\x3\x2\x2"+
		"\x2\xA71\xA72\x3\x2\x2\x2\xA72\xA73\x5\x1DC\xEF\x2\xA73\xA74\x5\x1E0\xF1"+
		"\x2\xA74\xA75\x5\x1EE\xF8\x2\xA75\x1DB\x3\x2\x2\x2\xA76\xA7A\x5\x1DE\xF0"+
		"\x2\xA77\xA79\x5\x1DE\xF0\x2\xA78\xA77\x3\x2\x2\x2\xA79\xA7C\x3\x2\x2"+
		"\x2\xA7A\xA78\x3\x2\x2\x2\xA7A\xA7B\x3\x2\x2\x2\xA7B\x1DD\x3\x2\x2\x2"+
		"\xA7C\xA7A\x3\x2\x2\x2\xA7D\xA82\aM\x2\x2\xA7E\xA82\aY\x2\x2\xA7F\xA82"+
		"\a)\x2\x2\xA80\xA82\x5\x28E\x148\x2\xA81\xA7D\x3\x2\x2\x2\xA81\xA7E\x3"+
		"\x2\x2\x2\xA81\xA7F\x3\x2\x2\x2\xA81\xA80\x3\x2\x2\x2\xA82\x1DF\x3\x2"+
		"\x2\x2\xA83\xA87\x5\x1E2\xF2\x2\xA84\xA87\x5\x1E6\xF4\x2\xA85\xA87\x5"+
		"\x1EC\xF7\x2\xA86\xA83\x3\x2\x2\x2\xA86\xA84\x3\x2\x2\x2\xA86\xA85\x3"+
		"\x2\x2\x2\xA87\x1E1\x3\x2\x2\x2\xA88\xA89\x5\f\a\x2\xA89\xA8A\a\x45\x2"+
		"\x2\xA8A\xA8B\x5\x1E4\xF3\x2\xA8B\xA8C\ax\x2\x2\xA8C\xA8D\x5\f\a\x2\xA8D"+
		"\xA8E\x5\x6\x4\x2\xA8E\xA8F\ay\x2\x2\xA8F\x1E3\x3\x2\x2\x2\xA90\xA91\t"+
		"\x11\x2\x2\xA91\x1E5\x3\x2\x2\x2\xA92\xA93\x5\f\a\x2\xA93\xA94\a\x45\x2"+
		"\x2\xA94\xA95\x5\x1E8\xF5\x2\xA95\xA96\ax\x2\x2\xA96\xA97\x5\f\a\x2\xA97"+
		"\xA98\x5\x6\x4\x2\xA98\xA99\a{\x2\x2\xA99\xA9A\x5\f\a\x2\xA9A\xA9B\x5"+
		"\x6\x4\x2\xA9B\xA9C\ay\x2\x2\xA9C\x1E7\x3\x2\x2\x2\xA9D\xAAE\a~\x2\x2"+
		"\xA9E\xAAE\a\x7F\x2\x2\xA9F\xAAE\a\x80\x2\x2\xAA0\xAAE\a\x81\x2\x2\xAA1"+
		"\xAAE\a\x82\x2\x2\xAA2\xAAE\a\x83\x2\x2\xAA3\xAAE\a\x84\x2\x2\xAA4\xAAE"+
		"\a\x85\x2\x2\xAA5\xAAE\a\x9F\x2\x2\xAA6\xAAE\x5\x2F2\x17A\x2\xAA7\xAAE"+
		"\a\x93\x2\x2\xAA8\xAAE\a\x94\x2\x2\xAA9\xAAE\a\x8A\x2\x2\xAAA\xAAE\a\x89"+
		"\x2\x2\xAAB\xAAE\a\x96\x2\x2\xAAC\xAAE\a\x95\x2\x2\xAAD\xA9D\x3\x2\x2"+
		"\x2\xAAD\xA9E\x3\x2\x2\x2\xAAD\xA9F\x3\x2\x2\x2\xAAD\xAA0\x3\x2\x2\x2"+
		"\xAAD\xAA1\x3\x2\x2\x2\xAAD\xAA2\x3\x2\x2\x2\xAAD\xAA3\x3\x2\x2\x2\xAAD"+
		"\xAA4\x3\x2\x2\x2\xAAD\xAA5\x3\x2\x2\x2\xAAD\xAA6\x3\x2\x2\x2\xAAD\xAA7"+
		"\x3\x2\x2\x2\xAAD\xAA8\x3\x2\x2\x2\xAAD\xAA9\x3\x2\x2\x2\xAAD\xAAA\x3"+
		"\x2\x2\x2\xAAD\xAAB\x3\x2\x2\x2\xAAD\xAAC\x3\x2\x2\x2\xAAE\x1E9\x3\x2"+
		"\x2\x2\xAAF\xAC6\a~\x2\x2\xAB0\xAC6\a\x7F\x2\x2\xAB1\xAC6\a\x86\x2\x2"+
		"\xAB2\xAC6\a\x87\x2\x2\xAB3\xAC6\a\x8E\x2\x2\xAB4\xAC6\a\x8F\x2\x2\xAB5"+
		"\xAC6\a_\x2\x2\xAB6\xAC6\a*\x2\x2\xAB7\xAC6\a\x80\x2\x2\xAB8\xAC6\a\x81"+
		"\x2\x2\xAB9\xAC6\a\x82\x2\x2\xABA\xAC6\a\x83\x2\x2\xABB\xAC6\a\x84\x2"+
		"\x2\xABC\xAC6\a\x85\x2\x2\xABD\xAC6\a\x9F\x2\x2\xABE\xAC6\x5\x2F2\x17A"+
		"\x2\xABF\xAC6\a\x93\x2\x2\xAC0\xAC6\a\x94\x2\x2\xAC1\xAC6\a\x8A\x2\x2"+
		"\xAC2\xAC6\a\x89\x2\x2\xAC3\xAC6\a\x96\x2\x2\xAC4\xAC6\a\x95\x2\x2\xAC5"+
		"\xAAF\x3\x2\x2\x2\xAC5\xAB0\x3\x2\x2\x2\xAC5\xAB1\x3\x2\x2\x2\xAC5\xAB2"+
		"\x3\x2\x2\x2\xAC5\xAB3\x3\x2\x2\x2\xAC5\xAB4\x3\x2\x2\x2\xAC5\xAB5\x3"+
		"\x2\x2\x2\xAC5\xAB6\x3\x2\x2\x2\xAC5\xAB7\x3\x2\x2\x2\xAC5\xAB8\x3\x2"+
		"\x2\x2\xAC5\xAB9\x3\x2\x2\x2\xAC5\xABA\x3\x2\x2\x2\xAC5\xABB\x3\x2\x2"+
		"\x2\xAC5\xABC\x3\x2\x2\x2\xAC5\xABD\x3\x2\x2\x2\xAC5\xABE\x3\x2\x2\x2"+
		"\xAC5\xABF\x3\x2\x2\x2\xAC5\xAC0\x3\x2\x2\x2\xAC5\xAC1\x3\x2\x2\x2\xAC5"+
		"\xAC2\x3\x2\x2\x2\xAC5\xAC3\x3\x2\x2\x2\xAC5\xAC4\x3\x2\x2\x2\xAC6\x1EB"+
		"\x3\x2\x2\x2\xAC7\xAC8\a\x35\x2\x2\xAC8\xAC9\a\x45\x2\x2\xAC9\xACA\x5"+
		"\f\a\x2\xACA\xACB\ax\x2\x2\xACB\xACC\x5\f\a\x2\xACC\xACD\x5\x6\x4\x2\xACD"+
		"\xACE\ay\x2\x2\xACE\xAD8\x3\x2\x2\x2\xACF\xAD0\a(\x2\x2\xAD0\xAD1\a\x45"+
		"\x2\x2\xAD1\xAD2\x5\f\a\x2\xAD2\xAD3\ax\x2\x2\xAD3\xAD4\x5\f\a\x2\xAD4"+
		"\xAD5\x5\x6\x4\x2\xAD5\xAD6\ay\x2\x2\xAD6\xAD8\x3\x2\x2\x2\xAD7\xAC7\x3"+
		"\x2\x2\x2\xAD7\xACF\x3\x2\x2\x2\xAD8\x1ED\x3\x2\x2\x2\xAD9\xADC\x5\xEA"+
		"v\x2\xADA\xADC\a}\x2\x2\xADB\xAD9\x3\x2\x2\x2\xADB\xADA\x3\x2\x2\x2\xADC"+
		"\x1EF\x3\x2\x2\x2\xADD\xADF\x5\x260\x131\x2\xADE\xADD\x3\x2\x2\x2\xADE"+
		"\xADF\x3\x2\x2\x2\xADF\xAE1\x3\x2\x2\x2\xAE0\xAE2\x5\x1F2\xFA\x2\xAE1"+
		"\xAE0\x3\x2\x2\x2\xAE1\xAE2\x3\x2\x2\x2\xAE2\xAE3\x3\x2\x2\x2\xAE3\xAE4"+
		"\x5\x1F6\xFC\x2\xAE4\xAE5\x5\x1FA\xFE\x2\xAE5\x1F1\x3\x2\x2\x2\xAE6\xAE8"+
		"\x5\x1F4\xFB\x2\xAE7\xAE6\x3\x2\x2\x2\xAE8\xAE9\x3\x2\x2\x2\xAE9\xAE7"+
		"\x3\x2\x2\x2\xAE9\xAEA\x3\x2\x2\x2\xAEA\x1F3\x3\x2\x2\x2\xAEB\xAF2\aM"+
		"\x2\x2\xAEC\xAF2\aL\x2\x2\xAED\xAF2\a\x39\x2\x2\xAEE\xAF2\aK\x2\x2\xAEF"+
		"\xAF2\a)\x2\x2\xAF0\xAF2\x5\x290\x149\x2\xAF1\xAEB\x3\x2\x2\x2\xAF1\xAEC"+
		"\x3\x2\x2\x2\xAF1\xAED\x3\x2\x2\x2\xAF1\xAEE\x3\x2\x2\x2\xAF1\xAEF\x3"+
		"\x2\x2\x2\xAF1\xAF0\x3\x2\x2\x2\xAF2\x1F5\x3\x2\x2\x2\xAF3\xAF4\x5\x6"+
		"\x4\x2\xAF4\xAF6\ax\x2\x2\xAF5\xAF7\x5\x1AA\xD6\x2\xAF6\xAF5\x3\x2\x2"+
		"\x2\xAF6\xAF7\x3\x2\x2\x2\xAF7\xAF8\x3\x2\x2\x2\xAF8\xAFA\ay\x2\x2\xAF9"+
		"\xAFB\x5\x1F8\xFD\x2\xAFA\xAF9\x3\x2\x2\x2\xAFA\xAFB\x3\x2\x2\x2\xAFB"+
		"\x1F7\x3\x2\x2\x2\xAFC\xAFD\a|\x2\x2\xAFD\xAFE\a\x11\x2\x2\xAFE\xB00\a"+
		"x\x2\x2\xAFF\xB01\x5.\x18\x2\xB00\xAFF\x3\x2\x2\x2\xB00\xB01\x3\x2\x2"+
		"\x2\xB01\xB02\x3\x2\x2\x2\xB02\xB0B\ay\x2\x2\xB03\xB04\a|\x2\x2\xB04\xB05"+
		"\a]\x2\x2\xB05\xB07\ax\x2\x2\xB06\xB08\x5.\x18\x2\xB07\xB06\x3\x2\x2\x2"+
		"\xB07\xB08\x3\x2\x2\x2\xB08\xB09\x3\x2\x2\x2\xB09\xB0B\ay\x2\x2\xB0A\xAFC"+
		"\x3\x2\x2\x2\xB0A\xB03\x3\x2\x2\x2\xB0B\x1F9\x3\x2\x2\x2\xB0C\xB0F\x5"+
		"\xEAv\x2\xB0D\xB0F\a}\x2\x2\xB0E\xB0C\x3\x2\x2\x2\xB0E\xB0D\x3\x2\x2\x2"+
		"\xB0F\x1FB\x3\x2\x2\x2\xB10\xB12\x5\x260\x131\x2\xB11\xB10\x3\x2\x2\x2"+
		"\xB11\xB12\x3\x2\x2\x2\xB12\xB13\x3\x2\x2\x2\xB13\xB14\x5\x1FE\x100\x2"+
		"\xB14\xB15\x5\x6\x4\x2\xB15\xB16\ax\x2\x2\xB16\xB17\ay\x2\x2\xB17\xB18"+
		"\x5\x200\x101\x2\xB18\x1FD\x3\x2\x2\x2\xB19\xB1A\x5\x294\x14B\x2\xB1A"+
		"\x1FF\x3\x2\x2\x2\xB1B\xB1E\x5\xEAv\x2\xB1C\xB1E\a}\x2\x2\xB1D\xB1B\x3"+
		"\x2\x2\x2\xB1D\xB1C\x3\x2\x2\x2\xB1E\x201\x3\x2\x2\x2\xB1F\xB20\x5\x292"+
		"\x14A\x2\xB20\x203\x3\x2\x2\x2\xB21\xB24\x5\xEAv\x2\xB22\xB24\a}\x2\x2"+
		"\xB23\xB21\x3\x2\x2\x2\xB23\xB22\x3\x2\x2\x2\xB24\x205\x3\x2\x2\x2\xB25"+
		"\xB28\x5\xEAv\x2\xB26\xB28\a}\x2\x2\xB27\xB25\x3\x2\x2\x2\xB27\xB26\x3"+
		"\x2\x2\x2\xB28\x207\x3\x2\x2\x2\xB29\xB2B\x5\x260\x131\x2\xB2A\xB29\x3"+
		"\x2\x2\x2\xB2A\xB2B\x3\x2\x2\x2\xB2B\xB2D\x3\x2\x2\x2\xB2C\xB2E\x5\x20A"+
		"\x106\x2\xB2D\xB2C\x3\x2\x2\x2\xB2D\xB2E\x3\x2\x2\x2\xB2E\xB30\x3\x2\x2"+
		"\x2\xB2F\xB31\x5\x2DE\x170\x2\xB30\xB2F\x3\x2\x2\x2\xB30\xB31\x3\x2\x2"+
		"\x2\xB31\xB32\x3\x2\x2\x2\xB32\xB33\a[\x2\x2\xB33\xB35\x5\x6\x4\x2\xB34"+
		"\xB36\x5\x16E\xB8\x2\xB35\xB34\x3\x2\x2\x2\xB35\xB36\x3\x2\x2\x2\xB36"+
		"\xB38\x3\x2\x2\x2\xB37\xB39\x5\x20E\x108\x2\xB38\xB37\x3\x2\x2\x2\xB38"+
		"\xB39\x3\x2\x2\x2\xB39\xB3B\x3\x2\x2\x2\xB3A\xB3C\x5\x178\xBD\x2\xB3B"+
		"\xB3A\x3\x2\x2\x2\xB3B\xB3C\x3\x2\x2\x2\xB3C\xB3D\x3\x2\x2\x2\xB3D\xB3F"+
		"\x5\x210\x109\x2\xB3E\xB40\a}\x2\x2\xB3F\xB3E\x3\x2\x2\x2\xB3F\xB40\x3"+
		"\x2\x2\x2\xB40\x209\x3\x2\x2\x2\xB41\xB45\x5\x20C\x107\x2\xB42\xB44\x5"+
		"\x20C\x107\x2\xB43\xB42\x3\x2\x2\x2\xB44\xB47\x3\x2\x2\x2\xB45\xB43\x3"+
		"\x2\x2\x2\xB45\xB46\x3\x2\x2\x2\xB46\x20B\x3\x2\x2\x2\xB47\xB45\x3\x2"+
		"\x2\x2\xB48\xB4F\a\x41\x2\x2\xB49\xB4F\aM\x2\x2\xB4A\xB4F\aL\x2\x2\xB4B"+
		"\xB4F\a\x39\x2\x2\xB4C\xB4F\aK\x2\x2\xB4D\xB4F\x5\x27E\x140\x2\xB4E\xB48"+
		"\x3\x2\x2\x2\xB4E\xB49\x3\x2\x2\x2\xB4E\xB4A\x3\x2\x2\x2\xB4E\xB4B\x3"+
		"\x2\x2\x2\xB4E\xB4C\x3\x2\x2\x2\xB4E\xB4D\x3\x2\x2\x2\xB4F\x20D\x3\x2"+
		"\x2\x2\xB50\xB51\a|\x2\x2\xB51\xB52\x5\x176\xBC\x2\xB52\x20F\x3\x2\x2"+
		"\x2\xB53\xB55\at\x2\x2\xB54\xB56\x5\x212\x10A\x2\xB55\xB54\x3\x2\x2\x2"+
		"\xB55\xB56\x3\x2\x2\x2\xB56\xB57\x3\x2\x2\x2\xB57\xB58\au\x2\x2\xB58\x211"+
		"\x3\x2\x2\x2\xB59\xB5D\x5\x214\x10B\x2\xB5A\xB5C\x5\x214\x10B\x2\xB5B"+
		"\xB5A\x3\x2\x2\x2\xB5C\xB5F\x3\x2\x2\x2\xB5D\xB5B\x3\x2\x2\x2\xB5D\xB5E"+
		"\x3\x2\x2\x2\xB5E\x213\x3\x2\x2\x2\xB5F\xB5D\x3\x2\x2\x2\xB60\xB62\x5"+
		"\x260\x131\x2\xB61\xB60\x3\x2\x2\x2\xB61\xB62\x3\x2\x2\x2\xB62\xB64\x3"+
		"\x2\x2\x2\xB63\xB65\x5\x18A\xC6\x2\xB64\xB63\x3\x2\x2\x2\xB64\xB65\x3"+
		"\x2\x2\x2\xB65\xB6C\x3\x2\x2\x2\xB66\xB6D\x5\x18E\xC8\x2\xB67\xB68\a,"+
		"\x2\x2\xB68\xB69\x5\x2BA\x15E\x2\xB69\xB6A\x5\x2BC\x15F\x2\xB6A\xB6B\a"+
		"}\x2\x2\xB6B\xB6D\x3\x2\x2\x2\xB6C\xB66\x3\x2\x2\x2\xB6C\xB67\x3\x2\x2"+
		"\x2\xB6D\x215\x3\x2\x2\x2\xB6E\xB76\x5\xE\b\x2\xB6F\xB71\t\x5\x2\x2\xB70"+
		"\xB6F\x3\x2\x2\x2\xB71\xB74\x3\x2\x2\x2\xB72\xB70\x3\x2\x2\x2\xB72\xB73"+
		"\x3\x2\x2\x2\xB73\xB75\x3\x2\x2\x2\xB74\xB72\x3\x2\x2\x2\xB75\xB77\x5"+
		"\x21C\x10F\x2\xB76\xB72\x3\x2\x2\x2\xB77\xB78\x3\x2\x2\x2\xB78\xB76\x3"+
		"\x2\x2\x2\xB78\xB79\x3\x2\x2\x2\xB79\x217\x3\x2\x2\x2\xB7A\xB80\x5\xE"+
		"\b\x2\xB7B\xB7F\x5\x21C\x10F\x2\xB7C\xB7F\a\x8B\x2\x2\xB7D\xB7F\a\x80"+
		"\x2\x2\xB7E\xB7B\x3\x2\x2\x2\xB7E\xB7C\x3\x2\x2\x2\xB7E\xB7D\x3\x2\x2"+
		"\x2\xB7F\xB82\x3\x2\x2\x2\xB80\xB7E\x3\x2\x2\x2\xB80\xB81\x3\x2\x2\x2"+
		"\xB81\x219\x3\x2\x2\x2\xB82\xB80\x3\x2\x2\x2\xB83\xB85\x5\x21C\x10F\x2"+
		"\xB84\xB83\x3\x2\x2\x2\xB85\xB86\x3\x2\x2\x2\xB86\xB84\x3\x2\x2\x2\xB86"+
		"\xB87\x3\x2\x2\x2\xB87\x21B\x3\x2\x2\x2\xB88\xB8A\av\x2\x2\xB89\xB8B\x5"+
		"\x21E\x110\x2\xB8A\xB89\x3\x2\x2\x2\xB8A\xB8B\x3\x2\x2\x2\xB8B\xB8C\x3"+
		"\x2\x2\x2\xB8C\xB8D\aw\x2\x2\xB8D\x21D\x3\x2\x2\x2\xB8E\xB92\a{\x2\x2"+
		"\xB8F\xB91\a{\x2\x2\xB90\xB8F\x3\x2\x2\x2\xB91\xB94\x3\x2\x2\x2\xB92\xB90"+
		"\x3\x2\x2\x2\xB92\xB93\x3\x2\x2\x2\xB93\x21F\x3\x2\x2\x2\xB94\xB92\x3"+
		"\x2\x2\x2\xB95\xB96\at\x2\x2\xB96\xB9F\au\x2\x2\xB97\xB98\at\x2\x2\xB98"+
		"\xB9A\x5\x222\x112\x2\xB99\xB9B\a{\x2\x2\xB9A\xB99\x3\x2\x2\x2\xB9A\xB9B"+
		"\x3\x2\x2\x2\xB9B\xB9C\x3\x2\x2\x2\xB9C\xB9D\au\x2\x2\xB9D\xB9F\x3\x2"+
		"\x2\x2\xB9E\xB95\x3\x2\x2\x2\xB9E\xB97\x3\x2\x2\x2\xB9F\x221\x3\x2\x2"+
		"\x2\xBA0\xBA5\x5\x19A\xCE\x2\xBA1\xBA2\a{\x2\x2\xBA2\xBA4\x5\x19A\xCE"+
		"\x2\xBA3\xBA1\x3\x2\x2\x2\xBA4\xBA7\x3\x2\x2\x2\xBA5\xBA3\x3\x2\x2\x2"+
		"\xBA5\xBA6\x3\x2\x2\x2\xBA6\x223\x3\x2\x2\x2\xBA7\xBA5\x3\x2\x2\x2\xBA8"+
		"\xBAA\x5\x260\x131\x2\xBA9\xBA8\x3\x2\x2\x2\xBA9\xBAA\x3\x2\x2\x2\xBAA"+
		"\xBAC\x3\x2\x2\x2\xBAB\xBAD\x5\x226\x114\x2\xBAC\xBAB\x3\x2\x2\x2\xBAC"+
		"\xBAD\x3\x2\x2\x2\xBAD\xBAF\x3\x2\x2\x2\xBAE\xBB0\x5\x2DE\x170\x2\xBAF"+
		"\xBAE\x3\x2\x2\x2\xBAF\xBB0\x3\x2\x2\x2\xBB0\xBB1\x3\x2\x2\x2\xBB1\xBB2"+
		"\a\x38\x2\x2\xBB2\xBB4\x5\x6\x4\x2\xBB3\xBB5\x5\x22A\x116\x2\xBB4\xBB3"+
		"\x3\x2\x2\x2\xBB4\xBB5\x3\x2\x2\x2\xBB5\xBB7\x3\x2\x2\x2\xBB6\xBB8\x5"+
		"\x230\x119\x2\xBB7\xBB6\x3\x2\x2\x2\xBB7\xBB8\x3\x2\x2\x2\xBB8\xBBA\x3"+
		"\x2\x2\x2\xBB9\xBBB\x5\x178\xBD\x2\xBBA\xBB9\x3\x2\x2\x2\xBBA\xBBB\x3"+
		"\x2\x2\x2\xBBB\xBBC\x3\x2\x2\x2\xBBC\xBBE\x5\x232\x11A\x2\xBBD\xBBF\a"+
		"}\x2\x2\xBBE\xBBD\x3\x2\x2\x2\xBBE\xBBF\x3\x2\x2\x2\xBBF\x225\x3\x2\x2"+
		"\x2\xBC0\xBC4\x5\x228\x115\x2\xBC1\xBC3\x5\x228\x115\x2\xBC2\xBC1\x3\x2"+
		"\x2\x2\xBC3\xBC6\x3\x2\x2\x2\xBC4\xBC2\x3\x2\x2\x2\xBC4\xBC5\x3\x2\x2"+
		"\x2\xBC5\x227\x3\x2\x2\x2\xBC6\xBC4\x3\x2\x2\x2\xBC7\xBCE\a\x41\x2\x2"+
		"\xBC8\xBCE\aM\x2\x2\xBC9\xBCE\aL\x2\x2\xBCA\xBCE\a\x39\x2\x2\xBCB\xBCE"+
		"\aK\x2\x2\xBCC\xBCE\x5\x280\x141\x2\xBCD\xBC7\x3\x2\x2\x2\xBCD\xBC8\x3"+
		"\x2\x2\x2\xBCD\xBC9\x3\x2\x2\x2\xBCD\xBCA\x3\x2\x2\x2\xBCD\xBCB\x3\x2"+
		"\x2\x2\xBCD\xBCC\x3\x2\x2\x2\xBCE\x229\x3\x2\x2\x2\xBCF\xBD0\a\x89\x2"+
		"\x2\xBD0\xBD1\x5\x22C\x117\x2\xBD1\xBD2\a\x8A\x2\x2\xBD2\x22B\x3\x2\x2"+
		"\x2\xBD3\xBD5\x5\x260\x131\x2\xBD4\xBD3\x3\x2\x2\x2\xBD4\xBD5\x3\x2\x2"+
		"\x2\xBD5\xBD7\x3\x2\x2\x2\xBD6\xBD8\x5\x22E\x118\x2\xBD7\xBD6\x3\x2\x2"+
		"\x2\xBD7\xBD8\x3\x2\x2\x2\xBD8\xBD9\x3\x2\x2\x2\xBD9\xBE4\x5\x172\xBA"+
		"\x2\xBDA\xBDC\a{\x2\x2\xBDB\xBDD\x5\x260\x131\x2\xBDC\xBDB\x3\x2\x2\x2"+
		"\xBDC\xBDD\x3\x2\x2\x2\xBDD\xBDF\x3\x2\x2\x2\xBDE\xBE0\x5\x22E\x118\x2"+
		"\xBDF\xBDE\x3\x2\x2\x2\xBDF\xBE0\x3\x2\x2\x2\xBE0\xBE1\x3\x2\x2\x2\xBE1"+
		"\xBE3\x5\x172\xBA\x2\xBE2\xBDA\x3\x2\x2\x2\xBE3\xBE6\x3\x2\x2\x2\xBE4"+
		"\xBE2\x3\x2\x2\x2\xBE4\xBE5\x3\x2\x2\x2\xBE5\x22D\x3\x2\x2\x2\xBE6\xBE4"+
		"\x3\x2\x2\x2\xBE7\xBE8\t\x12\x2\x2\xBE8\x22F\x3\x2\x2\x2\xBE9\xBEA\a|"+
		"\x2\x2\xBEA\xBEB\x5\x176\xBC\x2\xBEB\x231\x3\x2\x2\x2\xBEC\xBEE\at\x2"+
		"\x2\xBED\xBEF\x5\x234\x11B\x2\xBEE\xBED\x3\x2\x2\x2\xBEE\xBEF\x3\x2\x2"+
		"\x2\xBEF\xBF0\x3\x2\x2\x2\xBF0\xBF1\au\x2\x2\xBF1\x233\x3\x2\x2\x2\xBF2"+
		"\xBF4\x5\x236\x11C\x2\xBF3\xBF2\x3\x2\x2\x2\xBF4\xBF5\x3\x2\x2\x2\xBF5"+
		"\xBF3\x3\x2\x2\x2\xBF5\xBF6\x3\x2\x2\x2\xBF6\x235\x3\x2\x2\x2\xBF7\xBF9"+
		"\x5\x260\x131\x2\xBF8\xBF7\x3\x2\x2\x2\xBF8\xBF9\x3\x2\x2\x2\xBF9\xBFB"+
		"\x3\x2\x2\x2\xBFA\xBFC\a\x41\x2\x2\xBFB\xBFA\x3\x2\x2\x2\xBFB\xBFC\x3"+
		"\x2\x2\x2\xBFC\xC2F\x3\x2\x2\x2\xBFD\xC19\x5\f\a\x2\xBFE\xC00\x5\x6\x4"+
		"\x2\xBFF\xC01\x5\x16E\xB8\x2\xC00\xBFF\x3\x2\x2\x2\xC00\xC01\x3\x2\x2"+
		"\x2\xC01\xC02\x3\x2\x2\x2\xC02\xC04\ax\x2\x2\xC03\xC05\x5\x1AA\xD6\x2"+
		"\xC04\xC03\x3\x2\x2\x2\xC04\xC05\x3\x2\x2\x2\xC05\xC06\x3\x2\x2\x2\xC06"+
		"\xC08\ay\x2\x2\xC07\xC09\x5\x178\xBD\x2\xC08\xC07\x3\x2\x2\x2\xC08\xC09"+
		"\x3\x2\x2\x2\xC09\xC0A\x3\x2\x2\x2\xC0A\xC0B\a}\x2\x2\xC0B\xC1A\x3\x2"+
		"\x2\x2\xC0C\xC0D\x5\x6\x4\x2\xC0D\xC0E\at\x2\x2\xC0E\xC0F\x5\x23C\x11F"+
		"\x2\xC0F\xC10\au\x2\x2\xC10\xC1A\x3\x2\x2\x2\xC11\xC12\a]\x2\x2\xC12\xC13"+
		"\av\x2\x2\xC13\xC14\x5\x1AA\xD6\x2\xC14\xC15\aw\x2\x2\xC15\xC16\at\x2"+
		"\x2\xC16\xC17\x5\x23C\x11F\x2\xC17\xC18\au\x2\x2\xC18\xC1A\x3\x2\x2\x2"+
		"\xC19\xBFE\x3\x2\x2\x2\xC19\xC0C\x3\x2\x2\x2\xC19\xC11\x3\x2\x2\x2\xC1A"+
		"\xC30\x3\x2\x2\x2\xC1B\xC1C\ai\x2\x2\xC1C\xC1E\x5\x6\x4\x2\xC1D\xC1F\x5"+
		"\x16E\xB8\x2\xC1E\xC1D\x3\x2\x2\x2\xC1E\xC1F\x3\x2\x2\x2\xC1F\xC20\x3"+
		"\x2\x2\x2\xC20\xC22\ax\x2\x2\xC21\xC23\x5\x1AA\xD6\x2\xC22\xC21\x3\x2"+
		"\x2\x2\xC22\xC23\x3\x2\x2\x2\xC23\xC24\x3\x2\x2\x2\xC24\xC26\ay\x2\x2"+
		"\xC25\xC27\x5\x178\xBD\x2\xC26\xC25\x3\x2\x2\x2\xC26\xC27\x3\x2\x2\x2"+
		"\xC27\xC28\x3\x2\x2\x2\xC28\xC29\a}\x2\x2\xC29\xC30\x3\x2\x2\x2\xC2A\xC2B"+
		"\a\'\x2\x2\xC2B\xC2C\x5\f\a\x2\xC2C\xC2D\x5\x6\x4\x2\xC2D\xC2E\a}\x2\x2"+
		"\xC2E\xC30\x3\x2\x2\x2\xC2F\xBFD\x3\x2\x2\x2\xC2F\xC1B\x3\x2\x2\x2\xC2F"+
		"\xC2A\x3\x2\x2\x2\xC30\x237\x3\x2\x2\x2\xC31\xC33\x5\x260\x131\x2\xC32"+
		"\xC31\x3\x2\x2\x2\xC32\xC33\x3\x2\x2\x2\xC33\xC35\x3\x2\x2\x2\xC34\xC36"+
		"\a\x41\x2\x2\xC35\xC34\x3\x2\x2\x2\xC35\xC36\x3\x2\x2\x2\xC36\xC37\x3"+
		"\x2\x2\x2\xC37\xC38\x5\x1A4\xD3\x2\xC38\xC3A\x5\x6\x4\x2\xC39\xC3B\x5"+
		"\x16E\xB8\x2\xC3A\xC39\x3\x2\x2\x2\xC3A\xC3B\x3\x2\x2\x2\xC3B\xC3C\x3"+
		"\x2\x2\x2\xC3C\xC3E\ax\x2\x2\xC3D\xC3F\x5\x1AA\xD6\x2\xC3E\xC3D\x3\x2"+
		"\x2\x2\xC3E\xC3F\x3\x2\x2\x2\xC3F\xC40\x3\x2\x2\x2\xC40\xC42\ay\x2\x2"+
		"\xC41\xC43\x5\x178\xBD\x2\xC42\xC41\x3\x2\x2\x2\xC42\xC43\x3\x2\x2\x2"+
		"\xC43\xC44\x3\x2\x2\x2\xC44\xC45\a}\x2\x2\xC45\x239\x3\x2\x2\x2\xC46\xC48"+
		"\x5\x260\x131\x2\xC47\xC46\x3\x2\x2\x2\xC47\xC48\x3\x2\x2\x2\xC48\xC4A"+
		"\x3\x2\x2\x2\xC49\xC4B\a\x41\x2\x2\xC4A\xC49\x3\x2\x2\x2\xC4A\xC4B\x3"+
		"\x2\x2\x2\xC4B\xC4C\x3\x2\x2\x2\xC4C\xC4D\x5\f\a\x2\xC4D\xC4E\x5\x6\x4"+
		"\x2\xC4E\xC4F\at\x2\x2\xC4F\xC50\x5\x23C\x11F\x2\xC50\xC51\au\x2\x2\xC51"+
		"\x23B\x3\x2\x2\x2\xC52\xC54\x5\x260\x131\x2\xC53\xC52\x3\x2\x2\x2\xC53"+
		"\xC54\x3\x2\x2\x2\xC54\xC69\x3\x2\x2\x2\xC55\xC56\x5\x2E4\x173\x2\xC56"+
		"\xC5D\a}\x2\x2\xC57\xC59\x5\x260\x131\x2\xC58\xC57\x3\x2\x2\x2\xC58\xC59"+
		"\x3\x2\x2\x2\xC59\xC5A\x3\x2\x2\x2\xC5A\xC5B\x5\x2E6\x174\x2\xC5B\xC5C"+
		"\a}\x2\x2\xC5C\xC5E\x3\x2\x2\x2\xC5D\xC58\x3\x2\x2\x2\xC5D\xC5E\x3\x2"+
		"\x2\x2\xC5E\xC6A\x3\x2\x2\x2\xC5F\xC60\x5\x2E6\x174\x2\xC60\xC67\a}\x2"+
		"\x2\xC61\xC63\x5\x260\x131\x2\xC62\xC61\x3\x2\x2\x2\xC62\xC63\x3\x2\x2"+
		"\x2\xC63\xC64\x3\x2\x2\x2\xC64\xC65\x5\x2E4\x173\x2\xC65\xC66\a}\x2\x2"+
		"\xC66\xC68\x3\x2\x2\x2\xC67\xC62\x3\x2\x2\x2\xC67\xC68\x3\x2\x2\x2\xC68"+
		"\xC6A\x3\x2\x2\x2\xC69\xC55\x3\x2\x2\x2\xC69\xC5F\x3\x2\x2\x2\xC6A\x23D"+
		"\x3\x2\x2\x2\xC6B\xC6D\x5\x260\x131\x2\xC6C\xC6B\x3\x2\x2\x2\xC6C\xC6D"+
		"\x3\x2\x2\x2\xC6D\xC6F\x3\x2\x2\x2\xC6E\xC70\a\x41\x2\x2\xC6F\xC6E\x3"+
		"\x2\x2\x2\xC6F\xC70\x3\x2\x2\x2\xC70\xC71\x3\x2\x2\x2\xC71\xC72\a\'\x2"+
		"\x2\xC72\xC73\x5\f\a\x2\xC73\xC74\x5\x6\x4\x2\xC74\xC75\a}\x2\x2\xC75"+
		"\x23F\x3\x2\x2\x2\xC76\xC78\x5\x260\x131\x2\xC77\xC76\x3\x2\x2\x2\xC77"+
		"\xC78\x3\x2\x2\x2\xC78\xC7A\x3\x2\x2\x2\xC79\xC7B\a\x41\x2\x2\xC7A\xC79"+
		"\x3\x2\x2\x2\xC7A\xC7B\x3\x2\x2\x2\xC7B\xC7C\x3\x2\x2\x2\xC7C\xC7D\x5"+
		"\f\a\x2\xC7D\xC7E\a]\x2\x2\xC7E\xC7F\av\x2\x2\xC7F\xC80\x5\x1AA\xD6\x2"+
		"\xC80\xC81\aw\x2\x2\xC81\xC82\at\x2\x2\xC82\xC83\x5\x23C\x11F\x2\xC83"+
		"\xC84\au\x2\x2\xC84\x241\x3\x2\x2\x2\xC85\xC87\x5\x260\x131\x2\xC86\xC85"+
		"\x3\x2\x2\x2\xC86\xC87\x3\x2\x2\x2\xC87\xC89\x3\x2\x2\x2\xC88\xC8A\x5"+
		"\x248\x125\x2\xC89\xC88\x3\x2\x2\x2\xC89\xC8A\x3\x2\x2\x2\xC8A\xC8B\x3"+
		"\x2\x2\x2\xC8B\xC8C\a%\x2\x2\xC8C\xC8E\x5\x6\x4\x2\xC8D\xC8F\x5\x244\x123"+
		"\x2\xC8E\xC8D\x3\x2\x2\x2\xC8E\xC8F\x3\x2\x2\x2\xC8F\xC90\x3\x2\x2\x2"+
		"\xC90\xC92\x5\x246\x124\x2\xC91\xC93\a}\x2\x2\xC92\xC91\x3\x2\x2\x2\xC92"+
		"\xC93\x3\x2\x2\x2\xC93\x243\x3\x2\x2\x2\xC94\xC95\a|\x2\x2\xC95\xC96\x5"+
		"\x14\v\x2\xC96\x245\x3\x2\x2\x2\xC97\xC98\at\x2\x2\xC98\xCA1\au\x2\x2"+
		"\xC99\xC9A\at\x2\x2\xC9A\xC9C\x5\x24C\x127\x2\xC9B\xC9D\a{\x2\x2\xC9C"+
		"\xC9B\x3\x2\x2\x2\xC9C\xC9D\x3\x2\x2\x2\xC9D\xC9E\x3\x2\x2\x2\xC9E\xC9F"+
		"\au\x2\x2\xC9F\xCA1\x3\x2\x2\x2\xCA0\xC97\x3\x2\x2\x2\xCA0\xC99\x3\x2"+
		"\x2\x2\xCA1\x247\x3\x2\x2\x2\xCA2\xCA4\x5\x24A\x126\x2\xCA3\xCA2\x3\x2"+
		"\x2\x2\xCA4\xCA5\x3\x2\x2\x2\xCA5\xCA3\x3\x2\x2\x2\xCA5\xCA6\x3\x2\x2"+
		"\x2\xCA6\x249\x3\x2\x2\x2\xCA7\xCA8\t\x13\x2\x2\xCA8\x24B\x3\x2\x2\x2"+
		"\xCA9\xCAE\x5\x24E\x128\x2\xCAA\xCAB\a{\x2\x2\xCAB\xCAD\x5\x24E\x128\x2"+
		"\xCAC\xCAA\x3\x2\x2\x2\xCAD\xCB0\x3\x2\x2\x2\xCAE\xCAC\x3\x2\x2\x2\xCAE"+
		"\xCAF\x3\x2\x2\x2\xCAF\x24D\x3\x2\x2\x2\xCB0\xCAE\x3\x2\x2\x2\xCB1\xCB3"+
		"\x5\x260\x131\x2\xCB2\xCB1\x3\x2\x2\x2\xCB2\xCB3\x3\x2\x2\x2\xCB3\xCB4"+
		"\x3\x2\x2\x2\xCB4\xCB7\x5\x6\x4\x2\xCB5\xCB6\a\x88\x2\x2\xCB6\xCB8\x5"+
		"\xE2r\x2\xCB7\xCB5\x3\x2\x2\x2\xCB7\xCB8\x3\x2\x2\x2\xCB8\x24F\x3\x2\x2"+
		"\x2\xCB9\xCBB\x5\x260\x131\x2\xCBA\xCB9\x3\x2\x2\x2\xCBA\xCBB\x3\x2\x2"+
		"\x2\xCBB\xCBD\x3\x2\x2\x2\xCBC\xCBE\x5\x252\x12A\x2\xCBD\xCBC\x3\x2\x2"+
		"\x2\xCBD\xCBE\x3\x2\x2\x2\xCBE\xCBF\x3\x2\x2\x2\xCBF\xCC0\a\x1F\x2\x2"+
		"\xCC0\xCC1\x5\x1A4\xD3\x2\xCC1\xCC3\x5\x6\x4\x2\xCC2\xCC4\x5\x22A\x116"+
		"\x2\xCC3\xCC2\x3\x2\x2\x2\xCC3\xCC4\x3\x2\x2\x2\xCC4\xCC5\x3\x2\x2\x2"+
		"\xCC5\xCC7\ax\x2\x2\xCC6\xCC8\x5\x1AA\xD6\x2\xCC7\xCC6\x3\x2\x2\x2\xCC7"+
		"\xCC8\x3\x2\x2\x2\xCC8\xCC9\x3\x2\x2\x2\xCC9\xCCB\ay\x2\x2\xCCA\xCCC\x5"+
		"\x178\xBD\x2\xCCB\xCCA\x3\x2\x2\x2\xCCB\xCCC\x3\x2\x2\x2\xCCC\xCCD\x3"+
		"\x2\x2\x2\xCCD\xCCE\a}\x2\x2\xCCE\x251\x3\x2\x2\x2\xCCF\xCD3\x5\x254\x12B"+
		"\x2\xCD0\xCD2\x5\x254\x12B\x2\xCD1\xCD0\x3\x2\x2\x2\xCD2\xCD5\x3\x2\x2"+
		"\x2\xCD3\xCD1\x3\x2\x2\x2\xCD3\xCD4\x3\x2\x2\x2\xCD4\x253\x3\x2\x2\x2"+
		"\xCD5\xCD3\x3\x2\x2\x2\xCD6\xCDD\a\x41\x2\x2\xCD7\xCDD\aM\x2\x2\xCD8\xCDD"+
		"\aL\x2\x2\xCD9\xCDD\a\x39\x2\x2\xCDA\xCDD\aK\x2\x2\xCDB\xCDD\x5\x282\x142"+
		"\x2\xCDC\xCD6\x3\x2\x2\x2\xCDC\xCD7\x3\x2\x2\x2\xCDC\xCD8\x3\x2\x2\x2"+
		"\xCDC\xCD9\x3\x2\x2\x2\xCDC\xCDA\x3\x2\x2\x2\xCDC\xCDB\x3\x2\x2\x2\xCDD"+
		"\x255\x3\x2\x2\x2\xCDE\xCDF\x5\x258\x12D\x2\xCDF\x257\x3\x2\x2\x2\xCE0"+
		"\xCE2\x5\x25A\x12E\x2\xCE1\xCE0\x3\x2\x2\x2\xCE2\xCE3\x3\x2\x2\x2\xCE3"+
		"\xCE1\x3\x2\x2\x2\xCE3\xCE4\x3\x2\x2\x2\xCE4\x259\x3\x2\x2\x2\xCE5\xCE6"+
		"\av\x2\x2\xCE6\xCE7\x5\x25C\x12F\x2\xCE7\xCE9\x5\x26A\x136\x2\xCE8\xCEA"+
		"\a{\x2\x2\xCE9\xCE8\x3\x2\x2\x2\xCE9\xCEA\x3\x2\x2\x2\xCEA\xCEB\x3\x2"+
		"\x2\x2\xCEB\xCEC\aw\x2\x2\xCEC\x25B\x3\x2\x2\x2\xCED\xCEE\x5\x25E\x130"+
		"\x2\xCEE\xCEF\a|\x2\x2\xCEF\x25D\x3\x2\x2\x2\xCF0\xCF3\x5\x2FA\x17E\x2"+
		"\xCF1\xCF3\x5\x6\x4\x2\xCF2\xCF0\x3\x2\x2\x2\xCF2\xCF1\x3\x2\x2\x2\xCF3"+
		"\x25F\x3\x2\x2\x2\xCF4\xCF5\x5\x262\x132\x2\xCF5\x261\x3\x2\x2\x2\xCF6"+
		"\xCF8\x5\x264\x133\x2\xCF7\xCF6\x3\x2\x2\x2\xCF8\xCF9\x3\x2\x2\x2\xCF9"+
		"\xCF7\x3\x2\x2\x2\xCF9\xCFA\x3\x2\x2\x2\xCFA\x263\x3\x2\x2\x2\xCFB\xCFD"+
		"\av\x2\x2\xCFC\xCFE\x5\x266\x134\x2\xCFD\xCFC\x3\x2\x2\x2\xCFD\xCFE\x3"+
		"\x2\x2\x2\xCFE\xCFF\x3\x2\x2\x2\xCFF\xD01\x5\x26A\x136\x2\xD00\xD02\a"+
		"{\x2\x2\xD01\xD00\x3\x2\x2\x2\xD01\xD02\x3\x2\x2\x2\xD02\xD03\x3\x2\x2"+
		"\x2\xD03\xD04\aw\x2\x2\xD04\x265\x3\x2\x2\x2\xD05\xD06\x5\x268\x135\x2"+
		"\xD06\xD07\a|\x2\x2\xD07\x267\x3\x2\x2\x2\xD08\xD0B\x5\x2FA\x17E\x2\xD09"+
		"\xD0B\x5\x6\x4\x2\xD0A\xD08\x3\x2\x2\x2\xD0A\xD09\x3\x2\x2\x2\xD0B\x269"+
		"\x3\x2\x2\x2\xD0C\xD11\x5\x26C\x137\x2\xD0D\xD0E\a{\x2\x2\xD0E\xD10\x5"+
		"\x26C\x137\x2\xD0F\xD0D\x3\x2\x2\x2\xD10\xD13\x3\x2\x2\x2\xD11\xD0F\x3"+
		"\x2\x2\x2\xD11\xD12\x3\x2\x2\x2\xD12\x26B\x3\x2\x2\x2\xD13\xD11\x3\x2"+
		"\x2\x2\xD14\xD16\x5\x26E\x138\x2\xD15\xD17\x5\x270\x139\x2\xD16\xD15\x3"+
		"\x2\x2\x2\xD16\xD17\x3\x2\x2\x2\xD17\x26D\x3\x2\x2\x2\xD18\xD19\x5\x4"+
		"\x3\x2\xD19\x26F\x3\x2\x2\x2\xD1A\xD1C\ax\x2\x2\xD1B\xD1D\x5\x272\x13A"+
		"\x2\xD1C\xD1B\x3\x2\x2\x2\xD1C\xD1D\x3\x2\x2\x2\xD1D\xD1E\x3\x2\x2\x2"+
		"\xD1E\xD1F\ay\x2\x2\xD1F\x271\x3\x2\x2\x2\xD20\xD25\x5\x274\x13B\x2\xD21"+
		"\xD22\a{\x2\x2\xD22\xD24\x5\x274\x13B\x2\xD23\xD21\x3\x2\x2\x2\xD24\xD27"+
		"\x3\x2\x2\x2\xD25\xD23\x3\x2\x2\x2\xD25\xD26\x3\x2\x2\x2\xD26\x273\x3"+
		"\x2\x2\x2\xD27\xD25\x3\x2\x2\x2\xD28\xD29\x5\x27A\x13E\x2\xD29\x275\x3"+
		"\x2\x2\x2\xD2A\xD2F\x5\x278\x13D\x2\xD2B\xD2C\a{\x2\x2\xD2C\xD2E\x5\x278"+
		"\x13D\x2\xD2D\xD2B\x3\x2\x2\x2\xD2E\xD31\x3\x2\x2\x2\xD2F\xD2D\x3\x2\x2"+
		"\x2\xD2F\xD30\x3\x2\x2\x2\xD30\x277\x3\x2\x2\x2\xD31\xD2F\x3\x2\x2\x2"+
		"\xD32\xD33\x5\x6\x4\x2\xD33\xD34\a\x88\x2\x2\xD34\xD35\x5\x27A\x13E\x2"+
		"\xD35\x279\x3\x2\x2\x2\xD36\xD37\x5\xDEp\x2\xD37\x27B\x3\x2\x2\x2\xD38"+
		"\xD39\a\x65\x2\x2\xD39\x27D\x3\x2\x2\x2\xD3A\xD3B\a\x65\x2\x2\xD3B\x27F"+
		"\x3\x2\x2\x2\xD3C\xD3D\a\x65\x2\x2\xD3D\x281\x3\x2\x2\x2\xD3E\xD3F\a\x65"+
		"\x2\x2\xD3F\x283\x3\x2\x2\x2\xD40\xD41\a\x65\x2\x2\xD41\x285\x3\x2\x2"+
		"\x2\xD42\xD43\a\x65\x2\x2\xD43\x287\x3\x2\x2\x2\xD44\xD45\a\x65\x2\x2"+
		"\xD45\x289\x3\x2\x2\x2\xD46\xD47\a\x65\x2\x2\xD47\x28B\x3\x2\x2\x2\xD48"+
		"\xD49\a\x65\x2\x2\xD49\x28D\x3\x2\x2\x2\xD4A\xD4B\a\x65\x2\x2\xD4B\x28F"+
		"\x3\x2\x2\x2\xD4C\xD4D\a\x65\x2\x2\xD4D\x291\x3\x2\x2\x2\xD4E\xD50\x5"+
		"\x260\x131\x2\xD4F\xD4E\x3\x2\x2\x2\xD4F\xD50\x3\x2\x2\x2\xD50\xD59\x3"+
		"\x2\x2\x2\xD51\xD53\a)\x2\x2\xD52\xD51\x3\x2\x2\x2\xD52\xD53\x3\x2\x2"+
		"\x2\xD53\xD55\x3\x2\x2\x2\xD54\xD56\a\x65\x2\x2\xD55\xD54\x3\x2\x2\x2"+
		"\xD55\xD56\x3\x2\x2\x2\xD56\xD5A\x3\x2\x2\x2\xD57\xD58\a\x65\x2\x2\xD58"+
		"\xD5A\a)\x2\x2\xD59\xD52\x3\x2\x2\x2\xD59\xD57\x3\x2\x2\x2\xD5A\xD5B\x3"+
		"\x2\x2\x2\xD5B\xD5C\a\x87\x2\x2\xD5C\xD5D\x5\x6\x4\x2\xD5D\xD5E\ax\x2"+
		"\x2\xD5E\xD5F\ay\x2\x2\xD5F\xD60\x5\x204\x103\x2\xD60\x293\x3\x2\x2\x2"+
		"\xD61\xD63\t\x14\x2\x2\xD62\xD61\x3\x2\x2\x2\xD62\xD63\x3\x2\x2\x2\xD63"+
		"\xD64\x3\x2\x2\x2\xD64\xD7A\aY\x2\x2\xD65\xD66\a)\x2\x2\xD66\xD67\a\x65"+
		"\x2\x2\xD67\xD7A\aY\x2\x2\xD68\xD69\a\x65\x2\x2\xD69\xD6A\a)\x2\x2\xD6A"+
		"\xD7A\aY\x2\x2\xD6B\xD6C\a)\x2\x2\xD6C\xD6D\aY\x2\x2\xD6D\xD7A\a\x65\x2"+
		"\x2\xD6E\xD6F\a\x65\x2\x2\xD6F\xD70\aY\x2\x2\xD70\xD7A\a)\x2\x2\xD71\xD72"+
		"\aY\x2\x2\xD72\xD7A\t\x14\x2\x2\xD73\xD74\aY\x2\x2\xD74\xD75\a)\x2\x2"+
		"\xD75\xD7A\a\x65\x2\x2\xD76\xD77\aY\x2\x2\xD77\xD78\a\x65\x2\x2\xD78\xD7A"+
		"\a)\x2\x2\xD79\xD62\x3\x2\x2\x2\xD79\xD65\x3\x2\x2\x2\xD79\xD68\x3\x2"+
		"\x2\x2\xD79\xD6B\x3\x2\x2\x2\xD79\xD6E\x3\x2\x2\x2\xD79\xD71\x3\x2\x2"+
		"\x2\xD79\xD73\x3\x2\x2\x2\xD79\xD76\x3\x2\x2\x2\xD7A\x295\x3\x2\x2\x2"+
		"\xD7B\xD7E\x5\x298\x14D\x2\xD7C\xD7E\x5\x2AA\x156\x2\xD7D\xD7B\x3\x2\x2"+
		"\x2\xD7D\xD7C\x3\x2\x2\x2\xD7E\x297\x3\x2\x2\x2\xD7F\xD80\a\x65\x2\x2"+
		"\xD80\xD81\x5\xEAv\x2\xD81\x299\x3\x2\x2\x2\xD82\xD83\x5\x29C\x14F\x2"+
		"\xD83\x29B\x3\x2\x2\x2\xD84\xD89\x5\x10\t\x2\xD85\xD88\x5\x21C\x10F\x2"+
		"\xD86\xD88\a\x8B\x2\x2\xD87\xD85\x3\x2\x2\x2\xD87\xD86\x3\x2\x2\x2\xD88"+
		"\xD8B\x3\x2\x2\x2\xD89\xD87\x3\x2\x2\x2\xD89\xD8A\x3\x2\x2\x2\xD8A\xD8C"+
		"\x3\x2\x2\x2\xD8B\xD89\x3\x2\x2\x2\xD8C\xD8D\a\x80\x2\x2\xD8D\xD9B\x3"+
		"\x2\x2\x2\xD8E\xD93\x5\x1E\x10\x2\xD8F\xD92\x5\x21C\x10F\x2\xD90\xD92"+
		"\a\x8B\x2\x2\xD91\xD8F\x3\x2\x2\x2\xD91\xD90\x3\x2\x2\x2\xD92\xD95\x3"+
		"\x2\x2\x2\xD93\xD91\x3\x2\x2\x2\xD93\xD94\x3\x2\x2\x2\xD94\xD96\x3\x2"+
		"\x2\x2\xD95\xD93\x3\x2\x2\x2\xD96\xD97\a\x80\x2\x2\xD97\xD9B\x3\x2\x2"+
		"\x2\xD98\xD99\ai\x2\x2\xD99\xD9B\a\x80\x2\x2\xD9A\xD84\x3\x2\x2\x2\xD9A"+
		"\xD8E\x3\x2\x2\x2\xD9A\xD98\x3\x2\x2\x2\xD9B\x29D\x3\x2\x2\x2\xD9C\xD9D"+
		"\x5\f\a\x2\xD9D\x29F\x3\x2\x2\x2\xD9E\xD9F\x5\x36\x1C\x2\xD9F\x2A1\x3"+
		"\x2\x2\x2\xDA0\xDA3\x5\x2A4\x153\x2\xDA1\xDA3\x5\x2A6\x154\x2\xDA2\xDA0"+
		"\x3\x2\x2\x2\xDA2\xDA1\x3\x2\x2\x2\xDA3\x2A3\x3\x2\x2\x2\xDA4\xDA5\a\x80"+
		"\x2\x2\xDA5\xDA6\x5x=\x2\xDA6\x2A5\x3\x2\x2\x2\xDA7\xDA8\a\x83\x2\x2\xDA8"+
		"\xDA9\x5x=\x2\xDA9\x2A7\x3\x2\x2\x2\xDAA\xDAB\aW\x2\x2\xDAB\xDAC\ax\x2"+
		"\x2\xDAC\xDAD\x5\x29E\x150\x2\xDAD\xDAE\ay\x2\x2\xDAE\x2A9\x3\x2\x2\x2"+
		"\xDAF\xDB0\a,\x2\x2\xDB0\xDB1\ax\x2\x2\xDB1\xDB2\x5\x29C\x14F\x2\xDB2"+
		"\xDB3\x5\x2AC\x157\x2\xDB3\xDB4\ay\x2\x2\xDB4\xDB5\x5\xE6t\x2\xDB5\x2AB"+
		"\x3\x2\x2\x2\xDB6\xDBB\x5\x2AE\x158\x2\xDB7\xDB8\a{\x2\x2\xDB8\xDBA\x5"+
		"\x2AE\x158\x2\xDB9\xDB7\x3\x2\x2\x2\xDBA\xDBD\x3\x2\x2\x2\xDBB\xDB9\x3"+
		"\x2\x2\x2\xDBB\xDBC\x3\x2\x2\x2\xDBC\x2AD\x3\x2\x2\x2\xDBD\xDBB\x3\x2"+
		"\x2\x2\xDBE\xDBF\x5\x6\x4\x2\xDBF\xDC0\a\x88\x2\x2\xDC0\xDC1\x5\x2B0\x159"+
		"\x2\xDC1\x2AF\x3\x2\x2\x2\xDC2\xDC3\a\x83\x2\x2\xDC3\xDC6\x5,\x17\x2\xDC4"+
		"\xDC6\x5\xDEp\x2\xDC5\xDC2\x3\x2\x2\x2\xDC5\xDC4\x3\x2\x2\x2\xDC6\x2B1"+
		"\x3\x2\x2\x2\xDC7\xDC8\x5\x2B4\x15B\x2\xDC8\x2B3\x3\x2\x2\x2\xDC9\xDCB"+
		"\x5\x260\x131\x2\xDCA\xDC9\x3\x2\x2\x2\xDCA\xDCB\x3\x2\x2\x2\xDCB\xDCD"+
		"\x3\x2\x2\x2\xDCC\xDCE\x5\x2B6\x15C\x2\xDCD\xDCC\x3\x2\x2\x2\xDCD\xDCE"+
		"\x3\x2\x2\x2\xDCE\xDCF\x3\x2\x2\x2\xDCF\xDD0\a,\x2\x2\xDD0\xDD1\x5\x2BA"+
		"\x15E\x2\xDD1\xDD2\x5\x2BC\x15F\x2\xDD2\xDD3\a}\x2\x2\xDD3\x2B5\x3\x2"+
		"\x2\x2\xDD4\xDD6\x5\x2B8\x15D\x2\xDD5\xDD4\x3\x2\x2\x2\xDD6\xDD7\x3\x2"+
		"\x2\x2\xDD7\xDD5\x3\x2\x2\x2\xDD7\xDD8\x3\x2\x2\x2\xDD8\x2B7\x3\x2\x2"+
		"\x2\xDD9\xDDA\t\x15\x2\x2\xDDA\x2B9\x3\x2\x2\x2\xDDB\xDDC\x5\f\a\x2\xDDC"+
		"\x2BB\x3\x2\x2\x2\xDDD\xDDF\x5\x2BE\x160\x2\xDDE\xDDD\x3\x2\x2\x2\xDDF"+
		"\xDE0\x3\x2\x2\x2\xDE0\xDDE\x3\x2\x2\x2\xDE0\xDE1\x3\x2\x2\x2\xDE1\x2BD"+
		"\x3\x2\x2\x2\xDE2\xDE3\x5\x6\x4\x2\xDE3\xDE4\av\x2\x2\xDE4\xDE5\x5\xE2"+
		"r\x2\xDE5\xDE6\aw\x2\x2\xDE6\x2BF\x3\x2\x2\x2\xDE7\xDE8\x5\x2C2\x162\x2"+
		"\xDE8\x2C1\x3\x2\x2\x2\xDE9\xDEA\aX\x2\x2\xDEA\xDEB\x5\x29E\x150\x2\xDEB"+
		"\xDEC\av\x2\x2\xDEC\xDED\x5\xDEp\x2\xDED\xDEE\aw\x2\x2\xDEE\x2C3\x3\x2"+
		"\x2\x2\xDEF\xDF0\a\x30\x2\x2\xDF0\x2C5\x3\x2\x2\x2\xDF1\xDF2\a=\x2\x2"+
		"\xDF2\x2C7\x3\x2\x2\x2\xDF3\xDF4\ak\x2\x2\xDF4\x2C9\x3\x2\x2\x2\xDF5\xDF6"+
		"\a<\x2\x2\xDF6\x2CB\x3\x2\x2\x2\xDF7\xDF8\a\x44\x2\x2\xDF8\x2CD\x3\x2"+
		"\x2\x2\xDF9\xDFA\a&\x2\x2\xDFA\x2CF\x3\x2\x2\x2\xDFB\xDFC\a:\x2\x2\xDFC"+
		"\x2D1\x3\x2\x2\x2\xDFD\xDFE\a\x46\x2\x2\xDFE\x2D3\x3\x2\x2\x2\xDFF\xE00"+
		"\a\x10\x2\x2\xE00\x2D5\x3\x2\x2\x2\xE01\xE02\a \x2\x2\xE02\x2D7\x3\x2"+
		"\x2\x2\xE03\xE04\aT\x2\x2\xE04\x2D9\x3\x2\x2\x2\xE05\xE06\a\x33\x2\x2"+
		"\xE06\x2DB\x3\x2\x2\x2\xE07\xE08\a\x14\x2\x2\xE08\x2DD\x3\x2\x2\x2\xE09"+
		"\xE0A\aJ\x2\x2\xE0A\x2DF\x3\x2\x2\x2\xE0B\xE0C\a\r\x2\x2\xE0C\x2E1\x3"+
		"\x2\x2\x2\xE0D\xE0E\am\x2\x2\xE0E\x2E3\x3\x2\x2\x2\xE0F\xE10\a\x31\x2"+
		"\x2\xE10\x2E5\x3\x2\x2\x2\xE11\xE12\aU\x2\x2\xE12\x2E7\x3\x2\x2\x2\xE13"+
		"\xE14\a\f\x2\x2\xE14\x2E9\x3\x2\x2\x2\xE15\xE16\aP\x2\x2\xE16\x2EB\x3"+
		"\x2\x2\x2\xE17\xE18\a#\x2\x2\xE18\x2ED\x3\x2\x2\x2\xE19\xE1A\a\xE\x2\x2"+
		"\xE1A\x2EF\x3\x2\x2\x2\xE1B\xE1C\a\x88\x2\x2\xE1C\xE1D\a\x8A\x2\x2\xE1D"+
		"\xE1E\x6\x179\xE\x3\xE1E\x2F1\x3\x2\x2\x2\xE1F\xE20\a\x8A\x2\x2\xE20\xE21"+
		"\a\x8A\x2\x2\xE21\xE22\x6\x17A\xF\x3\xE22\x2F3\x3\x2\x2\x2\xE23\xE24\a"+
		"\x8A\x2\x2\xE24\xE25\a\x96\x2\x2\xE25\xE26\x6\x17B\x10\x3\xE26\x2F5\x3"+
		"\x2\x2\x2\xE27\xE2E\x5\x2F8\x17D\x2\xE28\xE2E\ao\x2\x2\xE29\xE2E\aq\x2"+
		"\x2\xE2A\xE2E\ar\x2\x2\xE2B\xE2E\as\x2\x2\xE2C\xE2E\a\x42\x2\x2\xE2D\xE27"+
		"\x3\x2\x2\x2\xE2D\xE28\x3\x2\x2\x2\xE2D\xE29\x3\x2\x2\x2\xE2D\xE2A\x3"+
		"\x2\x2\x2\xE2D\xE2B\x3\x2\x2\x2\xE2D\xE2C\x3\x2\x2\x2\xE2E\x2F7\x3\x2"+
		"\x2\x2\xE2F\xE30\t\x16\x2\x2\xE30\x2F9\x3\x2\x2\x2\xE31\xE32\t\x17\x2"+
		"\x2\xE32\x2FB\x3\x2\x2\x2\xE33\xE34\a\x1A\x2\x2\xE34\xE36\x5\x6\x4\x2"+
		"\xE35\xE37\x5\x16E\xB8\x2\xE36\xE35\x3\x2\x2\x2\xE36\xE37\x3\x2\x2\x2"+
		"\xE37\xE39\x3\x2\x2\x2\xE38\xE3A\x5\x174\xBB\x2\xE39\xE38\x3\x2\x2\x2"+
		"\xE39\xE3A\x3\x2\x2\x2\xE3A\xE3C\x3\x2\x2\x2\xE3B\xE3D\x5\x178\xBD\x2"+
		"\xE3C\xE3B\x3\x2\x2\x2\xE3C\xE3D\x3\x2\x2\x2\xE3D\xE3E\x3\x2\x2\x2\xE3E"+
		"\xE40\x5\x184\xC3\x2\xE3F\xE41\a}\x2\x2\xE40\xE3F\x3\x2\x2\x2\xE40\xE41"+
		"\x3\x2\x2\x2\xE41\x2FD\x3\x2\x2\x2\xE42\xE43\a[\x2\x2\xE43\xE45\x5\x6"+
		"\x4\x2\xE44\xE46\x5\x16E\xB8\x2\xE45\xE44\x3\x2\x2\x2\xE45\xE46\x3\x2"+
		"\x2\x2\xE46\xE48\x3\x2\x2\x2\xE47\xE49\x5\x20E\x108\x2\xE48\xE47\x3\x2"+
		"\x2\x2\xE48\xE49\x3\x2\x2\x2\xE49\xE4B\x3\x2\x2\x2\xE4A\xE4C\x5\x178\xBD"+
		"\x2\xE4B\xE4A\x3\x2\x2\x2\xE4B\xE4C\x3\x2\x2\x2\xE4C\xE4D\x3\x2\x2\x2"+
		"\xE4D\xE4F\x5\x210\x109\x2\xE4E\xE50\a}\x2\x2\xE4F\xE4E\x3\x2\x2\x2\xE4F"+
		"\xE50\x3\x2\x2\x2\xE50\x2FF\x3\x2\x2\x2\xE51\xE52\a\x38\x2\x2\xE52\xE54"+
		"\x5\x6\x4\x2\xE53\xE55\x5\x22A\x116\x2\xE54\xE53\x3\x2\x2\x2\xE54\xE55"+
		"\x3\x2\x2\x2\xE55\xE57\x3\x2\x2\x2\xE56\xE58\x5\x230\x119\x2\xE57\xE56"+
		"\x3\x2\x2\x2\xE57\xE58\x3\x2\x2\x2\xE58\xE5A\x3\x2\x2\x2\xE59\xE5B\x5"+
		"\x178\xBD\x2\xE5A\xE59\x3\x2\x2\x2\xE5A\xE5B\x3\x2\x2\x2\xE5B\xE5C\x3"+
		"\x2\x2\x2\xE5C\xE5E\x5\x232\x11A\x2\xE5D\xE5F\a}\x2\x2\xE5E\xE5D\x3\x2"+
		"\x2\x2\xE5E\xE5F\x3\x2\x2\x2\xE5F\x301\x3\x2\x2\x2\xE60\xE61\a%\x2\x2"+
		"\xE61\xE63\x5\x6\x4\x2\xE62\xE64\x5\x244\x123\x2\xE63\xE62\x3\x2\x2\x2"+
		"\xE63\xE64\x3\x2\x2\x2\xE64\xE65\x3\x2\x2\x2\xE65\xE67\x5\x246\x124\x2"+
		"\xE66\xE68\a}\x2\x2\xE67\xE66\x3\x2\x2\x2\xE67\xE68\x3\x2\x2\x2\xE68\x303"+
		"\x3\x2\x2\x2\xE69\xE6A\a\x1F\x2\x2\xE6A\xE6B\x5\x1A4\xD3\x2\xE6B\xE6D"+
		"\x5\x6\x4\x2\xE6C\xE6E\x5\x22A\x116\x2\xE6D\xE6C\x3\x2\x2\x2\xE6D\xE6E"+
		"\x3\x2\x2\x2\xE6E\xE6F\x3\x2\x2\x2\xE6F\xE71\ax\x2\x2\xE70\xE72\x5\x1AA"+
		"\xD6\x2\xE71\xE70\x3\x2\x2\x2\xE71\xE72\x3\x2\x2\x2\xE72\xE73\x3\x2\x2"+
		"\x2\xE73\xE75\ay\x2\x2\xE74\xE76\x5\x178\xBD\x2\xE75\xE74\x3\x2\x2\x2"+
		"\xE75\xE76\x3\x2\x2\x2\xE76\xE77\x3\x2\x2\x2\xE77\xE78\a}\x2\x2\xE78\x305"+
		"\x3\x2\x2\x2\xE79\xE7A\a\'\x2\x2\xE7A\xE83\x5\f\a\x2\xE7B\xE7C\x5\x196"+
		"\xCC\x2\xE7C\xE7D\a}\x2\x2\xE7D\xE84\x3\x2\x2\x2\xE7E\xE7F\x5\x1A6\xD4"+
		"\x2\xE7F\xE80\at\x2\x2\xE80\xE81\x5\x1CC\xE7\x2\xE81\xE82\au\x2\x2\xE82"+
		"\xE84\x3\x2\x2\x2\xE83\xE7B\x3\x2\x2\x2\xE83\xE7E\x3\x2\x2\x2\xE84\x307"+
		"\x3\x2\x2\x2\xE85\xE86\x5\x196\xCC\x2\xE86\xE87\a}\x2\x2\xE87\x309\x3"+
		"\x2\x2\x2\xE88\xE89\x5\x1A6\xD4\x2\xE89\xE8A\at\x2\x2\xE8A\xE8B\x5\x1BC"+
		"\xDF\x2\xE8B\xE8C\au\x2\x2\xE8C\x30B\x3\x2\x2\x2\xE8D\xE8E\a\x1B\x2\x2"+
		"\xE8E\xE8F\x5\f\a\x2\xE8F\xE90\x5\x192\xCA\x2\xE90\xE91\a}\x2\x2\xE91"+
		"\x30D\x3\x2\x2\x2\xE92\xE93\a]\x2\x2\xE93\xE94\av\x2\x2\xE94\xE95\x5\x1AA"+
		"\xD6\x2\xE95\xE96\aw\x2\x2\xE96\xE97\at\x2\x2\xE97\xE98\x5\x1BC\xDF\x2"+
		"\xE98\xE99\au\x2\x2\xE99\x30F\x3\x2\x2\x2\xE9A\xE9B\a\x87\x2\x2\xE9B\xE9C"+
		"\x5\x6\x4\x2\xE9C\xE9D\ax\x2\x2\xE9D\xE9E\ay\x2\x2\xE9E\xE9F\x5\x204\x103"+
		"\x2\xE9F\x311\x3\x2\x2\x2\xEA0\xEA1\x5\x6\x4\x2\xEA1\xEA3\ax\x2\x2\xEA2"+
		"\xEA4\x5\x1AA\xD6\x2\xEA3\xEA2\x3\x2\x2\x2\xEA3\xEA4\x3\x2\x2\x2\xEA4"+
		"\xEA5\x3\x2\x2\x2\xEA5\xEA7\ay\x2\x2\xEA6\xEA8\x5\x1F8\xFD\x2\xEA7\xEA6"+
		"\x3\x2\x2\x2\xEA7\xEA8\x3\x2\x2\x2\xEA8\xEA9\x3\x2\x2\x2\xEA9\xEAA\x5"+
		"\x206\x104\x2\xEAA\x313\x3\x2\x2\x2\xEAB\xEAD\x5\x316\x18C\x2\xEAC\xEAE"+
		"\x5\x16E\xB8\x2\xEAD\xEAC\x3\x2\x2\x2\xEAD\xEAE\x3\x2\x2\x2\xEAE\xEAF"+
		"\x3\x2\x2\x2\xEAF\xEB1\ax\x2\x2\xEB0\xEB2\x5\x1AA\xD6\x2\xEB1\xEB0\x3"+
		"\x2\x2\x2\xEB1\xEB2\x3\x2\x2\x2\xEB2\xEB3\x3\x2\x2\x2\xEB3\xEB5\ay\x2"+
		"\x2\xEB4\xEB6\x5\x178\xBD\x2\xEB5\xEB4\x3\x2\x2\x2\xEB5\xEB6\x3\x2\x2"+
		"\x2\xEB6\xEB7\x3\x2\x2\x2\xEB7\xEB8\x5\x1A8\xD5\x2\xEB8\x315\x3\x2\x2"+
		"\x2\xEB9\xEBA\x5\x318\x18D\x2\xEBA\x317\x3\x2\x2\x2\xEBB\xEC1\x5\x6\x4"+
		"\x2\xEBC\xEBD\x5\x6\x4\x2\xEBD\xEBE\a\x8C\x2\x2\xEBE\xEBF\x5\x6\x4\x2"+
		"\xEBF\xEC1\x3\x2\x2\x2\xEC0\xEBB\x3\x2\x2\x2\xEC0\xEBC\x3\x2\x2\x2\xEC1"+
		"\xEC8\x3\x2\x2\x2\xEC2\xEC3\x5\n\x6\x2\xEC3\xEC4\az\x2\x2\xEC4\xEC5\x5"+
		"\x6\x4\x2\xEC5\xEC7\x3\x2\x2\x2\xEC6\xEC2\x3\x2\x2\x2\xEC7\xECA\x3\x2"+
		"\x2\x2\xEC8\xEC6\x3\x2\x2\x2\xEC8\xEC9\x3\x2\x2\x2\xEC9\x319\x3\x2\x2"+
		"\x2\xECA\xEC8\x3\x2\x2\x2\xECB\xECC\a\x45\x2\x2\xECC\xECD\x5\x1EA\xF6"+
		"\x2\xECD\xECE\ax\x2\x2\xECE\xECF\x5\f\a\x2\xECF\xED4\x5\x6\x4\x2\xED0"+
		"\xED1\a{\x2\x2\xED1\xED2\x5\f\a\x2\xED2\xED3\x5\x6\x4\x2\xED3\xED5\x3"+
		"\x2\x2\x2\xED4\xED0\x3\x2\x2\x2\xED4\xED5\x3\x2\x2\x2\xED5\xED6\x3\x2"+
		"\x2\x2\xED6\xED7\ay\x2\x2\xED7\xED8\x5\x1EE\xF8\x2\xED8\x31B\x3\x2\x2"+
		"\x2\xED9\xEDB\x5\x6\x4\x2\xEDA\xEDC\x5\x16E\xB8\x2\xEDB\xEDA\x3\x2\x2"+
		"\x2\xEDB\xEDC\x3\x2\x2\x2\xEDC\xEDD\x3\x2\x2\x2\xEDD\xEDF\ax\x2\x2\xEDE"+
		"\xEE0\x5\x1AA\xD6\x2\xEDF\xEDE\x3\x2\x2\x2\xEDF\xEE0\x3\x2\x2\x2\xEE0"+
		"\xEE1\x3\x2\x2\x2\xEE1\xEE3\ay\x2\x2\xEE2\xEE4\x5\x178\xBD\x2\xEE3\xEE2"+
		"\x3\x2\x2\x2\xEE3\xEE4\x3\x2\x2\x2\xEE4\xEE5\x3\x2\x2\x2\xEE5\xEE6\a}"+
		"\x2\x2\xEE6\x31D\x3\x2\x2\x2\xEE7\xEE8\x5\x6\x4\x2\xEE8\xEE9\at\x2\x2"+
		"\xEE9\xEEA\x5\x23C\x11F\x2\xEEA\xEEB\au\x2\x2\xEEB\x31F\x3\x2\x2\x2\xEEC"+
		"\xEED\a\'\x2\x2\xEED\xEEE\x5\f\a\x2\xEEE\xEEF\x5\x6\x4\x2\xEEF\xEF0\a"+
		"}\x2\x2\xEF0\x321\x3\x2\x2\x2\xEF1\xEF2\a]\x2\x2\xEF2\xEF3\av\x2\x2\xEF3"+
		"\xEF4\x5\x1AA\xD6\x2\xEF4\xEF5\aw\x2\x2\xEF5\xEF6\at\x2\x2\xEF6\xEF7\x5"+
		"\x23C\x11F\x2\xEF7\xEF8\au\x2\x2\xEF8\x323\x3\x2\x2\x2\xEF9\xEFA\az\x2"+
		"\x2\xEFA\xEFB\x5\x6\x4\x2\xEFB\xEFC\x5\n\x6\x2\xEFC\x325\x3\x2\x2\x2\xEFD"+
		"\xEFE\x5\x6\x4\x2\xEFE\xEFF\x5\n\x6\x2\xEFF\x327\x3\x2\x2\x2\xF00\xF02"+
		"\ax\x2\x2\xF01\xF03\x5.\x18\x2\xF02\xF01\x3\x2\x2\x2\xF02\xF03\x3\x2\x2"+
		"\x2\xF03\xF04\x3\x2\x2\x2\xF04\xF05\ay\x2\x2\xF05\x329\x3\x2\x2\x2\xF06"+
		"\xF08\ax\x2\x2\xF07\xF09\x5.\x18\x2\xF08\xF07\x3\x2\x2\x2\xF08\xF09\x3"+
		"\x2\x2\x2\xF09\xF0A\x3\x2\x2\x2\xF0A\xF0C\ay\x2\x2\xF0B\xF0D\x5N(\x2\xF0C"+
		"\xF0B\x3\x2\x2\x2\xF0C\xF0D\x3\x2\x2\x2\xF0D\x32B\x3\x2\x2\x2\x19B\x336"+
		"\x33E\x343\x349\x34B\x352\x356\x35B\x367\x369\x370\x376\x37C\x385\x38B"+
		"\x393\x399\x39F\x3A3\x3A9\x3B8\x3C6\x3CA\x3D6\x3DC\x3E2\x3EB\x3F0\x402"+
		"\x405\x40A\x410\x418\x42E\x43D\x443\x447\x44A\x44E\x455\x459\x460\x469"+
		"\x46E\x477\x47F\x48A\x48D\x492\x4A2\x4A6\x4AD\x4B5\x4C1\x4C5\x4CA\x4CC"+
		"\x4D1\x4D5\x4DA\x4E2\x502\x556\x56A\x56C\x574\x57D\x57F\x58F\x591\x59B"+
		"\x5A5\x5AE\x5B0\x5B8\x5C0\x5C8\x5D0\x5D8\x5DE\x5E6\x5F5\x5F9\x602\x606"+
		"\x60F\x613\x61A\x621\x628\x62F\x633\x639\x641\x64D\x659\x667\x673\x67D"+
		"\x682\x686\x68A\x6A4\x6CD\x6CF\x6D4\x6DB\x6DF\x6ED\x6F1\x6F8\x706\x712"+
		"\x718\x71D\x72A\x72E\x737\x741\x749\x753\x75C\x762\x775\x779\x77D\x784"+
		"\x78F\x7A0\x7B4\x7B8\x7BE\x7C5\x7C8\x7CC\x7CF\x7D5\x7DC\x7FB\x806\x809"+
		"\x80C\x80F\x814\x818\x820\x827\x82C\x82F\x832\x839\x843\x847\x856\x85A"+
		"\x85D\x860\x867\x86F\x872\x875\x87A\x87D\x880\x884\x88A\x896\x89D\x8A2"+
		"\x8A7\x8B2\x8BA\x8C1\x8CD\x8D1\x8D3\x8D8\x8DF\x8E8\x8EF\x8F2\x8F5\x8FE"+
		"\x901\x906\x917\x928\x934\x93B\x947\x94F\x953\x959\x95C\x95F\x964\x968"+
		"\x96C\x971\x97F\x983\x989\x98F\x991\x998\x99C\x99F\x9A4\x9A7\x9AF\x9B6"+
		"\x9B9\x9C4\x9D2\x9D5\x9D8\x9DD\x9E2\x9E4\x9E7\x9EA\x9F0\x9F3\x9FF\xA03"+
		"\xA06\xA09\xA15\xA1B\xA2A\xA2D\xA37\xA3A\xA40\xA46\xA49\xA54\xA62\xA68"+
		"\xA70\xA7A\xA81\xA86\xAAD\xAC5\xAD7\xADB\xADE\xAE1\xAE9\xAF1\xAF6\xAFA"+
		"\xB00\xB07\xB0A\xB0E\xB11\xB1D\xB23\xB27\xB2A\xB2D\xB30\xB35\xB38\xB3B"+
		"\xB3F\xB45\xB4E\xB55\xB5D\xB61\xB64\xB6C\xB72\xB78\xB7E\xB80\xB86\xB8A"+
		"\xB92\xB9A\xB9E\xBA5\xBA9\xBAC\xBAF\xBB4\xBB7\xBBA\xBBE\xBC4\xBCD\xBD4"+
		"\xBD7\xBDC\xBDF\xBE4\xBEE\xBF5\xBF8\xBFB\xC00\xC04\xC08\xC19\xC1E\xC22"+
		"\xC26\xC2F\xC32\xC35\xC3A\xC3E\xC42\xC47\xC4A\xC53\xC58\xC5D\xC62\xC67"+
		"\xC69\xC6C\xC6F\xC77\xC7A\xC86\xC89\xC8E\xC92\xC9C\xCA0\xCA5\xCAE\xCB2"+
		"\xCB7\xCBA\xCBD\xCC3\xCC7\xCCB\xCD3\xCDC\xCE3\xCE9\xCF2\xCF9\xCFD\xD01"+
		"\xD0A\xD11\xD16\xD1C\xD25\xD2F\xD4F\xD52\xD55\xD59\xD62\xD79\xD7D\xD87"+
		"\xD89\xD91\xD93\xD9A\xDA2\xDBB\xDC5\xDCA\xDCD\xDD7\xDE0\xE2D\xE36\xE39"+
		"\xE3C\xE40\xE45\xE48\xE4B\xE4F\xE54\xE57\xE5A\xE5E\xE63\xE67\xE6D\xE71"+
		"\xE75\xE83\xEA3\xEA7\xEAD\xEB1\xEB5\xEC0\xEC8\xED4\xEDB\xEDF\xEE3\xF02"+
		"\xF08\xF0C";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
